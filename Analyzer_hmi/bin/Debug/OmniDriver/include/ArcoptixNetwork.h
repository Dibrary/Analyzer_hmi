/**
 * File: ArcoptixNetwork.h
 * Autogenerated on Fri Mar 23 13:38:50 EDT 2018 based on
 * ArcoptixNetwork.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/arcoptix/ArcoptixNetwork
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef ARCOPTIXNETWORK_H
#define ARCOPTIXNETWORK_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "NetworkSpectrometer.h"
#include "ArcoptixTransport.h"
#include "JString.h"
#include "GUIProviderArray.h"
#include "Spectrum.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class NetworkSpectrometer;
class ArcoptixTransport;
class JString;
class GUIProviderArray;
class Spectrum;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED ArcoptixNetwork : public NetworkSpectrometer // CPPClass.tag001
{
public: 
	ArcoptixNetwork(ArcoptixTransport& transport, JString& serialNumber);
	void openSpectrometer(int indexNotUsed);
	JString getAddress();
	int getPort();
	short isConnected();
	void connectToSource(JString& ipAddress, int port);
	void disconnect();
	GUIProviderArray getGUIFeatures();
	JString getSerialNumber();
	JString getFirmwareVersion();
	int getGain();
	void setGain(int gainValue);
	void closeSpectrometer();
	JString getInfo(int slot);
	JString getName();
	int getNumberOfChannels();
	int getNumberOfEnabledChannels();
	void setStrobeEnable(short strobe);
	void setIntegrationTime(int intTime);
	Spectrum getSpectrum(Spectrum& spectrum);
	void reconnect();
	~ArcoptixNetwork();
	// No public default Java constructor; creating one:
	ArcoptixNetwork();
	// No public Java copy constructor; creating one:
	ArcoptixNetwork(const ArcoptixNetwork &that);
	// Creating assignment operator declaration:
	ArcoptixNetwork &operator=(const ArcoptixNetwork &that);

private:
	jmethodID mid_ArcoptixNetwork3238;
	jmethodID mid_openSpectrometer3239;
	jmethodID mid_getAddress3240;
	jmethodID mid_getPort3241;
	jmethodID mid_isConnected3242;
	jmethodID mid_connectToSource3243;
	jmethodID mid_disconnect3244;
	jmethodID mid_getGUIFeatures3245;
	jmethodID mid_getSerialNumber3246;
	jmethodID mid_getFirmwareVersion3247;
	jmethodID mid_getGain3248;
	jmethodID mid_setGain3249;
	jmethodID mid_closeSpectrometer3250;
	jmethodID mid_getInfo3251;
	jmethodID mid_getName3252;
	jmethodID mid_getNumberOfChannels3253;
	jmethodID mid_getNumberOfEnabledChannels3254;
	jmethodID mid_setStrobeEnable3255;
	jmethodID mid_setIntegrationTime3256;
	jmethodID mid_getSpectrum3257;
	jmethodID mid_reconnect3258;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_NETWORKSPECTROMETER_T
#define EXTERN_TYPEDEF_NETWORKSPECTROMETER_T
	typedef void* NETWORKSPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_NETWORKSPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_ARCOPTIXTRANSPORT_T
#define EXTERN_TYPEDEF_ARCOPTIXTRANSPORT_T
	typedef void* ARCOPTIXTRANSPORT_T;
#endif /* EXTERN_TYPEDEF_ARCOPTIXTRANSPORT_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
#define EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
	typedef void* GUIPROVIDERARRAY_T;
#endif /* EXTERN_TYPEDEF_GUIPROVIDERARRAY_T */
#ifndef EXTERN_TYPEDEF_SPECTRUM_T
#define EXTERN_TYPEDEF_SPECTRUM_T
	typedef void* SPECTRUM_T;
#endif /* EXTERN_TYPEDEF_SPECTRUM_T */
#ifndef EXTERN_TYPEDEF_ARCOPTIXNETWORK_T
#define EXTERN_TYPEDEF_ARCOPTIXNETWORK_T
	typedef void* ARCOPTIXNETWORK_T;
#endif /* EXTERN_TYPEDEF_ARCOPTIXNETWORK_T */

	// No public default Java constructor; creating one:
	EXPORTED ARCOPTIXNETWORK_T ArcoptixNetwork_Create();
	EXPORTED ARCOPTIXNETWORK_T ArcoptixNetwork_Create_1(ARCOPTIXTRANSPORT_T transport, JSTRING_T serialNumber);
	EXPORTED void ArcoptixNetwork_openSpectrometer(ARCOPTIXNETWORK_T c_arcoptix_network, int indexNotUsed);
	EXPORTED void ArcoptixNetwork_getAddress(ARCOPTIXNETWORK_T c_arcoptix_network, JSTRING_T retval);
	EXPORTED int ArcoptixNetwork_getPort(ARCOPTIXNETWORK_T c_arcoptix_network);
	EXPORTED short ArcoptixNetwork_isConnected(ARCOPTIXNETWORK_T c_arcoptix_network);
	EXPORTED void ArcoptixNetwork_connectToSource(ARCOPTIXNETWORK_T c_arcoptix_network, JSTRING_T ipAddress, int port);
	EXPORTED void ArcoptixNetwork_disconnect(ARCOPTIXNETWORK_T c_arcoptix_network);
	EXPORTED void ArcoptixNetwork_getGUIFeatures(ARCOPTIXNETWORK_T c_arcoptix_network, GUIPROVIDERARRAY_T retval);
	EXPORTED void ArcoptixNetwork_getSerialNumber(ARCOPTIXNETWORK_T c_arcoptix_network, JSTRING_T retval);
	EXPORTED void ArcoptixNetwork_getFirmwareVersion(ARCOPTIXNETWORK_T c_arcoptix_network, JSTRING_T retval);
	EXPORTED int ArcoptixNetwork_getGain(ARCOPTIXNETWORK_T c_arcoptix_network);
	EXPORTED void ArcoptixNetwork_setGain(ARCOPTIXNETWORK_T c_arcoptix_network, int gainValue);
	EXPORTED void ArcoptixNetwork_closeSpectrometer(ARCOPTIXNETWORK_T c_arcoptix_network);
	EXPORTED void ArcoptixNetwork_getInfo(ARCOPTIXNETWORK_T c_arcoptix_network, int slot, JSTRING_T retval);
	EXPORTED void ArcoptixNetwork_getName(ARCOPTIXNETWORK_T c_arcoptix_network, JSTRING_T retval);
	EXPORTED int ArcoptixNetwork_getNumberOfChannels(ARCOPTIXNETWORK_T c_arcoptix_network);
	EXPORTED int ArcoptixNetwork_getNumberOfEnabledChannels(ARCOPTIXNETWORK_T c_arcoptix_network);
	EXPORTED void ArcoptixNetwork_setStrobeEnable(ARCOPTIXNETWORK_T c_arcoptix_network, short strobe);
	EXPORTED void ArcoptixNetwork_setIntegrationTime(ARCOPTIXNETWORK_T c_arcoptix_network, int intTime);
	EXPORTED void ArcoptixNetwork_getSpectrum(ARCOPTIXNETWORK_T c_arcoptix_network, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void ArcoptixNetwork_reconnect(ARCOPTIXNETWORK_T c_arcoptix_network);
	EXPORTED void ArcoptixNetwork_Destroy(ARCOPTIXNETWORK_T arcoptix_network);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED ARCOPTIXNETWORK_T STDCALL ArcoptixNetwork_Create_stdcall_1(ARCOPTIXTRANSPORT_T transport, JSTRING_T serialNumber);
	EXPORTED void STDCALL ArcoptixNetwork_openSpectrometer_stdcall(ARCOPTIXNETWORK_T c_arcoptix_network, int indexNotUsed);
	EXPORTED void STDCALL ArcoptixNetwork_getAddress_stdcall(ARCOPTIXNETWORK_T c_arcoptix_network, JSTRING_T retval);
	EXPORTED int STDCALL ArcoptixNetwork_getPort_stdcall(ARCOPTIXNETWORK_T c_arcoptix_network);
	EXPORTED short STDCALL ArcoptixNetwork_isConnected_stdcall(ARCOPTIXNETWORK_T c_arcoptix_network);
	EXPORTED void STDCALL ArcoptixNetwork_connectToSource_stdcall(ARCOPTIXNETWORK_T c_arcoptix_network, JSTRING_T ipAddress, int port);
	EXPORTED void STDCALL ArcoptixNetwork_disconnect_stdcall(ARCOPTIXNETWORK_T c_arcoptix_network);
	EXPORTED void STDCALL ArcoptixNetwork_getGUIFeatures_stdcall(ARCOPTIXNETWORK_T c_arcoptix_network, GUIPROVIDERARRAY_T retval);
	EXPORTED void STDCALL ArcoptixNetwork_getSerialNumber_stdcall(ARCOPTIXNETWORK_T c_arcoptix_network, JSTRING_T retval);
	EXPORTED void STDCALL ArcoptixNetwork_getFirmwareVersion_stdcall(ARCOPTIXNETWORK_T c_arcoptix_network, JSTRING_T retval);
	EXPORTED int STDCALL ArcoptixNetwork_getGain_stdcall(ARCOPTIXNETWORK_T c_arcoptix_network);
	EXPORTED void STDCALL ArcoptixNetwork_setGain_stdcall(ARCOPTIXNETWORK_T c_arcoptix_network, int gainValue);
	EXPORTED void STDCALL ArcoptixNetwork_closeSpectrometer_stdcall(ARCOPTIXNETWORK_T c_arcoptix_network);
	EXPORTED void STDCALL ArcoptixNetwork_getInfo_stdcall(ARCOPTIXNETWORK_T c_arcoptix_network, int slot, JSTRING_T retval);
	EXPORTED void STDCALL ArcoptixNetwork_getName_stdcall(ARCOPTIXNETWORK_T c_arcoptix_network, JSTRING_T retval);
	EXPORTED int STDCALL ArcoptixNetwork_getNumberOfChannels_stdcall(ARCOPTIXNETWORK_T c_arcoptix_network);
	EXPORTED int STDCALL ArcoptixNetwork_getNumberOfEnabledChannels_stdcall(ARCOPTIXNETWORK_T c_arcoptix_network);
	EXPORTED void STDCALL ArcoptixNetwork_setStrobeEnable_stdcall(ARCOPTIXNETWORK_T c_arcoptix_network, short strobe);
	EXPORTED void STDCALL ArcoptixNetwork_setIntegrationTime_stdcall(ARCOPTIXNETWORK_T c_arcoptix_network, int intTime);
	EXPORTED void STDCALL ArcoptixNetwork_getSpectrum_stdcall(ARCOPTIXNETWORK_T c_arcoptix_network, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void STDCALL ArcoptixNetwork_reconnect_stdcall(ARCOPTIXNETWORK_T c_arcoptix_network);
	EXPORTED void STDCALL ArcoptixNetwork_Destroy_stdcall(ARCOPTIXNETWORK_T arcoptix_network);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* ARCOPTIXNETWORK_H */
