/**
 * File: Ventana.h
 * Autogenerated on Fri Mar 23 13:39:18 EDT 2018 based on
 * Ventana.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/ventana/Ventana
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef VENTANA_H
#define VENTANA_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBSpectrometer.h"
#include "JString.h"
#include "GUIProviderArray.h"
#include "CoefficientsArray.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBSpectrometer;
class JString;
class GUIProviderArray;
class CoefficientsArray;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED Ventana : public USBSpectrometer // CPPClass.tag001
{
public: 
	Ventana();
	Ventana(int i);
	void setEndpoints();
	void openSpectrometer(int index);
	JString getFirmwareVersion();
	JString getInfo(int slot);
	CharArray getInfoBytes(int slot);
	CharArray getStatusArray();
	void initialize();
	void setInfo(int slot, JString& str);
	void setInfoBytes(int slot, CharArray& byteArray);
	void setIntegrationTime(int intTime);
	GUIProviderArray getGUIFeatures();
	void setStrobeEnable(short strobe);
	CharArray queryDevice(int messageType, CharArray& payload);
	short sendCommandToDevice(int messageType, CharArray& payload, int endPointNumber);
	short sendCommandToDevice(int messageType, CharArray& payload);
	void readSpectrum();
	CoefficientsArray getWavelengthCalibrationCoefficients();
	DoubleArray getWavelengths(int index);
	CoefficientsArray readWavelengthCalibrationCoefficientsFromSpectrometer();
	void setWavelengthCalibrationCoefficients(CoefficientsArray& coefficients);
	void setWavelengths(DoubleArray& wavelengths, int index);
	void writeWavelengthCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	void writeNonlinearityCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	CoefficientsArray readNonlinearityCoefficientsFromSpectrometer();
	void setNonlinearityCoefficients(CoefficientsArray& coefficients);
	CoefficientsArray getNonlinearityCoefficients();
	DoubleArray getNonlinearityCoefficientsSingleChannel(int channelIndex);
	void setNonlinearityCoefficientsSingleChannel(DoubleArray& nonlinearities, int channelIndex);
	void writeStrayLightCoefficientToSpectrometer(CoefficientsArray& coefficients);
	CoefficientsArray readStrayLightCorrectionCoefficientFromSpectrometer();
	void setStrayLightCorrectionCoefficient(CoefficientsArray& coefficients);
	CoefficientsArray getStrayLightCorrectionCoefficient();
	double getStrayLight(int index);
	void setStrayLight(double strayLight, int index);
	int getSaturationIntensity();
	short setSaturationIntensity(int saturationIntensity, JString& key);
	void setTECEnable(short enable);
	void setFanEnable(short enable);
	double getDetectorTemperatureCelsius();
	double getDetectorTemperatureSetPointCelsius();
	void setDetectorSetPointCelsius(double point);
	double getSetPointMinimumCelsius();
	double getSetPointMaximumCelsius();
	double getSetPointIncrementCelsius();
	short isSaveTECStateEnabled();
	void saveTECState();
	int getLightSourceModuleCount();
	int getLightSourceCount(int moduleIndex);
	void setLightSourceEnable(int moduleIndex, int lampIndex, short enable);
	short getLightSourceEnable(int moduleIndex, int lampIndex);
	void setLightSourceIntensity(int moduleIndex, int lampIndex, double intensity);
	double getLightSourceIntensity(int moduleIndex, int lampIndex);
	~Ventana();
	// No public Java copy constructor; creating one:
	Ventana(const Ventana &that);
	// Creating assignment operator declaration:
	Ventana &operator=(const Ventana &that);

private:
	jmethodID mid_Ventana6325;
	jmethodID mid_Ventana6326;
	jmethodID mid_setEndpoints6327;
	jmethodID mid_openSpectrometer6328;
	jmethodID mid_getFirmwareVersion6329;
	jmethodID mid_getInfo6330;
	jmethodID mid_getInfoBytes6331;
	jmethodID mid_getStatusArray6332;
	jmethodID mid_initialize6333;
	jmethodID mid_setInfo6334;
	jmethodID mid_setInfoBytes6335;
	jmethodID mid_setIntegrationTime6336;
	jmethodID mid_getGUIFeatures6337;
	jmethodID mid_setStrobeEnable6338;
	jmethodID mid_queryDevice6339;
	jmethodID mid_sendCommandToDevice6340;
	jmethodID mid_sendCommandToDevice6341;
	jmethodID mid_readSpectrum6342;
	jmethodID mid_getWavelengthCalibrationCoefficients6343;
	jmethodID mid_getWavelengths6344;
	jmethodID mid_readWavelengthCalibrationCoefficientsFromSpectrometer6345;
	jmethodID mid_setWavelengthCalibrationCoefficients6346;
	jmethodID mid_setWavelengths6347;
	jmethodID mid_writeWavelengthCoefficientsToSpectrometer6348;
	jmethodID mid_writeNonlinearityCoefficientsToSpectrometer6349;
	jmethodID mid_readNonlinearityCoefficientsFromSpectrometer6350;
	jmethodID mid_setNonlinearityCoefficients6351;
	jmethodID mid_getNonlinearityCoefficients6352;
	jmethodID mid_getNonlinearityCoefficientsSingleChannel6353;
	jmethodID mid_setNonlinearityCoefficientsSingleChannel6354;
	jmethodID mid_writeStrayLightCoefficientToSpectrometer6355;
	jmethodID mid_readStrayLightCorrectionCoefficientFromSpectrometer6356;
	jmethodID mid_setStrayLightCorrectionCoefficient6357;
	jmethodID mid_getStrayLightCorrectionCoefficient6358;
	jmethodID mid_getStrayLight6359;
	jmethodID mid_setStrayLight6360;
	jmethodID mid_getSaturationIntensity6361;
	jmethodID mid_setSaturationIntensity6362;
	jmethodID mid_setTECEnable6363;
	jmethodID mid_setFanEnable6364;
	jmethodID mid_getDetectorTemperatureCelsius6365;
	jmethodID mid_getDetectorTemperatureSetPointCelsius6366;
	jmethodID mid_setDetectorSetPointCelsius6367;
	jmethodID mid_getSetPointMinimumCelsius6368;
	jmethodID mid_getSetPointMaximumCelsius6369;
	jmethodID mid_getSetPointIncrementCelsius6370;
	jmethodID mid_isSaveTECStateEnabled6371;
	jmethodID mid_saveTECState6372;
	jmethodID mid_getLightSourceModuleCount6373;
	jmethodID mid_getLightSourceCount6374;
	jmethodID mid_setLightSourceEnable6375;
	jmethodID mid_getLightSourceEnable6376;
	jmethodID mid_setLightSourceIntensity6377;
	jmethodID mid_getLightSourceIntensity6378;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBSPECTROMETER_T
#define EXTERN_TYPEDEF_USBSPECTROMETER_T
	typedef void* USBSPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_USBSPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
#define EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
	typedef void* GUIPROVIDERARRAY_T;
#endif /* EXTERN_TYPEDEF_GUIPROVIDERARRAY_T */
#ifndef EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
#define EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
	typedef void* COEFFICIENTSARRAY_T;
#endif /* EXTERN_TYPEDEF_COEFFICIENTSARRAY_T */
#ifndef EXTERN_TYPEDEF_VENTANA_T
#define EXTERN_TYPEDEF_VENTANA_T
	typedef void* VENTANA_T;
#endif /* EXTERN_TYPEDEF_VENTANA_T */

	EXPORTED VENTANA_T Ventana_Create();
	EXPORTED VENTANA_T Ventana_Create_1(int i);
	EXPORTED void Ventana_setEndpoints(VENTANA_T c_ventana);
	EXPORTED void Ventana_openSpectrometer(VENTANA_T c_ventana, int index);
	EXPORTED void Ventana_getFirmwareVersion(VENTANA_T c_ventana, JSTRING_T retval);
	EXPORTED void Ventana_getInfo(VENTANA_T c_ventana, int slot, JSTRING_T retval);
	EXPORTED void Ventana_getInfoBytes(VENTANA_T c_ventana, int slot, CHARARRAY_T retval);
	EXPORTED void Ventana_getStatusArray(VENTANA_T c_ventana, CHARARRAY_T retval);
	EXPORTED void Ventana_initialize(VENTANA_T c_ventana);
	EXPORTED void Ventana_setInfo(VENTANA_T c_ventana, int slot, JSTRING_T str);
	EXPORTED void Ventana_setInfoBytes(VENTANA_T c_ventana, int slot, CHARARRAY_T byteArray);
	EXPORTED void Ventana_setIntegrationTime(VENTANA_T c_ventana, int intTime);
	EXPORTED void Ventana_getGUIFeatures(VENTANA_T c_ventana, GUIPROVIDERARRAY_T retval);
	EXPORTED void Ventana_setStrobeEnable(VENTANA_T c_ventana, short strobe);
	EXPORTED void Ventana_queryDevice(VENTANA_T c_ventana, int messageType, CHARARRAY_T payload, CHARARRAY_T retval);
	EXPORTED short Ventana_sendCommandToDevice(VENTANA_T c_ventana, int messageType, CHARARRAY_T payload, int endPointNumber);
	EXPORTED short Ventana_sendCommandToDevice_1(VENTANA_T c_ventana, int messageType, CHARARRAY_T payload);
	EXPORTED void Ventana_readSpectrum(VENTANA_T c_ventana);
	EXPORTED void Ventana_getWavelengthCalibrationCoefficients(VENTANA_T c_ventana, COEFFICIENTSARRAY_T retval);
	EXPORTED void Ventana_getWavelengths(VENTANA_T c_ventana, int index, DOUBLEARRAY_T retval);
	EXPORTED void Ventana_readWavelengthCalibrationCoefficientsFromSpectrometer(VENTANA_T c_ventana, COEFFICIENTSARRAY_T retval);
	EXPORTED void Ventana_setWavelengthCalibrationCoefficients(VENTANA_T c_ventana, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void Ventana_setWavelengths(VENTANA_T c_ventana, DOUBLEARRAY_T wavelengths, int index);
	EXPORTED void Ventana_writeWavelengthCoefficientsToSpectrometer(VENTANA_T c_ventana, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void Ventana_writeNonlinearityCoefficientsToSpectrometer(VENTANA_T c_ventana, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void Ventana_readNonlinearityCoefficientsFromSpectrometer(VENTANA_T c_ventana, COEFFICIENTSARRAY_T retval);
	EXPORTED void Ventana_setNonlinearityCoefficients(VENTANA_T c_ventana, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void Ventana_getNonlinearityCoefficients(VENTANA_T c_ventana, COEFFICIENTSARRAY_T retval);
	EXPORTED void Ventana_getNonlinearityCoefficientsSingleChannel(VENTANA_T c_ventana, int channelIndex, DOUBLEARRAY_T retval);
	EXPORTED void Ventana_setNonlinearityCoefficientsSingleChannel(VENTANA_T c_ventana, DOUBLEARRAY_T nonlinearities, int channelIndex);
	EXPORTED void Ventana_writeStrayLightCoefficientToSpectrometer(VENTANA_T c_ventana, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void Ventana_readStrayLightCorrectionCoefficientFromSpectrometer(VENTANA_T c_ventana, COEFFICIENTSARRAY_T retval);
	EXPORTED void Ventana_setStrayLightCorrectionCoefficient(VENTANA_T c_ventana, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void Ventana_getStrayLightCorrectionCoefficient(VENTANA_T c_ventana, COEFFICIENTSARRAY_T retval);
	EXPORTED double Ventana_getStrayLight(VENTANA_T c_ventana, int index);
	EXPORTED void Ventana_setStrayLight(VENTANA_T c_ventana, double strayLight, int index);
	EXPORTED int Ventana_getSaturationIntensity(VENTANA_T c_ventana);
	EXPORTED short Ventana_setSaturationIntensity(VENTANA_T c_ventana, int saturationIntensity, JSTRING_T key);
	EXPORTED void Ventana_setTECEnable(VENTANA_T c_ventana, short enable);
	EXPORTED void Ventana_setFanEnable(VENTANA_T c_ventana, short enable);
	EXPORTED double Ventana_getDetectorTemperatureCelsius(VENTANA_T c_ventana);
	EXPORTED double Ventana_getDetectorTemperatureSetPointCelsius(VENTANA_T c_ventana);
	EXPORTED void Ventana_setDetectorSetPointCelsius(VENTANA_T c_ventana, double point);
	EXPORTED double Ventana_getSetPointMinimumCelsius(VENTANA_T c_ventana);
	EXPORTED double Ventana_getSetPointMaximumCelsius(VENTANA_T c_ventana);
	EXPORTED double Ventana_getSetPointIncrementCelsius(VENTANA_T c_ventana);
	EXPORTED short Ventana_isSaveTECStateEnabled(VENTANA_T c_ventana);
	EXPORTED void Ventana_saveTECState(VENTANA_T c_ventana);
	EXPORTED int Ventana_getLightSourceModuleCount(VENTANA_T c_ventana);
	EXPORTED int Ventana_getLightSourceCount(VENTANA_T c_ventana, int moduleIndex);
	EXPORTED void Ventana_setLightSourceEnable(VENTANA_T c_ventana, int moduleIndex, int lampIndex, short enable);
	EXPORTED short Ventana_getLightSourceEnable(VENTANA_T c_ventana, int moduleIndex, int lampIndex);
	EXPORTED void Ventana_setLightSourceIntensity(VENTANA_T c_ventana, int moduleIndex, int lampIndex, double intensity);
	EXPORTED double Ventana_getLightSourceIntensity(VENTANA_T c_ventana, int moduleIndex, int lampIndex);
	EXPORTED void Ventana_Destroy(VENTANA_T ventana);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED VENTANA_T STDCALL Ventana_Create_stdcall();
	EXPORTED VENTANA_T STDCALL Ventana_Create_stdcall_1(int i);
	EXPORTED void STDCALL Ventana_setEndpoints_stdcall(VENTANA_T c_ventana);
	EXPORTED void STDCALL Ventana_openSpectrometer_stdcall(VENTANA_T c_ventana, int index);
	EXPORTED void STDCALL Ventana_getFirmwareVersion_stdcall(VENTANA_T c_ventana, JSTRING_T retval);
	EXPORTED void STDCALL Ventana_getInfo_stdcall(VENTANA_T c_ventana, int slot, JSTRING_T retval);
	EXPORTED void STDCALL Ventana_getInfoBytes_stdcall(VENTANA_T c_ventana, int slot, CHARARRAY_T retval);
	EXPORTED void STDCALL Ventana_getStatusArray_stdcall(VENTANA_T c_ventana, CHARARRAY_T retval);
	EXPORTED void STDCALL Ventana_initialize_stdcall(VENTANA_T c_ventana);
	EXPORTED void STDCALL Ventana_setInfo_stdcall(VENTANA_T c_ventana, int slot, JSTRING_T str);
	EXPORTED void STDCALL Ventana_setInfoBytes_stdcall(VENTANA_T c_ventana, int slot, CHARARRAY_T byteArray);
	EXPORTED void STDCALL Ventana_setIntegrationTime_stdcall(VENTANA_T c_ventana, int intTime);
	EXPORTED void STDCALL Ventana_getGUIFeatures_stdcall(VENTANA_T c_ventana, GUIPROVIDERARRAY_T retval);
	EXPORTED void STDCALL Ventana_setStrobeEnable_stdcall(VENTANA_T c_ventana, short strobe);
	EXPORTED void STDCALL Ventana_queryDevice_stdcall(VENTANA_T c_ventana, int messageType, CHARARRAY_T payload, CHARARRAY_T retval);
	EXPORTED short STDCALL Ventana_sendCommandToDevice_stdcall(VENTANA_T c_ventana, int messageType, CHARARRAY_T payload, int endPointNumber);
	EXPORTED short STDCALL Ventana_sendCommandToDevice_stdcall_1(VENTANA_T c_ventana, int messageType, CHARARRAY_T payload);
	EXPORTED void STDCALL Ventana_readSpectrum_stdcall(VENTANA_T c_ventana);
	EXPORTED void STDCALL Ventana_getWavelengthCalibrationCoefficients_stdcall(VENTANA_T c_ventana, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL Ventana_getWavelengths_stdcall(VENTANA_T c_ventana, int index, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL Ventana_readWavelengthCalibrationCoefficientsFromSpectrometer_stdcall(VENTANA_T c_ventana, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL Ventana_setWavelengthCalibrationCoefficients_stdcall(VENTANA_T c_ventana, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL Ventana_setWavelengths_stdcall(VENTANA_T c_ventana, DOUBLEARRAY_T wavelengths, int index);
	EXPORTED void STDCALL Ventana_writeWavelengthCoefficientsToSpectrometer_stdcall(VENTANA_T c_ventana, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL Ventana_writeNonlinearityCoefficientsToSpectrometer_stdcall(VENTANA_T c_ventana, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL Ventana_readNonlinearityCoefficientsFromSpectrometer_stdcall(VENTANA_T c_ventana, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL Ventana_setNonlinearityCoefficients_stdcall(VENTANA_T c_ventana, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL Ventana_getNonlinearityCoefficients_stdcall(VENTANA_T c_ventana, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL Ventana_getNonlinearityCoefficientsSingleChannel_stdcall(VENTANA_T c_ventana, int channelIndex, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL Ventana_setNonlinearityCoefficientsSingleChannel_stdcall(VENTANA_T c_ventana, DOUBLEARRAY_T nonlinearities, int channelIndex);
	EXPORTED void STDCALL Ventana_writeStrayLightCoefficientToSpectrometer_stdcall(VENTANA_T c_ventana, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL Ventana_readStrayLightCorrectionCoefficientFromSpectrometer_stdcall(VENTANA_T c_ventana, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL Ventana_setStrayLightCorrectionCoefficient_stdcall(VENTANA_T c_ventana, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL Ventana_getStrayLightCorrectionCoefficient_stdcall(VENTANA_T c_ventana, COEFFICIENTSARRAY_T retval);
	EXPORTED double STDCALL Ventana_getStrayLight_stdcall(VENTANA_T c_ventana, int index);
	EXPORTED void STDCALL Ventana_setStrayLight_stdcall(VENTANA_T c_ventana, double strayLight, int index);
	EXPORTED int STDCALL Ventana_getSaturationIntensity_stdcall(VENTANA_T c_ventana);
	EXPORTED short STDCALL Ventana_setSaturationIntensity_stdcall(VENTANA_T c_ventana, int saturationIntensity, JSTRING_T key);
	EXPORTED void STDCALL Ventana_setTECEnable_stdcall(VENTANA_T c_ventana, short enable);
	EXPORTED void STDCALL Ventana_setFanEnable_stdcall(VENTANA_T c_ventana, short enable);
	EXPORTED double STDCALL Ventana_getDetectorTemperatureCelsius_stdcall(VENTANA_T c_ventana);
	EXPORTED double STDCALL Ventana_getDetectorTemperatureSetPointCelsius_stdcall(VENTANA_T c_ventana);
	EXPORTED void STDCALL Ventana_setDetectorSetPointCelsius_stdcall(VENTANA_T c_ventana, double point);
	EXPORTED double STDCALL Ventana_getSetPointMinimumCelsius_stdcall(VENTANA_T c_ventana);
	EXPORTED double STDCALL Ventana_getSetPointMaximumCelsius_stdcall(VENTANA_T c_ventana);
	EXPORTED double STDCALL Ventana_getSetPointIncrementCelsius_stdcall(VENTANA_T c_ventana);
	EXPORTED short STDCALL Ventana_isSaveTECStateEnabled_stdcall(VENTANA_T c_ventana);
	EXPORTED void STDCALL Ventana_saveTECState_stdcall(VENTANA_T c_ventana);
	EXPORTED int STDCALL Ventana_getLightSourceModuleCount_stdcall(VENTANA_T c_ventana);
	EXPORTED int STDCALL Ventana_getLightSourceCount_stdcall(VENTANA_T c_ventana, int moduleIndex);
	EXPORTED void STDCALL Ventana_setLightSourceEnable_stdcall(VENTANA_T c_ventana, int moduleIndex, int lampIndex, short enable);
	EXPORTED short STDCALL Ventana_getLightSourceEnable_stdcall(VENTANA_T c_ventana, int moduleIndex, int lampIndex);
	EXPORTED void STDCALL Ventana_setLightSourceIntensity_stdcall(VENTANA_T c_ventana, int moduleIndex, int lampIndex, double intensity);
	EXPORTED double STDCALL Ventana_getLightSourceIntensity_stdcall(VENTANA_T c_ventana, int moduleIndex, int lampIndex);
	EXPORTED void STDCALL Ventana_Destroy_stdcall(VENTANA_T ventana);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* VENTANA_H */
