/**
 * File: SHAImpl.h
 * Autogenerated on Fri Mar 23 13:38:40 EDT 2018 based on
 * SHAImpl.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/spectralhyperadapter/SHAImpl
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef SHAIMPL_H
#define SHAIMPL_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBFeature.h"
#include "USBInterface.h"
#include "Spectrometer.h"
#include "SHAChannel.h"
#include "JStringArray.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBFeature;
class USBInterface;
class Spectrometer;
class SHAChannel;
class JStringArray;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED SHAImpl : public USBFeature // CPPClass.tag001
{
public: 
	SHAImpl(USBInterface& usbInt, Spectrometer& spectrometer);
	short isHyperAdapterPresent();
	void initSHA(SHAChannel& channel);
	int setHyperAdapterDAC(double voltage);
	int readHyperAdapterEEPROM(CharArray& data, int start, int length);
	int writeHyperAdapterEEPROM(CharArray& data, int start, int length);
	void calibrate();
	void restoreCalibration();
	double getCalibrationTime();
	SHAChannel getSHAChannel();
	JStringArray getFeatureGUIClassnames();
	~SHAImpl();
	// No public default Java constructor; creating one:
	SHAImpl();
	// No public Java copy constructor; creating one:
	SHAImpl(const SHAImpl &that);
	// Creating assignment operator declaration:
	SHAImpl &operator=(const SHAImpl &that);

private:
	jmethodID mid_SHAImpl2056;
	jmethodID mid_isHyperAdapterPresent2057;
	jmethodID mid_initSHA2058;
	jmethodID mid_setHyperAdapterDAC2059;
	jmethodID mid_readHyperAdapterEEPROM2060;
	jmethodID mid_writeHyperAdapterEEPROM2061;
	jmethodID mid_calibrate2062;
	jmethodID mid_restoreCalibration2063;
	jmethodID mid_getCalibrationTime2064;
	jmethodID mid_getSHAChannel2065;
	jmethodID mid_getFeatureGUIClassnames2066;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBFEATURE_T
#define EXTERN_TYPEDEF_USBFEATURE_T
	typedef void* USBFEATURE_T;
#endif /* EXTERN_TYPEDEF_USBFEATURE_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETER_T
#define EXTERN_TYPEDEF_SPECTROMETER_T
	typedef void* SPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_SHACHANNEL_T
#define EXTERN_TYPEDEF_SHACHANNEL_T
	typedef void* SHACHANNEL_T;
#endif /* EXTERN_TYPEDEF_SHACHANNEL_T */
#ifndef EXTERN_TYPEDEF_JSTRINGARRAY_T
#define EXTERN_TYPEDEF_JSTRINGARRAY_T
	typedef void* JSTRINGARRAY_T;
#endif /* EXTERN_TYPEDEF_JSTRINGARRAY_T */
#ifndef EXTERN_TYPEDEF_SHAIMPL_T
#define EXTERN_TYPEDEF_SHAIMPL_T
	typedef void* SHAIMPL_T;
#endif /* EXTERN_TYPEDEF_SHAIMPL_T */

	// No public default Java constructor; creating one:
	EXPORTED SHAIMPL_T SHAImpl_Create();
	EXPORTED SHAIMPL_T SHAImpl_Create_1(USBINTERFACE_T usbInt, SPECTROMETER_T spectrometer);
	EXPORTED short SHAImpl_isHyperAdapterPresent(SHAIMPL_T c_shaimpl);
	EXPORTED void SHAImpl_initSHA(SHAIMPL_T c_shaimpl, SHACHANNEL_T channel);
	EXPORTED int SHAImpl_setHyperAdapterDAC(SHAIMPL_T c_shaimpl, double voltage);
	EXPORTED int SHAImpl_readHyperAdapterEEPROM(SHAIMPL_T c_shaimpl, CHARARRAY_T data, int start, int length);
	EXPORTED int SHAImpl_writeHyperAdapterEEPROM(SHAIMPL_T c_shaimpl, CHARARRAY_T data, int start, int length);
	EXPORTED void SHAImpl_calibrate(SHAIMPL_T c_shaimpl);
	EXPORTED void SHAImpl_restoreCalibration(SHAIMPL_T c_shaimpl);
	EXPORTED double SHAImpl_getCalibrationTime(SHAIMPL_T c_shaimpl);
	EXPORTED void SHAImpl_getSHAChannel(SHAIMPL_T c_shaimpl, SHACHANNEL_T retval);
	EXPORTED void SHAImpl_getFeatureGUIClassnames(SHAIMPL_T c_shaimpl, JSTRINGARRAY_T retval);
	EXPORTED void SHAImpl_Destroy(SHAIMPL_T shaimpl);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED SHAIMPL_T STDCALL SHAImpl_Create_stdcall_1(USBINTERFACE_T usbInt, SPECTROMETER_T spectrometer);
	EXPORTED short STDCALL SHAImpl_isHyperAdapterPresent_stdcall(SHAIMPL_T c_shaimpl);
	EXPORTED void STDCALL SHAImpl_initSHA_stdcall(SHAIMPL_T c_shaimpl, SHACHANNEL_T channel);
	EXPORTED int STDCALL SHAImpl_setHyperAdapterDAC_stdcall(SHAIMPL_T c_shaimpl, double voltage);
	EXPORTED int STDCALL SHAImpl_readHyperAdapterEEPROM_stdcall(SHAIMPL_T c_shaimpl, CHARARRAY_T data, int start, int length);
	EXPORTED int STDCALL SHAImpl_writeHyperAdapterEEPROM_stdcall(SHAIMPL_T c_shaimpl, CHARARRAY_T data, int start, int length);
	EXPORTED void STDCALL SHAImpl_calibrate_stdcall(SHAIMPL_T c_shaimpl);
	EXPORTED void STDCALL SHAImpl_restoreCalibration_stdcall(SHAIMPL_T c_shaimpl);
	EXPORTED double STDCALL SHAImpl_getCalibrationTime_stdcall(SHAIMPL_T c_shaimpl);
	EXPORTED void STDCALL SHAImpl_getSHAChannel_stdcall(SHAIMPL_T c_shaimpl, SHACHANNEL_T retval);
	EXPORTED void STDCALL SHAImpl_getFeatureGUIClassnames_stdcall(SHAIMPL_T c_shaimpl, JSTRINGARRAY_T retval);
	EXPORTED void STDCALL SHAImpl_Destroy_stdcall(SHAIMPL_T shaimpl);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* SHAIMPL_H */
