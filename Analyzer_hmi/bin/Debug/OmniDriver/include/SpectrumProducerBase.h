/**
 * File: SpectrumProducerBase.h
 * Autogenerated on Fri Mar 23 13:38:47 EDT 2018 based on
 * SpectrumProducerBase.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/SpectrumProducerBase
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef SPECTRUMPRODUCERBASE_H
#define SPECTRUMPRODUCERBASE_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "SpectrumListener.h"
#include "Spectrum.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class SpectrumListener;
class Spectrum;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED SpectrumProducerBase : public BaseJavaClass // CPPClass.tag001
{
public: 
	SpectrumProducerBase();
	SpectrumProducerBase(int numPixels, int numDarkPixels);
	void addSpectrumListener(SpectrumListener& listener);
	void removeSpectrumListener(SpectrumListener& listener);
	Spectrum getUnfilledSpectrum();
	Spectrum getUnfilledSpectrumRaw();
	Spectrum getUnfilledSpectrum(int pixels, int dark);
	int getNumberOfPixels();
	int getNumberOfRawPixels();
	int getNumberOfDarkPixels();
	~SpectrumProducerBase();
	// No public Java copy constructor; creating one:
	SpectrumProducerBase(const SpectrumProducerBase &that);
	// Creating assignment operator declaration:
	SpectrumProducerBase &operator=(const SpectrumProducerBase &that);

private:
	jmethodID mid_SpectrumProducerBase3040;
	jmethodID mid_SpectrumProducerBase3041;
	jmethodID mid_addSpectrumListener3042;
	jmethodID mid_removeSpectrumListener3043;
	jmethodID mid_getUnfilledSpectrum3044;
	jmethodID mid_getUnfilledSpectrumRaw3045;
	jmethodID mid_getUnfilledSpectrum3046;
	jmethodID mid_getNumberOfPixels3047;
	jmethodID mid_getNumberOfRawPixels3048;
	jmethodID mid_getNumberOfDarkPixels3049;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_SPECTRUMLISTENER_T
#define EXTERN_TYPEDEF_SPECTRUMLISTENER_T
	typedef void* SPECTRUMLISTENER_T;
#endif /* EXTERN_TYPEDEF_SPECTRUMLISTENER_T */
#ifndef EXTERN_TYPEDEF_SPECTRUM_T
#define EXTERN_TYPEDEF_SPECTRUM_T
	typedef void* SPECTRUM_T;
#endif /* EXTERN_TYPEDEF_SPECTRUM_T */
#ifndef EXTERN_TYPEDEF_SPECTRUMPRODUCERBASE_T
#define EXTERN_TYPEDEF_SPECTRUMPRODUCERBASE_T
	typedef void* SPECTRUMPRODUCERBASE_T;
#endif /* EXTERN_TYPEDEF_SPECTRUMPRODUCERBASE_T */

	EXPORTED SPECTRUMPRODUCERBASE_T SpectrumProducerBase_Create();
	EXPORTED SPECTRUMPRODUCERBASE_T SpectrumProducerBase_Create_1(int numPixels, int numDarkPixels);
	EXPORTED void SpectrumProducerBase_addSpectrumListener(SPECTRUMPRODUCERBASE_T c_spectrum_producer_base, SPECTRUMLISTENER_T listener);
	EXPORTED void SpectrumProducerBase_removeSpectrumListener(SPECTRUMPRODUCERBASE_T c_spectrum_producer_base, SPECTRUMLISTENER_T listener);
	EXPORTED void SpectrumProducerBase_getUnfilledSpectrum(SPECTRUMPRODUCERBASE_T c_spectrum_producer_base, SPECTRUM_T retval);
	EXPORTED void SpectrumProducerBase_getUnfilledSpectrumRaw(SPECTRUMPRODUCERBASE_T c_spectrum_producer_base, SPECTRUM_T retval);
	EXPORTED void SpectrumProducerBase_getUnfilledSpectrum_1(SPECTRUMPRODUCERBASE_T c_spectrum_producer_base, int pixels, int dark, SPECTRUM_T retval);
	EXPORTED int SpectrumProducerBase_getNumberOfPixels(SPECTRUMPRODUCERBASE_T c_spectrum_producer_base);
	EXPORTED int SpectrumProducerBase_getNumberOfRawPixels(SPECTRUMPRODUCERBASE_T c_spectrum_producer_base);
	EXPORTED int SpectrumProducerBase_getNumberOfDarkPixels(SPECTRUMPRODUCERBASE_T c_spectrum_producer_base);
	EXPORTED void SpectrumProducerBase_Destroy(SPECTRUMPRODUCERBASE_T spectrum_producer_base);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED SPECTRUMPRODUCERBASE_T STDCALL SpectrumProducerBase_Create_stdcall();
	EXPORTED SPECTRUMPRODUCERBASE_T STDCALL SpectrumProducerBase_Create_stdcall_1(int numPixels, int numDarkPixels);
	EXPORTED void STDCALL SpectrumProducerBase_addSpectrumListener_stdcall(SPECTRUMPRODUCERBASE_T c_spectrum_producer_base, SPECTRUMLISTENER_T listener);
	EXPORTED void STDCALL SpectrumProducerBase_removeSpectrumListener_stdcall(SPECTRUMPRODUCERBASE_T c_spectrum_producer_base, SPECTRUMLISTENER_T listener);
	EXPORTED void STDCALL SpectrumProducerBase_getUnfilledSpectrum_stdcall(SPECTRUMPRODUCERBASE_T c_spectrum_producer_base, SPECTRUM_T retval);
	EXPORTED void STDCALL SpectrumProducerBase_getUnfilledSpectrumRaw_stdcall(SPECTRUMPRODUCERBASE_T c_spectrum_producer_base, SPECTRUM_T retval);
	EXPORTED void STDCALL SpectrumProducerBase_getUnfilledSpectrum_stdcall_1(SPECTRUMPRODUCERBASE_T c_spectrum_producer_base, int pixels, int dark, SPECTRUM_T retval);
	EXPORTED int STDCALL SpectrumProducerBase_getNumberOfPixels_stdcall(SPECTRUMPRODUCERBASE_T c_spectrum_producer_base);
	EXPORTED int STDCALL SpectrumProducerBase_getNumberOfRawPixels_stdcall(SPECTRUMPRODUCERBASE_T c_spectrum_producer_base);
	EXPORTED int STDCALL SpectrumProducerBase_getNumberOfDarkPixels_stdcall(SPECTRUMPRODUCERBASE_T c_spectrum_producer_base);
	EXPORTED void STDCALL SpectrumProducerBase_Destroy_stdcall(SPECTRUMPRODUCERBASE_T spectrum_producer_base);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* SPECTRUMPRODUCERBASE_H */
