/**
 * File: Dragon.h
 * Autogenerated on Fri Mar 23 13:38:51 EDT 2018 based on
 * Dragon.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/dragon/Dragon
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef DRAGON_H
#define DRAGON_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBSpectrometer.h"
#include "USBEndpointDescriptor.h"
#include "SpectrometerChannelArray.h"
#include "GUIProviderArray.h"
#include "SpectrometerStatus.h"
#include "JString.h"
#include "CoefficientsArray.h"
#include "AcquisitionListener.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBSpectrometer;
class USBEndpointDescriptor;
class SpectrometerChannelArray;
class GUIProviderArray;
class SpectrometerStatus;
class JString;
class CoefficientsArray;
class AcquisitionListener;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED Dragon : public USBSpectrometer // CPPClass.tag001
{
public: 
	Dragon();
	Dragon(int i);
	int getNumberOfPixels();
	int getNumberOfRawPixels();
	int getNumberOfDarkPixels();
	void setEndpoints();
	USBEndpointDescriptor getEndpoint(int endPoint);
	void openSpectrometer(int index);
	SpectrometerChannelArray getChannels();
	GUIProviderArray getGUIFeatures();
	SpectrometerStatus getStatus();
	int readIntegrationTime();
	JString toString();
	int getActualIntegrationTime();
	CoefficientsArray readNonlinearityCoefficientsFromSpectrometer();
	void writeNonlinearityCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	CoefficientsArray getNonlinearityCoefficients();
	void setNonlinearityCoefficients(CoefficientsArray& coefficients);
	DoubleArray getNonlinearityCoefficientsSingleChannel(int index);
	void setNonlinearityCoefficientsSingleChannel(DoubleArray& nl, int index);
	CoefficientsArray readWavelengthCalibrationCoefficientsFromSpectrometer();
	void writeWavelengthCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	CoefficientsArray getWavelengthCalibrationCoefficients();
	void setWavelengthCalibrationCoefficients(CoefficientsArray& coefficients);
	DoubleArray getWavelengths(int index);
	void setWavelengths(DoubleArray& wl, int index);
	CoefficientsArray readStrayLightCorrectionCoefficientFromSpectrometer();
	void writeStrayLightCoefficientToSpectrometer(CoefficientsArray& coefficients);
	void setStrayLightCorrectionCoefficient(CoefficientsArray& coefficients);
	CoefficientsArray getStrayLightCorrectionCoefficient();
	void setStrayLight(double strayLight, int index);
	double getStrayLight(int index);
	short isAdvancedVersion();
	void addAcquisitionListener(AcquisitionListener& listener);
	void removeAcquisitionListener(AcquisitionListener& listener);
	~Dragon();
	// No public Java copy constructor; creating one:
	Dragon(const Dragon &that);
	// Creating assignment operator declaration:
	Dragon &operator=(const Dragon &that);
	int EEPROM_DELAY;

private:
	jmethodID mid_Dragon3289;
	jmethodID mid_Dragon3290;
	jmethodID mid_getNumberOfPixels3291;
	jmethodID mid_getNumberOfRawPixels3292;
	jmethodID mid_getNumberOfDarkPixels3293;
	jmethodID mid_setEndpoints3294;
	jmethodID mid_getEndpoint3295;
	jmethodID mid_openSpectrometer3296;
	jmethodID mid_getChannels3297;
	jmethodID mid_getGUIFeatures3298;
	jmethodID mid_getStatus3299;
	jmethodID mid_readIntegrationTime3300;
	jmethodID mid_toString3301;
	jmethodID mid_getActualIntegrationTime3302;
	jmethodID mid_readNonlinearityCoefficientsFromSpectrometer3303;
	jmethodID mid_writeNonlinearityCoefficientsToSpectrometer3304;
	jmethodID mid_getNonlinearityCoefficients3305;
	jmethodID mid_setNonlinearityCoefficients3306;
	jmethodID mid_getNonlinearityCoefficientsSingleChannel3307;
	jmethodID mid_setNonlinearityCoefficientsSingleChannel3308;
	jmethodID mid_readWavelengthCalibrationCoefficientsFromSpectrometer3309;
	jmethodID mid_writeWavelengthCoefficientsToSpectrometer3310;
	jmethodID mid_getWavelengthCalibrationCoefficients3311;
	jmethodID mid_setWavelengthCalibrationCoefficients3312;
	jmethodID mid_getWavelengths3313;
	jmethodID mid_setWavelengths3314;
	jmethodID mid_readStrayLightCorrectionCoefficientFromSpectrometer3315;
	jmethodID mid_writeStrayLightCoefficientToSpectrometer3316;
	jmethodID mid_setStrayLightCorrectionCoefficient3317;
	jmethodID mid_getStrayLightCorrectionCoefficient3318;
	jmethodID mid_setStrayLight3319;
	jmethodID mid_getStrayLight3320;
	jmethodID mid_isAdvancedVersion3321;
	jmethodID mid_addAcquisitionListener3322;
	jmethodID mid_removeAcquisitionListener3323;
	jfieldID fid_EEPROM_DELAY;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBSPECTROMETER_T
#define EXTERN_TYPEDEF_USBSPECTROMETER_T
	typedef void* USBSPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_USBSPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_USBENDPOINTDESCRIPTOR_T
#define EXTERN_TYPEDEF_USBENDPOINTDESCRIPTOR_T
	typedef void* USBENDPOINTDESCRIPTOR_T;
#endif /* EXTERN_TYPEDEF_USBENDPOINTDESCRIPTOR_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETERCHANNELARRAY_T
#define EXTERN_TYPEDEF_SPECTROMETERCHANNELARRAY_T
	typedef void* SPECTROMETERCHANNELARRAY_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERCHANNELARRAY_T */
#ifndef EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
#define EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
	typedef void* GUIPROVIDERARRAY_T;
#endif /* EXTERN_TYPEDEF_GUIPROVIDERARRAY_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETERSTATUS_T
#define EXTERN_TYPEDEF_SPECTROMETERSTATUS_T
	typedef void* SPECTROMETERSTATUS_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERSTATUS_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
#define EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
	typedef void* COEFFICIENTSARRAY_T;
#endif /* EXTERN_TYPEDEF_COEFFICIENTSARRAY_T */
#ifndef EXTERN_TYPEDEF_ACQUISITIONLISTENER_T
#define EXTERN_TYPEDEF_ACQUISITIONLISTENER_T
	typedef void* ACQUISITIONLISTENER_T;
#endif /* EXTERN_TYPEDEF_ACQUISITIONLISTENER_T */
#ifndef EXTERN_TYPEDEF_DRAGON_T
#define EXTERN_TYPEDEF_DRAGON_T
	typedef void* DRAGON_T;
#endif /* EXTERN_TYPEDEF_DRAGON_T */

	EXPORTED DRAGON_T Dragon_Create();
	EXPORTED DRAGON_T Dragon_Create_1(int i);
	EXPORTED int Dragon_getNumberOfPixels(DRAGON_T c_dragon);
	EXPORTED int Dragon_getNumberOfRawPixels(DRAGON_T c_dragon);
	EXPORTED int Dragon_getNumberOfDarkPixels(DRAGON_T c_dragon);
	EXPORTED void Dragon_setEndpoints(DRAGON_T c_dragon);
	EXPORTED void Dragon_getEndpoint(DRAGON_T c_dragon, int endPoint, USBENDPOINTDESCRIPTOR_T retval);
	EXPORTED void Dragon_openSpectrometer(DRAGON_T c_dragon, int index);
	EXPORTED void Dragon_getChannels(DRAGON_T c_dragon, SPECTROMETERCHANNELARRAY_T retval);
	EXPORTED void Dragon_getGUIFeatures(DRAGON_T c_dragon, GUIPROVIDERARRAY_T retval);
	EXPORTED void Dragon_getStatus(DRAGON_T c_dragon, SPECTROMETERSTATUS_T retval);
	EXPORTED int Dragon_readIntegrationTime(DRAGON_T c_dragon);
	EXPORTED void Dragon_toString(DRAGON_T c_dragon, JSTRING_T retval);
	EXPORTED int Dragon_getActualIntegrationTime(DRAGON_T c_dragon);
	EXPORTED void Dragon_readNonlinearityCoefficientsFromSpectrometer(DRAGON_T c_dragon, COEFFICIENTSARRAY_T retval);
	EXPORTED void Dragon_writeNonlinearityCoefficientsToSpectrometer(DRAGON_T c_dragon, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void Dragon_getNonlinearityCoefficients(DRAGON_T c_dragon, COEFFICIENTSARRAY_T retval);
	EXPORTED void Dragon_setNonlinearityCoefficients(DRAGON_T c_dragon, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void Dragon_getNonlinearityCoefficientsSingleChannel(DRAGON_T c_dragon, int index, DOUBLEARRAY_T retval);
	EXPORTED void Dragon_setNonlinearityCoefficientsSingleChannel(DRAGON_T c_dragon, DOUBLEARRAY_T nl, int index);
	EXPORTED void Dragon_readWavelengthCalibrationCoefficientsFromSpectrometer(DRAGON_T c_dragon, COEFFICIENTSARRAY_T retval);
	EXPORTED void Dragon_writeWavelengthCoefficientsToSpectrometer(DRAGON_T c_dragon, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void Dragon_getWavelengthCalibrationCoefficients(DRAGON_T c_dragon, COEFFICIENTSARRAY_T retval);
	EXPORTED void Dragon_setWavelengthCalibrationCoefficients(DRAGON_T c_dragon, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void Dragon_getWavelengths(DRAGON_T c_dragon, int index, DOUBLEARRAY_T retval);
	EXPORTED void Dragon_setWavelengths(DRAGON_T c_dragon, DOUBLEARRAY_T wl, int index);
	EXPORTED void Dragon_readStrayLightCorrectionCoefficientFromSpectrometer(DRAGON_T c_dragon, COEFFICIENTSARRAY_T retval);
	EXPORTED void Dragon_writeStrayLightCoefficientToSpectrometer(DRAGON_T c_dragon, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void Dragon_setStrayLightCorrectionCoefficient(DRAGON_T c_dragon, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void Dragon_getStrayLightCorrectionCoefficient(DRAGON_T c_dragon, COEFFICIENTSARRAY_T retval);
	EXPORTED void Dragon_setStrayLight(DRAGON_T c_dragon, double strayLight, int index);
	EXPORTED double Dragon_getStrayLight(DRAGON_T c_dragon, int index);
	EXPORTED short Dragon_isAdvancedVersion(DRAGON_T c_dragon);
	EXPORTED void Dragon_addAcquisitionListener(DRAGON_T c_dragon, ACQUISITIONLISTENER_T listener);
	EXPORTED void Dragon_removeAcquisitionListener(DRAGON_T c_dragon, ACQUISITIONLISTENER_T listener);
	EXPORTED void Dragon_Destroy(DRAGON_T dragon);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED DRAGON_T STDCALL Dragon_Create_stdcall();
	EXPORTED DRAGON_T STDCALL Dragon_Create_stdcall_1(int i);
	EXPORTED int STDCALL Dragon_getNumberOfPixels_stdcall(DRAGON_T c_dragon);
	EXPORTED int STDCALL Dragon_getNumberOfRawPixels_stdcall(DRAGON_T c_dragon);
	EXPORTED int STDCALL Dragon_getNumberOfDarkPixels_stdcall(DRAGON_T c_dragon);
	EXPORTED void STDCALL Dragon_setEndpoints_stdcall(DRAGON_T c_dragon);
	EXPORTED void STDCALL Dragon_getEndpoint_stdcall(DRAGON_T c_dragon, int endPoint, USBENDPOINTDESCRIPTOR_T retval);
	EXPORTED void STDCALL Dragon_openSpectrometer_stdcall(DRAGON_T c_dragon, int index);
	EXPORTED void STDCALL Dragon_getChannels_stdcall(DRAGON_T c_dragon, SPECTROMETERCHANNELARRAY_T retval);
	EXPORTED void STDCALL Dragon_getGUIFeatures_stdcall(DRAGON_T c_dragon, GUIPROVIDERARRAY_T retval);
	EXPORTED void STDCALL Dragon_getStatus_stdcall(DRAGON_T c_dragon, SPECTROMETERSTATUS_T retval);
	EXPORTED int STDCALL Dragon_readIntegrationTime_stdcall(DRAGON_T c_dragon);
	EXPORTED void STDCALL Dragon_toString_stdcall(DRAGON_T c_dragon, JSTRING_T retval);
	EXPORTED int STDCALL Dragon_getActualIntegrationTime_stdcall(DRAGON_T c_dragon);
	EXPORTED void STDCALL Dragon_readNonlinearityCoefficientsFromSpectrometer_stdcall(DRAGON_T c_dragon, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL Dragon_writeNonlinearityCoefficientsToSpectrometer_stdcall(DRAGON_T c_dragon, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL Dragon_getNonlinearityCoefficients_stdcall(DRAGON_T c_dragon, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL Dragon_setNonlinearityCoefficients_stdcall(DRAGON_T c_dragon, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL Dragon_getNonlinearityCoefficientsSingleChannel_stdcall(DRAGON_T c_dragon, int index, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL Dragon_setNonlinearityCoefficientsSingleChannel_stdcall(DRAGON_T c_dragon, DOUBLEARRAY_T nl, int index);
	EXPORTED void STDCALL Dragon_readWavelengthCalibrationCoefficientsFromSpectrometer_stdcall(DRAGON_T c_dragon, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL Dragon_writeWavelengthCoefficientsToSpectrometer_stdcall(DRAGON_T c_dragon, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL Dragon_getWavelengthCalibrationCoefficients_stdcall(DRAGON_T c_dragon, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL Dragon_setWavelengthCalibrationCoefficients_stdcall(DRAGON_T c_dragon, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL Dragon_getWavelengths_stdcall(DRAGON_T c_dragon, int index, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL Dragon_setWavelengths_stdcall(DRAGON_T c_dragon, DOUBLEARRAY_T wl, int index);
	EXPORTED void STDCALL Dragon_readStrayLightCorrectionCoefficientFromSpectrometer_stdcall(DRAGON_T c_dragon, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL Dragon_writeStrayLightCoefficientToSpectrometer_stdcall(DRAGON_T c_dragon, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL Dragon_setStrayLightCorrectionCoefficient_stdcall(DRAGON_T c_dragon, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL Dragon_getStrayLightCorrectionCoefficient_stdcall(DRAGON_T c_dragon, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL Dragon_setStrayLight_stdcall(DRAGON_T c_dragon, double strayLight, int index);
	EXPORTED double STDCALL Dragon_getStrayLight_stdcall(DRAGON_T c_dragon, int index);
	EXPORTED short STDCALL Dragon_isAdvancedVersion_stdcall(DRAGON_T c_dragon);
	EXPORTED void STDCALL Dragon_addAcquisitionListener_stdcall(DRAGON_T c_dragon, ACQUISITIONLISTENER_T listener);
	EXPORTED void STDCALL Dragon_removeAcquisitionListener_stdcall(DRAGON_T c_dragon, ACQUISITIONLISTENER_T listener);
	EXPORTED void STDCALL Dragon_Destroy_stdcall(DRAGON_T dragon);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* DRAGON_H */
