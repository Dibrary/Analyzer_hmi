/**
 * File: SingleStrobeImpl_FX.h
 * Autogenerated on Fri Mar 23 13:38:39 EDT 2018 based on
 * SingleStrobeImpl_FX.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/singlestrobe/SingleStrobeImpl_FX
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef SINGLESTROBEIMPL_FX_H
#define SINGLESTROBEIMPL_FX_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "SingleStrobeImpl.h"
#include "OceanBinaryProtocolProvider.h"
#include "USBInterface.h"
#include "JStringArray.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class SingleStrobeImpl;
class OceanBinaryProtocolProvider;
class USBInterface;
class JStringArray;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED SingleStrobeImpl_FX : public SingleStrobeImpl // CPPClass.tag001
{
public: 
	SingleStrobeImpl_FX(OceanBinaryProtocolProvider& bn, USBInterface& usbInt);
	int getSingleStrobeHigh();
	void setSingleStrobeHigh(int counts);
	int getSingleStrobeLow();
	void setSingleStrobeLow(int counts);
	int getSingleStrobeMinimum();
	int getSingleStrobeMaximum();
	int getSingleStrobeIncrement();
	double getSingleStrobeCountsToMicros(int counts);
	JStringArray getFeatureGUIClassnames();
	~SingleStrobeImpl_FX();
	// No public default Java constructor; creating one:
	SingleStrobeImpl_FX();
	// No public Java copy constructor; creating one:
	SingleStrobeImpl_FX(const SingleStrobeImpl_FX &that);
	// Creating assignment operator declaration:
	SingleStrobeImpl_FX &operator=(const SingleStrobeImpl_FX &that);

private:
	jmethodID mid_SingleStrobeImpl_FX2014;
	jmethodID mid_getSingleStrobeHigh2015;
	jmethodID mid_setSingleStrobeHigh2016;
	jmethodID mid_getSingleStrobeLow2017;
	jmethodID mid_setSingleStrobeLow2018;
	jmethodID mid_getSingleStrobeMinimum2019;
	jmethodID mid_getSingleStrobeMaximum2020;
	jmethodID mid_getSingleStrobeIncrement2021;
	jmethodID mid_getSingleStrobeCountsToMicros2022;
	jmethodID mid_getFeatureGUIClassnames2023;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_SINGLESTROBEIMPL_T
#define EXTERN_TYPEDEF_SINGLESTROBEIMPL_T
	typedef void* SINGLESTROBEIMPL_T;
#endif /* EXTERN_TYPEDEF_SINGLESTROBEIMPL_T */
#ifndef EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T
#define EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T
	typedef void* OCEANBINARYPROTOCOLPROVIDER_T;
#endif /* EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_JSTRINGARRAY_T
#define EXTERN_TYPEDEF_JSTRINGARRAY_T
	typedef void* JSTRINGARRAY_T;
#endif /* EXTERN_TYPEDEF_JSTRINGARRAY_T */
#ifndef EXTERN_TYPEDEF_SINGLESTROBEIMPL_FX_T
#define EXTERN_TYPEDEF_SINGLESTROBEIMPL_FX_T
	typedef void* SINGLESTROBEIMPL_FX_T;
#endif /* EXTERN_TYPEDEF_SINGLESTROBEIMPL_FX_T */

	// No public default Java constructor; creating one:
	EXPORTED SINGLESTROBEIMPL_FX_T SingleStrobeImpl_FX_Create();
	EXPORTED SINGLESTROBEIMPL_FX_T SingleStrobeImpl_FX_Create_1(OCEANBINARYPROTOCOLPROVIDER_T bn, USBINTERFACE_T usbInt);
	EXPORTED int SingleStrobeImpl_FX_getSingleStrobeHigh(SINGLESTROBEIMPL_FX_T c_single_strobe_impl_f_x);
	EXPORTED void SingleStrobeImpl_FX_setSingleStrobeHigh(SINGLESTROBEIMPL_FX_T c_single_strobe_impl_f_x, int counts);
	EXPORTED int SingleStrobeImpl_FX_getSingleStrobeLow(SINGLESTROBEIMPL_FX_T c_single_strobe_impl_f_x);
	EXPORTED void SingleStrobeImpl_FX_setSingleStrobeLow(SINGLESTROBEIMPL_FX_T c_single_strobe_impl_f_x, int counts);
	EXPORTED int SingleStrobeImpl_FX_getSingleStrobeMinimum(SINGLESTROBEIMPL_FX_T c_single_strobe_impl_f_x);
	EXPORTED int SingleStrobeImpl_FX_getSingleStrobeMaximum(SINGLESTROBEIMPL_FX_T c_single_strobe_impl_f_x);
	EXPORTED int SingleStrobeImpl_FX_getSingleStrobeIncrement(SINGLESTROBEIMPL_FX_T c_single_strobe_impl_f_x);
	EXPORTED double SingleStrobeImpl_FX_getSingleStrobeCountsToMicros(SINGLESTROBEIMPL_FX_T c_single_strobe_impl_f_x, int counts);
	EXPORTED void SingleStrobeImpl_FX_getFeatureGUIClassnames(SINGLESTROBEIMPL_FX_T c_single_strobe_impl_f_x, JSTRINGARRAY_T retval);
	EXPORTED void SingleStrobeImpl_FX_Destroy(SINGLESTROBEIMPL_FX_T single_strobe_impl_f_x);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED SINGLESTROBEIMPL_FX_T STDCALL SingleStrobeImpl_FX_Create_stdcall_1(OCEANBINARYPROTOCOLPROVIDER_T bn, USBINTERFACE_T usbInt);
	EXPORTED int STDCALL SingleStrobeImpl_FX_getSingleStrobeHigh_stdcall(SINGLESTROBEIMPL_FX_T c_single_strobe_impl_f_x);
	EXPORTED void STDCALL SingleStrobeImpl_FX_setSingleStrobeHigh_stdcall(SINGLESTROBEIMPL_FX_T c_single_strobe_impl_f_x, int counts);
	EXPORTED int STDCALL SingleStrobeImpl_FX_getSingleStrobeLow_stdcall(SINGLESTROBEIMPL_FX_T c_single_strobe_impl_f_x);
	EXPORTED void STDCALL SingleStrobeImpl_FX_setSingleStrobeLow_stdcall(SINGLESTROBEIMPL_FX_T c_single_strobe_impl_f_x, int counts);
	EXPORTED int STDCALL SingleStrobeImpl_FX_getSingleStrobeMinimum_stdcall(SINGLESTROBEIMPL_FX_T c_single_strobe_impl_f_x);
	EXPORTED int STDCALL SingleStrobeImpl_FX_getSingleStrobeMaximum_stdcall(SINGLESTROBEIMPL_FX_T c_single_strobe_impl_f_x);
	EXPORTED int STDCALL SingleStrobeImpl_FX_getSingleStrobeIncrement_stdcall(SINGLESTROBEIMPL_FX_T c_single_strobe_impl_f_x);
	EXPORTED double STDCALL SingleStrobeImpl_FX_getSingleStrobeCountsToMicros_stdcall(SINGLESTROBEIMPL_FX_T c_single_strobe_impl_f_x, int counts);
	EXPORTED void STDCALL SingleStrobeImpl_FX_getFeatureGUIClassnames_stdcall(SINGLESTROBEIMPL_FX_T c_single_strobe_impl_f_x, JSTRINGARRAY_T retval);
	EXPORTED void STDCALL SingleStrobeImpl_FX_Destroy_stdcall(SINGLESTROBEIMPL_FX_T single_strobe_impl_f_x);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* SINGLESTROBEIMPL_FX_H */
