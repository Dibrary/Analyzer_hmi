/**
 * File: Node.h
 * Autogenerated on Fri Mar 23 13:38:22 EDT 2018 based on
 * Node.java
 * for the Java class
 * com/oceanoptics/omnidriver/accessories/mikropack/commands/Node
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef NODE_H
#define NODE_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class Node;
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED Node : public BaseJavaClass // CPPClass.tag001
{
public: 
	JString getDesc();
	Node();
	int getIndex();
	void setIndex(int node);
	Node XAXIS();
	Node YAXIS();
	Node ZAXIS();
	Node SINGLE();
	Node ALL();
	JString toString();
	~Node();
	// No public Java copy constructor; creating one:
	Node(const Node &that);
	// Creating assignment operator declaration:
	Node &operator=(const Node &that);
	int AXIS_SINGLE;
	int AXIS_X;
	int AXIS_Y;
	int AXIS_Z;
	int AXIS_ALL;

private:
	jmethodID mid_Node22;
	jmethodID mid_getDesc23;
	jmethodID mid_Node24;
	jmethodID mid_getIndex25;
	jmethodID mid_setIndex26;
	jmethodID mid_XAXIS27;
	jmethodID mid_YAXIS28;
	jmethodID mid_ZAXIS29;
	jmethodID mid_SINGLE30;
	jmethodID mid_ALL31;
	jmethodID mid_toString32;
	jfieldID fid_AXIS_SINGLE;
	jfieldID fid_AXIS_X;
	jfieldID fid_AXIS_Y;
	jfieldID fid_AXIS_Z;
	jfieldID fid_AXIS_ALL;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_NODE_T
#define EXTERN_TYPEDEF_NODE_T
	typedef void* NODE_T;
#endif /* EXTERN_TYPEDEF_NODE_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */

	EXPORTED NODE_T Node_Create(NODE_T n);
	EXPORTED void Node_getDesc(NODE_T c_node, JSTRING_T retval);
	EXPORTED NODE_T Node_Create_1();
	EXPORTED int Node_getIndex(NODE_T c_node);
	EXPORTED void Node_setIndex(NODE_T c_node, int node);
	EXPORTED void Node_XAXIS(NODE_T c_node, NODE_T retval);
	EXPORTED void Node_YAXIS(NODE_T c_node, NODE_T retval);
	EXPORTED void Node_ZAXIS(NODE_T c_node, NODE_T retval);
	EXPORTED void Node_SINGLE(NODE_T c_node, NODE_T retval);
	EXPORTED void Node_ALL(NODE_T c_node, NODE_T retval);
	EXPORTED void Node_toString(NODE_T c_node, JSTRING_T retval);
	EXPORTED void Node_Destroy(NODE_T node);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED NODE_T STDCALL Node_Create_stdcall(NODE_T n);
	EXPORTED void STDCALL Node_getDesc_stdcall(NODE_T c_node, JSTRING_T retval);
	EXPORTED NODE_T STDCALL Node_Create_stdcall_1();
	EXPORTED int STDCALL Node_getIndex_stdcall(NODE_T c_node);
	EXPORTED void STDCALL Node_setIndex_stdcall(NODE_T c_node, int node);
	EXPORTED void STDCALL Node_XAXIS_stdcall(NODE_T c_node, NODE_T retval);
	EXPORTED void STDCALL Node_YAXIS_stdcall(NODE_T c_node, NODE_T retval);
	EXPORTED void STDCALL Node_ZAXIS_stdcall(NODE_T c_node, NODE_T retval);
	EXPORTED void STDCALL Node_SINGLE_stdcall(NODE_T c_node, NODE_T retval);
	EXPORTED void STDCALL Node_ALL_stdcall(NODE_T c_node, NODE_T retval);
	EXPORTED void STDCALL Node_toString_stdcall(NODE_T c_node, JSTRING_T retval);
	EXPORTED void STDCALL Node_Destroy_stdcall(NODE_T node);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* NODE_H */
