/**
 * File: Configuration.h
 * Autogenerated on Fri Mar 23 13:38:46 EDT 2018 based on
 * Configuration.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/Configuration
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef CONFIGURATION_H
#define CONFIGURATION_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "Spectrometer.h"
#include "Bench.h"
#include "Detector.h"
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class Spectrometer;
class Bench;
class Detector;
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED Configuration : public BaseJavaClass // CPPClass.tag001
{
public: 
	Configuration(Spectrometer& spec);
	void getConfigurationFromSpectrometer();
	void setConfigurationToSpectrometer();
	Bench getBench();
	void setBench(Bench& value);
	Detector getDetector();
	void setDetector(Detector& value);
	JString getCpldVersion();
	void setCpldVersion(JString& value);
	short isBenchDefined();
	short isSpectrometerConfigurationDefined();
	short isDetectorSerialNumberDefined();
	short isCPLDVersionDefined();
	JString toString();
	~Configuration();
	// No public default Java constructor; creating one:
	Configuration();
	// No public Java copy constructor; creating one:
	Configuration(const Configuration &that);
	// Creating assignment operator declaration:
	Configuration &operator=(const Configuration &that);

private:
	jmethodID mid_Configuration2875;
	jmethodID mid_getConfigurationFromSpectrometer2876;
	jmethodID mid_setConfigurationToSpectrometer2877;
	jmethodID mid_getBench2878;
	jmethodID mid_setBench2879;
	jmethodID mid_getDetector2880;
	jmethodID mid_setDetector2881;
	jmethodID mid_getCpldVersion2882;
	jmethodID mid_setCpldVersion2883;
	jmethodID mid_isBenchDefined2884;
	jmethodID mid_isSpectrometerConfigurationDefined2885;
	jmethodID mid_isDetectorSerialNumberDefined2886;
	jmethodID mid_isCPLDVersionDefined2887;
	jmethodID mid_toString2888;
	jfieldID fid_spectrometer;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_SPECTROMETER_T
#define EXTERN_TYPEDEF_SPECTROMETER_T
	typedef void* SPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_BENCH_T
#define EXTERN_TYPEDEF_BENCH_T
	typedef void* BENCH_T;
#endif /* EXTERN_TYPEDEF_BENCH_T */
#ifndef EXTERN_TYPEDEF_DETECTOR_T
#define EXTERN_TYPEDEF_DETECTOR_T
	typedef void* DETECTOR_T;
#endif /* EXTERN_TYPEDEF_DETECTOR_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_CONFIGURATION_T
#define EXTERN_TYPEDEF_CONFIGURATION_T
	typedef void* CONFIGURATION_T;
#endif /* EXTERN_TYPEDEF_CONFIGURATION_T */

	// No public default Java constructor; creating one:
	EXPORTED CONFIGURATION_T Configuration_Create();
	EXPORTED CONFIGURATION_T Configuration_Create_1(SPECTROMETER_T spec);
	EXPORTED void Configuration_getConfigurationFromSpectrometer(CONFIGURATION_T c_configuration);
	EXPORTED void Configuration_setConfigurationToSpectrometer(CONFIGURATION_T c_configuration);
	EXPORTED void Configuration_getBench(CONFIGURATION_T c_configuration, BENCH_T retval);
	EXPORTED void Configuration_setBench(CONFIGURATION_T c_configuration, BENCH_T value);
	EXPORTED void Configuration_getDetector(CONFIGURATION_T c_configuration, DETECTOR_T retval);
	EXPORTED void Configuration_setDetector(CONFIGURATION_T c_configuration, DETECTOR_T value);
	EXPORTED void Configuration_getCpldVersion(CONFIGURATION_T c_configuration, JSTRING_T retval);
	EXPORTED void Configuration_setCpldVersion(CONFIGURATION_T c_configuration, JSTRING_T value);
	EXPORTED short Configuration_isBenchDefined(CONFIGURATION_T c_configuration);
	EXPORTED short Configuration_isSpectrometerConfigurationDefined(CONFIGURATION_T c_configuration);
	EXPORTED short Configuration_isDetectorSerialNumberDefined(CONFIGURATION_T c_configuration);
	EXPORTED short Configuration_isCPLDVersionDefined(CONFIGURATION_T c_configuration);
	EXPORTED void Configuration_toString(CONFIGURATION_T c_configuration, JSTRING_T retval);
	EXPORTED void Configuration_Destroy(CONFIGURATION_T configuration);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED CONFIGURATION_T STDCALL Configuration_Create_stdcall_1(SPECTROMETER_T spec);
	EXPORTED void STDCALL Configuration_getConfigurationFromSpectrometer_stdcall(CONFIGURATION_T c_configuration);
	EXPORTED void STDCALL Configuration_setConfigurationToSpectrometer_stdcall(CONFIGURATION_T c_configuration);
	EXPORTED void STDCALL Configuration_getBench_stdcall(CONFIGURATION_T c_configuration, BENCH_T retval);
	EXPORTED void STDCALL Configuration_setBench_stdcall(CONFIGURATION_T c_configuration, BENCH_T value);
	EXPORTED void STDCALL Configuration_getDetector_stdcall(CONFIGURATION_T c_configuration, DETECTOR_T retval);
	EXPORTED void STDCALL Configuration_setDetector_stdcall(CONFIGURATION_T c_configuration, DETECTOR_T value);
	EXPORTED void STDCALL Configuration_getCpldVersion_stdcall(CONFIGURATION_T c_configuration, JSTRING_T retval);
	EXPORTED void STDCALL Configuration_setCpldVersion_stdcall(CONFIGURATION_T c_configuration, JSTRING_T value);
	EXPORTED short STDCALL Configuration_isBenchDefined_stdcall(CONFIGURATION_T c_configuration);
	EXPORTED short STDCALL Configuration_isSpectrometerConfigurationDefined_stdcall(CONFIGURATION_T c_configuration);
	EXPORTED short STDCALL Configuration_isDetectorSerialNumberDefined_stdcall(CONFIGURATION_T c_configuration);
	EXPORTED short STDCALL Configuration_isCPLDVersionDefined_stdcall(CONFIGURATION_T c_configuration);
	EXPORTED void STDCALL Configuration_toString_stdcall(CONFIGURATION_T c_configuration, JSTRING_T retval);
	EXPORTED void STDCALL Configuration_Destroy_stdcall(CONFIGURATION_T configuration);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* CONFIGURATION_H */
