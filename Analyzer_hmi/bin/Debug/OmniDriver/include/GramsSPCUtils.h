/**
 * File: GramsSPCUtils.h
 * Autogenerated on Fri Mar 23 13:38:43 EDT 2018 based on
 * GramsSPCUtils.java
 * for the Java class
 * com/oceanoptics/omnidriver/gramsspc/GramsSPCUtils
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef GRAMSSPCUTILS_H
#define GRAMSSPCUTILS_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED GramsSPCUtils : public BaseJavaClass // CPPClass.tag001
{
public: 
	int decodeInteger32(CharArray& data, signed char version);
	CharArray encodeInteger32(int i, signed char version);
	short decodeInteger16(CharArray& data, signed char version);
	CharArray encodeInteger16(short s, signed char version);
	double decodeDouble64(CharArray& data, signed char version);
	CharArray encodeDouble64(double d, signed char version);
	float decodeFloat32(CharArray& data, signed char version);
	CharArray encodeFloat32(float f, signed char version);
	JString decodeString(CharArray& data);
	CharArray encodeString(JString& string, int maxLength);
	CharArray encodeString(JString& string);
	int addToStream(CharArray& source, CharArray& target, int offset);
	CharArray encodeDataArray(DoubleArray& array, signed char version);
	~GramsSPCUtils();
	// No public default Java constructor; creating one:
	GramsSPCUtils();
	// No public Java copy constructor; creating one:
	GramsSPCUtils(const GramsSPCUtils &that);
	// Creating assignment operator declaration:
	GramsSPCUtils &operator=(const GramsSPCUtils &that);

private:
	jmethodID mid_decodeInteger322475;
	jmethodID mid_encodeInteger322476;
	jmethodID mid_decodeInteger162477;
	jmethodID mid_encodeInteger162478;
	jmethodID mid_decodeDouble642479;
	jmethodID mid_encodeDouble642480;
	jmethodID mid_decodeFloat322481;
	jmethodID mid_encodeFloat322482;
	jmethodID mid_decodeString2483;
	jmethodID mid_encodeString2484;
	jmethodID mid_encodeString2485;
	jmethodID mid_addToStream2486;
	jmethodID mid_encodeDataArray2487;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_GRAMSSPCUTILS_T
#define EXTERN_TYPEDEF_GRAMSSPCUTILS_T
	typedef void* GRAMSSPCUTILS_T;
#endif /* EXTERN_TYPEDEF_GRAMSSPCUTILS_T */

	// No public default Java constructor; creating one:
	EXPORTED GRAMSSPCUTILS_T GramsSPCUtils_Create();
	EXPORTED int GramsSPCUtils_decodeInteger32(GRAMSSPCUTILS_T c_grams_s_p_c_utils, CHARARRAY_T data, signed char version);
	EXPORTED void GramsSPCUtils_encodeInteger32(GRAMSSPCUTILS_T c_grams_s_p_c_utils, int i, signed char version, CHARARRAY_T retval);
	EXPORTED short GramsSPCUtils_decodeInteger16(GRAMSSPCUTILS_T c_grams_s_p_c_utils, CHARARRAY_T data, signed char version);
	EXPORTED void GramsSPCUtils_encodeInteger16(GRAMSSPCUTILS_T c_grams_s_p_c_utils, short s, signed char version, CHARARRAY_T retval);
	EXPORTED double GramsSPCUtils_decodeDouble64(GRAMSSPCUTILS_T c_grams_s_p_c_utils, CHARARRAY_T data, signed char version);
	EXPORTED void GramsSPCUtils_encodeDouble64(GRAMSSPCUTILS_T c_grams_s_p_c_utils, double d, signed char version, CHARARRAY_T retval);
	EXPORTED float GramsSPCUtils_decodeFloat32(GRAMSSPCUTILS_T c_grams_s_p_c_utils, CHARARRAY_T data, signed char version);
	EXPORTED void GramsSPCUtils_encodeFloat32(GRAMSSPCUTILS_T c_grams_s_p_c_utils, float f, signed char version, CHARARRAY_T retval);
	EXPORTED void GramsSPCUtils_decodeString(GRAMSSPCUTILS_T c_grams_s_p_c_utils, CHARARRAY_T data, JSTRING_T retval);
	EXPORTED void GramsSPCUtils_encodeString(GRAMSSPCUTILS_T c_grams_s_p_c_utils, JSTRING_T string, int maxLength, CHARARRAY_T retval);
	EXPORTED void GramsSPCUtils_encodeString_1(GRAMSSPCUTILS_T c_grams_s_p_c_utils, JSTRING_T string, CHARARRAY_T retval);
	EXPORTED int GramsSPCUtils_addToStream(GRAMSSPCUTILS_T c_grams_s_p_c_utils, CHARARRAY_T source, CHARARRAY_T target, int offset);
	EXPORTED void GramsSPCUtils_encodeDataArray(GRAMSSPCUTILS_T c_grams_s_p_c_utils, DOUBLEARRAY_T array, signed char version, CHARARRAY_T retval);
	EXPORTED void GramsSPCUtils_Destroy(GRAMSSPCUTILS_T grams_s_p_c_utils);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED int STDCALL GramsSPCUtils_decodeInteger32_stdcall(GRAMSSPCUTILS_T c_grams_s_p_c_utils, CHARARRAY_T data, signed char version);
	EXPORTED void STDCALL GramsSPCUtils_encodeInteger32_stdcall(GRAMSSPCUTILS_T c_grams_s_p_c_utils, int i, signed char version, CHARARRAY_T retval);
	EXPORTED short STDCALL GramsSPCUtils_decodeInteger16_stdcall(GRAMSSPCUTILS_T c_grams_s_p_c_utils, CHARARRAY_T data, signed char version);
	EXPORTED void STDCALL GramsSPCUtils_encodeInteger16_stdcall(GRAMSSPCUTILS_T c_grams_s_p_c_utils, short s, signed char version, CHARARRAY_T retval);
	EXPORTED double STDCALL GramsSPCUtils_decodeDouble64_stdcall(GRAMSSPCUTILS_T c_grams_s_p_c_utils, CHARARRAY_T data, signed char version);
	EXPORTED void STDCALL GramsSPCUtils_encodeDouble64_stdcall(GRAMSSPCUTILS_T c_grams_s_p_c_utils, double d, signed char version, CHARARRAY_T retval);
	EXPORTED float STDCALL GramsSPCUtils_decodeFloat32_stdcall(GRAMSSPCUTILS_T c_grams_s_p_c_utils, CHARARRAY_T data, signed char version);
	EXPORTED void STDCALL GramsSPCUtils_encodeFloat32_stdcall(GRAMSSPCUTILS_T c_grams_s_p_c_utils, float f, signed char version, CHARARRAY_T retval);
	EXPORTED void STDCALL GramsSPCUtils_decodeString_stdcall(GRAMSSPCUTILS_T c_grams_s_p_c_utils, CHARARRAY_T data, JSTRING_T retval);
	EXPORTED void STDCALL GramsSPCUtils_encodeString_stdcall(GRAMSSPCUTILS_T c_grams_s_p_c_utils, JSTRING_T string, int maxLength, CHARARRAY_T retval);
	EXPORTED void STDCALL GramsSPCUtils_encodeString_stdcall_1(GRAMSSPCUTILS_T c_grams_s_p_c_utils, JSTRING_T string, CHARARRAY_T retval);
	EXPORTED int STDCALL GramsSPCUtils_addToStream_stdcall(GRAMSSPCUTILS_T c_grams_s_p_c_utils, CHARARRAY_T source, CHARARRAY_T target, int offset);
	EXPORTED void STDCALL GramsSPCUtils_encodeDataArray_stdcall(GRAMSSPCUTILS_T c_grams_s_p_c_utils, DOUBLEARRAY_T array, signed char version, CHARARRAY_T retval);
	EXPORTED void STDCALL GramsSPCUtils_Destroy_stdcall(GRAMSSPCUTILS_T grams_s_p_c_utils);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* GRAMSSPCUTILS_H */
