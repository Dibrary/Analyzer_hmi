/**
 * File: NetworkConfigureImpl_FX.h
 * Autogenerated on Mon Mar 13 20:24:01 EDT 2017 based on
 * NetworkConfigureImpl_FX.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/networkconfigure/NetworkConfigureImpl_FX
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef NETWORKCONFIGUREIMPL_FX_H
#define NETWORKCONFIGUREIMPL_FX_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "NetworkConfigureImpl.h"
#include "OceanBinaryProtocolProvider.h"
#include "USBInterface.h"
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class NetworkConfigureImpl;
class OceanBinaryProtocolProvider;
class USBInterface;
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED NetworkConfigureImpl_FX : public NetworkConfigureImpl // CPPClass.tag001
{
public: 
	NetworkConfigureImpl_FX(OceanBinaryProtocolProvider& bn, USBInterface& usbInt);
	void writeMACAddress(int iface, JString& address);
	JString readMACAddress(int iface);
	short runSelfTest(int iface);
	~NetworkConfigureImpl_FX();
	// No public default Java constructor; creating one:
	NetworkConfigureImpl_FX();
	// No public Java copy constructor; creating one:
	NetworkConfigureImpl_FX(const NetworkConfigureImpl_FX &that);
	// Creating assignment operator declaration:
	NetworkConfigureImpl_FX &operator=(const NetworkConfigureImpl_FX &that);

private:
	jmethodID mid_NetworkConfigureImpl_FX1724;
	jmethodID mid_writeMACAddress1725;
	jmethodID mid_readMACAddress1726;
	jmethodID mid_runSelfTest1727;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_NETWORKCONFIGUREIMPL_T
#define EXTERN_TYPEDEF_NETWORKCONFIGUREIMPL_T
	typedef void* NETWORKCONFIGUREIMPL_T;
#endif /* EXTERN_TYPEDEF_NETWORKCONFIGUREIMPL_T */
#ifndef EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T
#define EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T
	typedef void* OCEANBINARYPROTOCOLPROVIDER_T;
#endif /* EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_NETWORKCONFIGUREIMPL_FX_T
#define EXTERN_TYPEDEF_NETWORKCONFIGUREIMPL_FX_T
	typedef void* NETWORKCONFIGUREIMPL_FX_T;
#endif /* EXTERN_TYPEDEF_NETWORKCONFIGUREIMPL_FX_T */

	// No public default Java constructor; creating one:
	EXPORTED NETWORKCONFIGUREIMPL_FX_T NetworkConfigureImpl_FX_Create();
	EXPORTED NETWORKCONFIGUREIMPL_FX_T NetworkConfigureImpl_FX_Create_1(OCEANBINARYPROTOCOLPROVIDER_T bn, USBINTERFACE_T usbInt);
	EXPORTED void NetworkConfigureImpl_FX_writeMACAddress(NETWORKCONFIGUREIMPL_FX_T c_network_configure_impl_f_x, int iface, JSTRING_T address);
	EXPORTED void NetworkConfigureImpl_FX_readMACAddress(NETWORKCONFIGUREIMPL_FX_T c_network_configure_impl_f_x, int iface, JSTRING_T retval);
	EXPORTED short NetworkConfigureImpl_FX_runSelfTest(NETWORKCONFIGUREIMPL_FX_T c_network_configure_impl_f_x, int iface);
	EXPORTED void NetworkConfigureImpl_FX_Destroy(NETWORKCONFIGUREIMPL_FX_T network_configure_impl_f_x);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED NETWORKCONFIGUREIMPL_FX_T STDCALL NetworkConfigureImpl_FX_Create_stdcall_1(OCEANBINARYPROTOCOLPROVIDER_T bn, USBINTERFACE_T usbInt);
	EXPORTED void STDCALL NetworkConfigureImpl_FX_writeMACAddress_stdcall(NETWORKCONFIGUREIMPL_FX_T c_network_configure_impl_f_x, int iface, JSTRING_T address);
	EXPORTED void STDCALL NetworkConfigureImpl_FX_readMACAddress_stdcall(NETWORKCONFIGUREIMPL_FX_T c_network_configure_impl_f_x, int iface, JSTRING_T retval);
	EXPORTED short STDCALL NetworkConfigureImpl_FX_runSelfTest_stdcall(NETWORKCONFIGUREIMPL_FX_T c_network_configure_impl_f_x, int iface);
	EXPORTED void STDCALL NetworkConfigureImpl_FX_Destroy_stdcall(NETWORKCONFIGUREIMPL_FX_T network_configure_impl_f_x);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* NETWORKCONFIGUREIMPL_FX_H */
