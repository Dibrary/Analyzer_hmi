/**
 * File: QEProConfiguration.h
 * Autogenerated on Fri Mar 23 13:39:04 EDT 2018 based on
 * QEProConfiguration.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/qepro/QEProConfiguration
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef QEPROCONFIGURATION_H
#define QEPROCONFIGURATION_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "Configuration.h"
#include "Spectrometer.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class Configuration;
class Spectrometer;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED QEProConfiguration : public Configuration // CPPClass.tag001
{
public: 
	QEProConfiguration(Spectrometer& spec);
	void getConfigurationFromSpectrometer();
	void setConfigurationToSpectrometer();
	short isBenchDefined();
	short isCPLDVersionDefined();
	short isDetectorSerialNumberDefined();
	short isSpectrometerConfigurationDefined();
	~QEProConfiguration();
	// No public default Java constructor; creating one:
	QEProConfiguration();
	// No public Java copy constructor; creating one:
	QEProConfiguration(const QEProConfiguration &that);
	// Creating assignment operator declaration:
	QEProConfiguration &operator=(const QEProConfiguration &that);

private:
	jmethodID mid_QEProConfiguration5324;
	jmethodID mid_getConfigurationFromSpectrometer5325;
	jmethodID mid_setConfigurationToSpectrometer5326;
	jmethodID mid_isBenchDefined5327;
	jmethodID mid_isCPLDVersionDefined5328;
	jmethodID mid_isDetectorSerialNumberDefined5329;
	jmethodID mid_isSpectrometerConfigurationDefined5330;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_CONFIGURATION_T
#define EXTERN_TYPEDEF_CONFIGURATION_T
	typedef void* CONFIGURATION_T;
#endif /* EXTERN_TYPEDEF_CONFIGURATION_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETER_T
#define EXTERN_TYPEDEF_SPECTROMETER_T
	typedef void* SPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_QEPROCONFIGURATION_T
#define EXTERN_TYPEDEF_QEPROCONFIGURATION_T
	typedef void* QEPROCONFIGURATION_T;
#endif /* EXTERN_TYPEDEF_QEPROCONFIGURATION_T */

	// No public default Java constructor; creating one:
	EXPORTED QEPROCONFIGURATION_T QEProConfiguration_Create();
	EXPORTED QEPROCONFIGURATION_T QEProConfiguration_Create_1(SPECTROMETER_T spec);
	EXPORTED void QEProConfiguration_getConfigurationFromSpectrometer(QEPROCONFIGURATION_T c_qeproconfiguration);
	EXPORTED void QEProConfiguration_setConfigurationToSpectrometer(QEPROCONFIGURATION_T c_qeproconfiguration);
	EXPORTED short QEProConfiguration_isBenchDefined(QEPROCONFIGURATION_T c_qeproconfiguration);
	EXPORTED short QEProConfiguration_isCPLDVersionDefined(QEPROCONFIGURATION_T c_qeproconfiguration);
	EXPORTED short QEProConfiguration_isDetectorSerialNumberDefined(QEPROCONFIGURATION_T c_qeproconfiguration);
	EXPORTED short QEProConfiguration_isSpectrometerConfigurationDefined(QEPROCONFIGURATION_T c_qeproconfiguration);
	EXPORTED void QEProConfiguration_Destroy(QEPROCONFIGURATION_T qeproconfiguration);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED QEPROCONFIGURATION_T STDCALL QEProConfiguration_Create_stdcall_1(SPECTROMETER_T spec);
	EXPORTED void STDCALL QEProConfiguration_getConfigurationFromSpectrometer_stdcall(QEPROCONFIGURATION_T c_qeproconfiguration);
	EXPORTED void STDCALL QEProConfiguration_setConfigurationToSpectrometer_stdcall(QEPROCONFIGURATION_T c_qeproconfiguration);
	EXPORTED short STDCALL QEProConfiguration_isBenchDefined_stdcall(QEPROCONFIGURATION_T c_qeproconfiguration);
	EXPORTED short STDCALL QEProConfiguration_isCPLDVersionDefined_stdcall(QEPROCONFIGURATION_T c_qeproconfiguration);
	EXPORTED short STDCALL QEProConfiguration_isDetectorSerialNumberDefined_stdcall(QEPROCONFIGURATION_T c_qeproconfiguration);
	EXPORTED short STDCALL QEProConfiguration_isSpectrometerConfigurationDefined_stdcall(QEPROCONFIGURATION_T c_qeproconfiguration);
	EXPORTED void STDCALL QEProConfiguration_Destroy_stdcall(QEPROCONFIGURATION_T qeproconfiguration);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* QEPROCONFIGURATION_H */
