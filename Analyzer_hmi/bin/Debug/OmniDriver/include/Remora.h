/**
 * File: Remora.h
 * Autogenerated on Fri Mar 23 13:39:05 EDT 2018 based on
 * Remora.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/remora/Remora
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef REMORA_H
#define REMORA_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "NetworkSpectrometer.h"
#include "GUIProviderArray.h"
#include "JString.h"
#include "Spectrum.h"
#include "CoefficientsArray.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class NetworkSpectrometer;
class GUIProviderArray;
class JString;
class Spectrum;
class CoefficientsArray;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED Remora : public NetworkSpectrometer // CPPClass.tag001
{
public: 
	Remora(int i);
	void openSpectrometer(int index);
	GUIProviderArray getGUIFeatures();
	JString getSerialNumber();
	JString getFirmwareVersion();
	int getSaturationIntensity();
	short setSaturationIntensity(int saturationIntensity, JString& key);
	void closeSpectrometer();
	JString getInfo(int slot);
	CharArray getInfoBytes(int slot);
	void connectToSource(JString& address, int port);
	short isConnected();
	JString getName();
	void disconnect();
	void setStrobeEnable(short strobe);
	void setIntegrationTime(int intTime);
	Spectrum getSpectrum(Spectrum& spectrum);
	void reconnect();
	CoefficientsArray readWavelengthCalibrationCoefficientsFromSpectrometer();
	void writeWavelengthCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	CoefficientsArray getWavelengthCalibrationCoefficients();
	void setWavelengthCalibrationCoefficients(CoefficientsArray& coefficients);
	DoubleArray getWavelengths(int index);
	void setWavelengths(DoubleArray& wl, int index);
	void setTECEnable(short enable);
	void setFanEnable(short enable);
	double getDetectorTemperatureCelsius();
	double getDetectorTemperatureSetPointCelsius();
	void setDetectorSetPointCelsius(double point);
	double getSetPointMinimumCelsius();
	double getSetPointMaximumCelsius();
	double getSetPointIncrementCelsius();
	short isSaveTECStateEnabled();
	void saveTECState();
	void writeStrayLightCoefficientToSpectrometer(CoefficientsArray& coefficients);
	CoefficientsArray readStrayLightCorrectionCoefficientFromSpectrometer();
	void setStrayLightCorrectionCoefficient(CoefficientsArray& coefficients);
	CoefficientsArray getStrayLightCorrectionCoefficient();
	double getStrayLight(int index);
	void setStrayLight(double strayLight, int index);
	void writeNonlinearityCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	CoefficientsArray readNonlinearityCoefficientsFromSpectrometer();
	void setNonlinearityCoefficients(CoefficientsArray& coefficients);
	CoefficientsArray getNonlinearityCoefficients();
	DoubleArray getNonlinearityCoefficientsSingleChannel(int channelIndex);
	void setNonlinearityCoefficientsSingleChannel(DoubleArray& nonlinearities, int channelIndex);
	~Remora();
	// No public default Java constructor; creating one:
	Remora();
	// No public Java copy constructor; creating one:
	Remora(const Remora &that);
	// Creating assignment operator declaration:
	Remora &operator=(const Remora &that);

private:
	jmethodID mid_Remora5333;
	jmethodID mid_openSpectrometer5334;
	jmethodID mid_getGUIFeatures5335;
	jmethodID mid_getSerialNumber5336;
	jmethodID mid_getFirmwareVersion5337;
	jmethodID mid_getSaturationIntensity5338;
	jmethodID mid_setSaturationIntensity5339;
	jmethodID mid_closeSpectrometer5340;
	jmethodID mid_getInfo5341;
	jmethodID mid_getInfoBytes5342;
	jmethodID mid_connectToSource5343;
	jmethodID mid_isConnected5344;
	jmethodID mid_getName5345;
	jmethodID mid_disconnect5346;
	jmethodID mid_setStrobeEnable5347;
	jmethodID mid_setIntegrationTime5348;
	jmethodID mid_getSpectrum5349;
	jmethodID mid_reconnect5350;
	jmethodID mid_readWavelengthCalibrationCoefficientsFromSpectrometer5351;
	jmethodID mid_writeWavelengthCoefficientsToSpectrometer5352;
	jmethodID mid_getWavelengthCalibrationCoefficients5353;
	jmethodID mid_setWavelengthCalibrationCoefficients5354;
	jmethodID mid_getWavelengths5355;
	jmethodID mid_setWavelengths5356;
	jmethodID mid_setTECEnable5357;
	jmethodID mid_setFanEnable5358;
	jmethodID mid_getDetectorTemperatureCelsius5359;
	jmethodID mid_getDetectorTemperatureSetPointCelsius5360;
	jmethodID mid_setDetectorSetPointCelsius5361;
	jmethodID mid_getSetPointMinimumCelsius5362;
	jmethodID mid_getSetPointMaximumCelsius5363;
	jmethodID mid_getSetPointIncrementCelsius5364;
	jmethodID mid_isSaveTECStateEnabled5365;
	jmethodID mid_saveTECState5366;
	jmethodID mid_writeStrayLightCoefficientToSpectrometer5367;
	jmethodID mid_readStrayLightCorrectionCoefficientFromSpectrometer5368;
	jmethodID mid_setStrayLightCorrectionCoefficient5369;
	jmethodID mid_getStrayLightCorrectionCoefficient5370;
	jmethodID mid_getStrayLight5371;
	jmethodID mid_setStrayLight5372;
	jmethodID mid_writeNonlinearityCoefficientsToSpectrometer5373;
	jmethodID mid_readNonlinearityCoefficientsFromSpectrometer5374;
	jmethodID mid_setNonlinearityCoefficients5375;
	jmethodID mid_getNonlinearityCoefficients5376;
	jmethodID mid_getNonlinearityCoefficientsSingleChannel5377;
	jmethodID mid_setNonlinearityCoefficientsSingleChannel5378;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_NETWORKSPECTROMETER_T
#define EXTERN_TYPEDEF_NETWORKSPECTROMETER_T
	typedef void* NETWORKSPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_NETWORKSPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
#define EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
	typedef void* GUIPROVIDERARRAY_T;
#endif /* EXTERN_TYPEDEF_GUIPROVIDERARRAY_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_SPECTRUM_T
#define EXTERN_TYPEDEF_SPECTRUM_T
	typedef void* SPECTRUM_T;
#endif /* EXTERN_TYPEDEF_SPECTRUM_T */
#ifndef EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
#define EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
	typedef void* COEFFICIENTSARRAY_T;
#endif /* EXTERN_TYPEDEF_COEFFICIENTSARRAY_T */
#ifndef EXTERN_TYPEDEF_REMORA_T
#define EXTERN_TYPEDEF_REMORA_T
	typedef void* REMORA_T;
#endif /* EXTERN_TYPEDEF_REMORA_T */

	// No public default Java constructor; creating one:
	EXPORTED REMORA_T Remora_Create();
	EXPORTED REMORA_T Remora_Create_1(int i);
	EXPORTED void Remora_openSpectrometer(REMORA_T c_remora, int index);
	EXPORTED void Remora_getGUIFeatures(REMORA_T c_remora, GUIPROVIDERARRAY_T retval);
	EXPORTED void Remora_getSerialNumber(REMORA_T c_remora, JSTRING_T retval);
	EXPORTED void Remora_getFirmwareVersion(REMORA_T c_remora, JSTRING_T retval);
	EXPORTED int Remora_getSaturationIntensity(REMORA_T c_remora);
	EXPORTED short Remora_setSaturationIntensity(REMORA_T c_remora, int saturationIntensity, JSTRING_T key);
	EXPORTED void Remora_closeSpectrometer(REMORA_T c_remora);
	EXPORTED void Remora_getInfo(REMORA_T c_remora, int slot, JSTRING_T retval);
	EXPORTED void Remora_getInfoBytes(REMORA_T c_remora, int slot, CHARARRAY_T retval);
	EXPORTED void Remora_connectToSource(REMORA_T c_remora, JSTRING_T address, int port);
	EXPORTED short Remora_isConnected(REMORA_T c_remora);
	EXPORTED void Remora_getName(REMORA_T c_remora, JSTRING_T retval);
	EXPORTED void Remora_disconnect(REMORA_T c_remora);
	EXPORTED void Remora_setStrobeEnable(REMORA_T c_remora, short strobe);
	EXPORTED void Remora_setIntegrationTime(REMORA_T c_remora, int intTime);
	EXPORTED void Remora_getSpectrum(REMORA_T c_remora, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void Remora_reconnect(REMORA_T c_remora);
	EXPORTED void Remora_readWavelengthCalibrationCoefficientsFromSpectrometer(REMORA_T c_remora, COEFFICIENTSARRAY_T retval);
	EXPORTED void Remora_writeWavelengthCoefficientsToSpectrometer(REMORA_T c_remora, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void Remora_getWavelengthCalibrationCoefficients(REMORA_T c_remora, COEFFICIENTSARRAY_T retval);
	EXPORTED void Remora_setWavelengthCalibrationCoefficients(REMORA_T c_remora, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void Remora_getWavelengths(REMORA_T c_remora, int index, DOUBLEARRAY_T retval);
	EXPORTED void Remora_setWavelengths(REMORA_T c_remora, DOUBLEARRAY_T wl, int index);
	EXPORTED void Remora_setTECEnable(REMORA_T c_remora, short enable);
	EXPORTED void Remora_setFanEnable(REMORA_T c_remora, short enable);
	EXPORTED double Remora_getDetectorTemperatureCelsius(REMORA_T c_remora);
	EXPORTED double Remora_getDetectorTemperatureSetPointCelsius(REMORA_T c_remora);
	EXPORTED void Remora_setDetectorSetPointCelsius(REMORA_T c_remora, double point);
	EXPORTED double Remora_getSetPointMinimumCelsius(REMORA_T c_remora);
	EXPORTED double Remora_getSetPointMaximumCelsius(REMORA_T c_remora);
	EXPORTED double Remora_getSetPointIncrementCelsius(REMORA_T c_remora);
	EXPORTED short Remora_isSaveTECStateEnabled(REMORA_T c_remora);
	EXPORTED void Remora_saveTECState(REMORA_T c_remora);
	EXPORTED void Remora_writeStrayLightCoefficientToSpectrometer(REMORA_T c_remora, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void Remora_readStrayLightCorrectionCoefficientFromSpectrometer(REMORA_T c_remora, COEFFICIENTSARRAY_T retval);
	EXPORTED void Remora_setStrayLightCorrectionCoefficient(REMORA_T c_remora, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void Remora_getStrayLightCorrectionCoefficient(REMORA_T c_remora, COEFFICIENTSARRAY_T retval);
	EXPORTED double Remora_getStrayLight(REMORA_T c_remora, int index);
	EXPORTED void Remora_setStrayLight(REMORA_T c_remora, double strayLight, int index);
	EXPORTED void Remora_writeNonlinearityCoefficientsToSpectrometer(REMORA_T c_remora, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void Remora_readNonlinearityCoefficientsFromSpectrometer(REMORA_T c_remora, COEFFICIENTSARRAY_T retval);
	EXPORTED void Remora_setNonlinearityCoefficients(REMORA_T c_remora, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void Remora_getNonlinearityCoefficients(REMORA_T c_remora, COEFFICIENTSARRAY_T retval);
	EXPORTED void Remora_getNonlinearityCoefficientsSingleChannel(REMORA_T c_remora, int channelIndex, DOUBLEARRAY_T retval);
	EXPORTED void Remora_setNonlinearityCoefficientsSingleChannel(REMORA_T c_remora, DOUBLEARRAY_T nonlinearities, int channelIndex);
	EXPORTED void Remora_Destroy(REMORA_T remora);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED REMORA_T STDCALL Remora_Create_stdcall_1(int i);
	EXPORTED void STDCALL Remora_openSpectrometer_stdcall(REMORA_T c_remora, int index);
	EXPORTED void STDCALL Remora_getGUIFeatures_stdcall(REMORA_T c_remora, GUIPROVIDERARRAY_T retval);
	EXPORTED void STDCALL Remora_getSerialNumber_stdcall(REMORA_T c_remora, JSTRING_T retval);
	EXPORTED void STDCALL Remora_getFirmwareVersion_stdcall(REMORA_T c_remora, JSTRING_T retval);
	EXPORTED int STDCALL Remora_getSaturationIntensity_stdcall(REMORA_T c_remora);
	EXPORTED short STDCALL Remora_setSaturationIntensity_stdcall(REMORA_T c_remora, int saturationIntensity, JSTRING_T key);
	EXPORTED void STDCALL Remora_closeSpectrometer_stdcall(REMORA_T c_remora);
	EXPORTED void STDCALL Remora_getInfo_stdcall(REMORA_T c_remora, int slot, JSTRING_T retval);
	EXPORTED void STDCALL Remora_getInfoBytes_stdcall(REMORA_T c_remora, int slot, CHARARRAY_T retval);
	EXPORTED void STDCALL Remora_connectToSource_stdcall(REMORA_T c_remora, JSTRING_T address, int port);
	EXPORTED short STDCALL Remora_isConnected_stdcall(REMORA_T c_remora);
	EXPORTED void STDCALL Remora_getName_stdcall(REMORA_T c_remora, JSTRING_T retval);
	EXPORTED void STDCALL Remora_disconnect_stdcall(REMORA_T c_remora);
	EXPORTED void STDCALL Remora_setStrobeEnable_stdcall(REMORA_T c_remora, short strobe);
	EXPORTED void STDCALL Remora_setIntegrationTime_stdcall(REMORA_T c_remora, int intTime);
	EXPORTED void STDCALL Remora_getSpectrum_stdcall(REMORA_T c_remora, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void STDCALL Remora_reconnect_stdcall(REMORA_T c_remora);
	EXPORTED void STDCALL Remora_readWavelengthCalibrationCoefficientsFromSpectrometer_stdcall(REMORA_T c_remora, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL Remora_writeWavelengthCoefficientsToSpectrometer_stdcall(REMORA_T c_remora, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL Remora_getWavelengthCalibrationCoefficients_stdcall(REMORA_T c_remora, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL Remora_setWavelengthCalibrationCoefficients_stdcall(REMORA_T c_remora, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL Remora_getWavelengths_stdcall(REMORA_T c_remora, int index, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL Remora_setWavelengths_stdcall(REMORA_T c_remora, DOUBLEARRAY_T wl, int index);
	EXPORTED void STDCALL Remora_setTECEnable_stdcall(REMORA_T c_remora, short enable);
	EXPORTED void STDCALL Remora_setFanEnable_stdcall(REMORA_T c_remora, short enable);
	EXPORTED double STDCALL Remora_getDetectorTemperatureCelsius_stdcall(REMORA_T c_remora);
	EXPORTED double STDCALL Remora_getDetectorTemperatureSetPointCelsius_stdcall(REMORA_T c_remora);
	EXPORTED void STDCALL Remora_setDetectorSetPointCelsius_stdcall(REMORA_T c_remora, double point);
	EXPORTED double STDCALL Remora_getSetPointMinimumCelsius_stdcall(REMORA_T c_remora);
	EXPORTED double STDCALL Remora_getSetPointMaximumCelsius_stdcall(REMORA_T c_remora);
	EXPORTED double STDCALL Remora_getSetPointIncrementCelsius_stdcall(REMORA_T c_remora);
	EXPORTED short STDCALL Remora_isSaveTECStateEnabled_stdcall(REMORA_T c_remora);
	EXPORTED void STDCALL Remora_saveTECState_stdcall(REMORA_T c_remora);
	EXPORTED void STDCALL Remora_writeStrayLightCoefficientToSpectrometer_stdcall(REMORA_T c_remora, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL Remora_readStrayLightCorrectionCoefficientFromSpectrometer_stdcall(REMORA_T c_remora, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL Remora_setStrayLightCorrectionCoefficient_stdcall(REMORA_T c_remora, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL Remora_getStrayLightCorrectionCoefficient_stdcall(REMORA_T c_remora, COEFFICIENTSARRAY_T retval);
	EXPORTED double STDCALL Remora_getStrayLight_stdcall(REMORA_T c_remora, int index);
	EXPORTED void STDCALL Remora_setStrayLight_stdcall(REMORA_T c_remora, double strayLight, int index);
	EXPORTED void STDCALL Remora_writeNonlinearityCoefficientsToSpectrometer_stdcall(REMORA_T c_remora, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL Remora_readNonlinearityCoefficientsFromSpectrometer_stdcall(REMORA_T c_remora, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL Remora_setNonlinearityCoefficients_stdcall(REMORA_T c_remora, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL Remora_getNonlinearityCoefficients_stdcall(REMORA_T c_remora, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL Remora_getNonlinearityCoefficientsSingleChannel_stdcall(REMORA_T c_remora, int channelIndex, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL Remora_setNonlinearityCoefficientsSingleChannel_stdcall(REMORA_T c_remora, DOUBLEARRAY_T nonlinearities, int channelIndex);
	EXPORTED void STDCALL Remora_Destroy_stdcall(REMORA_T remora);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* REMORA_H */
