/**
 * File: LaserProvider.h
 * Autogenerated on Fri Mar 23 13:38:57 EDT 2018 based on
 * LaserProvider.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/mmsraman/features/laser/LaserProvider
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef LASERPROVIDER_H
#define LASERPROVIDER_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "Laser.h"
#include "LaserArray.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class Laser;
class LaserArray;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED LaserProvider : public BaseJavaClass // CPPClass.tag001
{
public: 
	Laser getLaser(int param0);
	LaserArray getLasers();
	void setLasers(LaserArray& param0);
	int getNumberOfEnabledLasers();
	int getNumberOfSupportedLasers();
	void setNumberOfSupportedLasers(int param0);
	void getLaserInfo(int param0);
	void setLaserInfo(int param0);
	void setDefaultLaser(int param0);
	int getDefaultLaser();
	short isLaserTemperatureRegulation();
	void setLaserTemperatureRegulation(short param0);
	void getLaserTemperatureInfo();
	void setLaserTemperatureInfo();
	int getMinimumLaserSetpoint();
	void setMinimumLaserSetpoint(int param0);
	int getMaximumLaserSetpoint();
	void setMaximumLaserSetpoint(int param0);
	int getLaserPowerInfo();
	void setLaserPowerInfo(int param0);
	short isLaserPowerRegulation();
	void setLaserPowerRegulation(short param0);
	int getMinimumLaserPowerSetpoint();
	void setMinimumLaserPowerSetpoint(int param0);
	int getMaximumLaserPowerSetpoint();
	void setMaximumLaserPowerSetpoint(int param0);
	~LaserProvider();
	// No public default Java constructor; creating one:
	LaserProvider();
	// No public Java copy constructor; creating one:
	LaserProvider(const LaserProvider &that);
	// Creating assignment operator declaration:
	LaserProvider &operator=(const LaserProvider &that);

private:
	jmethodID mid_getLaser4242;
	jmethodID mid_getLasers4243;
	jmethodID mid_setLasers4244;
	jmethodID mid_getNumberOfEnabledLasers4245;
	jmethodID mid_getNumberOfSupportedLasers4246;
	jmethodID mid_setNumberOfSupportedLasers4247;
	jmethodID mid_getLaserInfo4248;
	jmethodID mid_setLaserInfo4249;
	jmethodID mid_setDefaultLaser4250;
	jmethodID mid_getDefaultLaser4251;
	jmethodID mid_isLaserTemperatureRegulation4252;
	jmethodID mid_setLaserTemperatureRegulation4253;
	jmethodID mid_getLaserTemperatureInfo4254;
	jmethodID mid_setLaserTemperatureInfo4255;
	jmethodID mid_getMinimumLaserSetpoint4256;
	jmethodID mid_setMinimumLaserSetpoint4257;
	jmethodID mid_getMaximumLaserSetpoint4258;
	jmethodID mid_setMaximumLaserSetpoint4259;
	jmethodID mid_getLaserPowerInfo4260;
	jmethodID mid_setLaserPowerInfo4261;
	jmethodID mid_isLaserPowerRegulation4262;
	jmethodID mid_setLaserPowerRegulation4263;
	jmethodID mid_getMinimumLaserPowerSetpoint4264;
	jmethodID mid_setMinimumLaserPowerSetpoint4265;
	jmethodID mid_getMaximumLaserPowerSetpoint4266;
	jmethodID mid_setMaximumLaserPowerSetpoint4267;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_LASER_T
#define EXTERN_TYPEDEF_LASER_T
	typedef void* LASER_T;
#endif /* EXTERN_TYPEDEF_LASER_T */
#ifndef EXTERN_TYPEDEF_LASERARRAY_T
#define EXTERN_TYPEDEF_LASERARRAY_T
	typedef void* LASERARRAY_T;
#endif /* EXTERN_TYPEDEF_LASERARRAY_T */
#ifndef EXTERN_TYPEDEF_LASERPROVIDER_T
#define EXTERN_TYPEDEF_LASERPROVIDER_T
	typedef void* LASERPROVIDER_T;
#endif /* EXTERN_TYPEDEF_LASERPROVIDER_T */

	// No public default Java constructor; creating one:
	EXPORTED LASERPROVIDER_T LaserProvider_Create();
	EXPORTED void LaserProvider_getLaser(LASERPROVIDER_T c_laser_provider, int param0, LASER_T retval);
	EXPORTED void LaserProvider_getLasers(LASERPROVIDER_T c_laser_provider, LASERARRAY_T retval);
	EXPORTED void LaserProvider_setLasers(LASERPROVIDER_T c_laser_provider, LASERARRAY_T param0);
	EXPORTED int LaserProvider_getNumberOfEnabledLasers(LASERPROVIDER_T c_laser_provider);
	EXPORTED int LaserProvider_getNumberOfSupportedLasers(LASERPROVIDER_T c_laser_provider);
	EXPORTED void LaserProvider_setNumberOfSupportedLasers(LASERPROVIDER_T c_laser_provider, int param0);
	EXPORTED void LaserProvider_getLaserInfo(LASERPROVIDER_T c_laser_provider, int param0);
	EXPORTED void LaserProvider_setLaserInfo(LASERPROVIDER_T c_laser_provider, int param0);
	EXPORTED void LaserProvider_setDefaultLaser(LASERPROVIDER_T c_laser_provider, int param0);
	EXPORTED int LaserProvider_getDefaultLaser(LASERPROVIDER_T c_laser_provider);
	EXPORTED short LaserProvider_isLaserTemperatureRegulation(LASERPROVIDER_T c_laser_provider);
	EXPORTED void LaserProvider_setLaserTemperatureRegulation(LASERPROVIDER_T c_laser_provider, short param0);
	EXPORTED void LaserProvider_getLaserTemperatureInfo(LASERPROVIDER_T c_laser_provider);
	EXPORTED void LaserProvider_setLaserTemperatureInfo(LASERPROVIDER_T c_laser_provider);
	EXPORTED int LaserProvider_getMinimumLaserSetpoint(LASERPROVIDER_T c_laser_provider);
	EXPORTED void LaserProvider_setMinimumLaserSetpoint(LASERPROVIDER_T c_laser_provider, int param0);
	EXPORTED int LaserProvider_getMaximumLaserSetpoint(LASERPROVIDER_T c_laser_provider);
	EXPORTED void LaserProvider_setMaximumLaserSetpoint(LASERPROVIDER_T c_laser_provider, int param0);
	EXPORTED int LaserProvider_getLaserPowerInfo(LASERPROVIDER_T c_laser_provider);
	EXPORTED void LaserProvider_setLaserPowerInfo(LASERPROVIDER_T c_laser_provider, int param0);
	EXPORTED short LaserProvider_isLaserPowerRegulation(LASERPROVIDER_T c_laser_provider);
	EXPORTED void LaserProvider_setLaserPowerRegulation(LASERPROVIDER_T c_laser_provider, short param0);
	EXPORTED int LaserProvider_getMinimumLaserPowerSetpoint(LASERPROVIDER_T c_laser_provider);
	EXPORTED void LaserProvider_setMinimumLaserPowerSetpoint(LASERPROVIDER_T c_laser_provider, int param0);
	EXPORTED int LaserProvider_getMaximumLaserPowerSetpoint(LASERPROVIDER_T c_laser_provider);
	EXPORTED void LaserProvider_setMaximumLaserPowerSetpoint(LASERPROVIDER_T c_laser_provider, int param0);
	EXPORTED void LaserProvider_Destroy(LASERPROVIDER_T laser_provider);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED void STDCALL LaserProvider_getLaser_stdcall(LASERPROVIDER_T c_laser_provider, int param0, LASER_T retval);
	EXPORTED void STDCALL LaserProvider_getLasers_stdcall(LASERPROVIDER_T c_laser_provider, LASERARRAY_T retval);
	EXPORTED void STDCALL LaserProvider_setLasers_stdcall(LASERPROVIDER_T c_laser_provider, LASERARRAY_T param0);
	EXPORTED int STDCALL LaserProvider_getNumberOfEnabledLasers_stdcall(LASERPROVIDER_T c_laser_provider);
	EXPORTED int STDCALL LaserProvider_getNumberOfSupportedLasers_stdcall(LASERPROVIDER_T c_laser_provider);
	EXPORTED void STDCALL LaserProvider_setNumberOfSupportedLasers_stdcall(LASERPROVIDER_T c_laser_provider, int param0);
	EXPORTED void STDCALL LaserProvider_getLaserInfo_stdcall(LASERPROVIDER_T c_laser_provider, int param0);
	EXPORTED void STDCALL LaserProvider_setLaserInfo_stdcall(LASERPROVIDER_T c_laser_provider, int param0);
	EXPORTED void STDCALL LaserProvider_setDefaultLaser_stdcall(LASERPROVIDER_T c_laser_provider, int param0);
	EXPORTED int STDCALL LaserProvider_getDefaultLaser_stdcall(LASERPROVIDER_T c_laser_provider);
	EXPORTED short STDCALL LaserProvider_isLaserTemperatureRegulation_stdcall(LASERPROVIDER_T c_laser_provider);
	EXPORTED void STDCALL LaserProvider_setLaserTemperatureRegulation_stdcall(LASERPROVIDER_T c_laser_provider, short param0);
	EXPORTED void STDCALL LaserProvider_getLaserTemperatureInfo_stdcall(LASERPROVIDER_T c_laser_provider);
	EXPORTED void STDCALL LaserProvider_setLaserTemperatureInfo_stdcall(LASERPROVIDER_T c_laser_provider);
	EXPORTED int STDCALL LaserProvider_getMinimumLaserSetpoint_stdcall(LASERPROVIDER_T c_laser_provider);
	EXPORTED void STDCALL LaserProvider_setMinimumLaserSetpoint_stdcall(LASERPROVIDER_T c_laser_provider, int param0);
	EXPORTED int STDCALL LaserProvider_getMaximumLaserSetpoint_stdcall(LASERPROVIDER_T c_laser_provider);
	EXPORTED void STDCALL LaserProvider_setMaximumLaserSetpoint_stdcall(LASERPROVIDER_T c_laser_provider, int param0);
	EXPORTED int STDCALL LaserProvider_getLaserPowerInfo_stdcall(LASERPROVIDER_T c_laser_provider);
	EXPORTED void STDCALL LaserProvider_setLaserPowerInfo_stdcall(LASERPROVIDER_T c_laser_provider, int param0);
	EXPORTED short STDCALL LaserProvider_isLaserPowerRegulation_stdcall(LASERPROVIDER_T c_laser_provider);
	EXPORTED void STDCALL LaserProvider_setLaserPowerRegulation_stdcall(LASERPROVIDER_T c_laser_provider, short param0);
	EXPORTED int STDCALL LaserProvider_getMinimumLaserPowerSetpoint_stdcall(LASERPROVIDER_T c_laser_provider);
	EXPORTED void STDCALL LaserProvider_setMinimumLaserPowerSetpoint_stdcall(LASERPROVIDER_T c_laser_provider, int param0);
	EXPORTED int STDCALL LaserProvider_getMaximumLaserPowerSetpoint_stdcall(LASERPROVIDER_T c_laser_provider);
	EXPORTED void STDCALL LaserProvider_setMaximumLaserPowerSetpoint_stdcall(LASERPROVIDER_T c_laser_provider, int param0);
	EXPORTED void STDCALL LaserProvider_Destroy_stdcall(LASERPROVIDER_T laser_provider);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* LASERPROVIDER_H */
