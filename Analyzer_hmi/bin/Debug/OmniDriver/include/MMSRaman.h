/**
 * File: MMSRaman.h
 * Autogenerated on Fri Mar 23 13:38:58 EDT 2018 based on
 * MMSRaman.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/mmsraman/ramanspectrometer/MMSRaman
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef MMSRAMAN_H
#define MMSRAMAN_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "MMSRamanSpectrometer.h"
#include "GUIProviderArray.h"
#include "JString.h"
#include "SpectrometerExposure.h"
#include "SpectrometerReconstruction.h"
#include "Spectrum.h"
#include "MMSRamanCalibration.h"
#include "Laser.h"
#include "LaserArray.h"
#include "CoefficientsArray.h"
#include "JStringArray.h"
#include "ExposureListener.h"
#include "IntegrationTimeChangeListener.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class MMSRamanSpectrometer;
class GUIProviderArray;
class JString;
class SpectrometerExposure;
class SpectrometerReconstruction;
class Spectrum;
class MMSRamanCalibration;
class Laser;
class LaserArray;
class CoefficientsArray;
class MMSRaman;
class JStringArray;
class ExposureListener;
class IntegrationTimeChangeListener;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED MMSRaman : public MMSRamanSpectrometer // CPPClass.tag001
{
public: 
	MMSRaman();
	MMSRaman(int i);
	void openSpectrometer(int index);
	GUIProviderArray getGUIFeatures();
	JString getSerialNumber();
	JString getModelNumber();
	void getSpectrometerInfo();
	float getIntegrationTime();
	void setIntegrationTime(int intTime);
	SpectrometerExposure getSpectrometerExposure(signed char shutter, signed char type);
	void startExposure(signed char shutter, signed char type);
	short queryExposure();
	SpectrometerExposure getExposure();
	void endExposure();
	void endExposure(signed char shutterState);
	SpectrometerReconstruction getReconstruction(signed char type);
	void reset();
	signed char getReconstructionType();
	void setReconstructionType(signed char reconstructionType);
	Spectrum getSpectrum(Spectrum& spectrum);
	void getDarkExposure();
	void getLightExposure();
	int getCcdWidth();
	int getCcdHeight();
	short isExposureInProgress();
	void setStrobeEnable(short laserOn);
	void readCalibrationFromSpectrometer();
	void writeCalibrationToSpectrometer(MMSRamanCalibration& cal);
	MMSRamanCalibration getCalibration();
	Laser getLaser(int laserIndex);
	LaserArray getLasers();
	void setLasers(LaserArray& lasers);
	int getNumberOfEnabledLasers();
	void setLaserInfo(int laserIndex);
	void getLaserInfo(int laserIndex);
	int getNumberOfSupportedLasers();
	void setNumberOfSupportedLasers(int numberOfSupportedLasers);
	void setDefaultLaser(int laserIndex);
	int getDefaultLaser();
	short isLaserTemperatureRegulation();
	void setLaserTemperatureRegulation(short laserTemperatureRegulation);
	void getLaserTemperatureInfo();
	void setLaserTemperatureInfo();
	int getMinimumLaserSetpoint();
	void setMinimumLaserSetpoint(int minimumLaserSetpoint);
	int getMaximumLaserSetpoint();
	void setMaximumLaserSetpoint(int maximumLaserSetpoint);
	void setLaserPowerInfo(int power);
	int getLaserPowerInfo();
	short isLaserPowerRegulation();
	void setLaserPowerRegulation(short laserPowerRegulation);
	int getMinimumLaserPowerSetpoint();
	void setMinimumLaserPowerSetpoint(int minimumLaserPowerSetpoint);
	int getMaximumLaserPowerSetpoint();
	void setMaximumLaserPowerSetpoint(int maximumLaserPowerSetpoint);
	void getCCDTemperatureInfo();
	void setCCDTemperatureInfo(short regulation, float setpoint);
	short isTemperatureRegulation();
	void setTemperatureRegulation(short temperatureRegulation);
	float getCCDSetpoint();
	void setCCDSetpoint(float setpoint);
	int getMinimumCCDSetpoint();
	void setMinimumCCDSetpoint(int min);
	int getMaximumCCDSetpoint();
	void setMaximumCCDSetpoint(int max);
	float getThermistor();
	short isThermFault();
	short isTempLock();
	signed char getShutterState();
	short isShutterOpen();
	void openShutter();
	void closeShutter();
	CoefficientsArray readWavelengthCalibrationCoefficientsFromSpectrometer();
	void writeWavelengthCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	CoefficientsArray getWavelengthCalibrationCoefficients();
	void setWavelengthCalibrationCoefficients(CoefficientsArray& coefficients);
	DoubleArray getWavelengths(int index);
	void setWavelengths(DoubleArray& wl, int index);
	JString getFirmwareVersion();
	void setDSPFirmwareVersion(JString& dsp);
	JString getDSPFirmwareVersion();
	void setFPGAFirmwareVersion(JString& fpga);
	JString getFPGAFirmwareVersion();
	void setUSBFirmwareVersion(JString& usb);
	JString getUSBFirmwareVersion();
	MMSRaman getSpectrometer();
	void setMasterClock(int rate);
	JStringArray getLEDFlashCodes();
	JString toString();
	void addExposureListener(ExposureListener& listener);
	void removeExposureListener(ExposureListener& listener);
	SpectrometerExposure getLastExposure();
	short has1DMode();
	void set2DMode(int channel);
	void set1DMode(int channel);
	short is2DMode();
	short is1DMode();
	int get2DintegrationTime();
	void addIntegrationTimeChangeListener(IntegrationTimeChangeListener& listener);
	void removeIntegrationTimeChangeListener(IntegrationTimeChangeListener& listener);
	void fireIntegrationTimeChanged(int time);
	~MMSRaman();
	// No public Java copy constructor; creating one:
	MMSRaman(const MMSRaman &that);
	// Creating assignment operator declaration:
	MMSRaman &operator=(const MMSRaman &that);

private:
	jmethodID mid_MMSRaman4328;
	jmethodID mid_MMSRaman4329;
	jmethodID mid_openSpectrometer4330;
	jmethodID mid_getGUIFeatures4331;
	jmethodID mid_getSerialNumber4332;
	jmethodID mid_getModelNumber4333;
	jmethodID mid_getSpectrometerInfo4334;
	jmethodID mid_getIntegrationTime4335;
	jmethodID mid_setIntegrationTime4336;
	jmethodID mid_getSpectrometerExposure4337;
	jmethodID mid_startExposure4338;
	jmethodID mid_queryExposure4339;
	jmethodID mid_getExposure4340;
	jmethodID mid_endExposure4341;
	jmethodID mid_endExposure4342;
	jmethodID mid_getReconstruction4343;
	jmethodID mid_reset4344;
	jmethodID mid_getReconstructionType4345;
	jmethodID mid_setReconstructionType4346;
	jmethodID mid_getSpectrum4347;
	jmethodID mid_getDarkExposure4348;
	jmethodID mid_getLightExposure4349;
	jmethodID mid_getCcdWidth4350;
	jmethodID mid_getCcdHeight4351;
	jmethodID mid_isExposureInProgress4352;
	jmethodID mid_setStrobeEnable4353;
	jmethodID mid_readCalibrationFromSpectrometer4354;
	jmethodID mid_writeCalibrationToSpectrometer4355;
	jmethodID mid_getCalibration4356;
	jmethodID mid_getLaser4357;
	jmethodID mid_getLasers4358;
	jmethodID mid_setLasers4359;
	jmethodID mid_getNumberOfEnabledLasers4360;
	jmethodID mid_setLaserInfo4361;
	jmethodID mid_getLaserInfo4362;
	jmethodID mid_getNumberOfSupportedLasers4363;
	jmethodID mid_setNumberOfSupportedLasers4364;
	jmethodID mid_setDefaultLaser4365;
	jmethodID mid_getDefaultLaser4366;
	jmethodID mid_isLaserTemperatureRegulation4367;
	jmethodID mid_setLaserTemperatureRegulation4368;
	jmethodID mid_getLaserTemperatureInfo4369;
	jmethodID mid_setLaserTemperatureInfo4370;
	jmethodID mid_getMinimumLaserSetpoint4371;
	jmethodID mid_setMinimumLaserSetpoint4372;
	jmethodID mid_getMaximumLaserSetpoint4373;
	jmethodID mid_setMaximumLaserSetpoint4374;
	jmethodID mid_setLaserPowerInfo4375;
	jmethodID mid_getLaserPowerInfo4376;
	jmethodID mid_isLaserPowerRegulation4377;
	jmethodID mid_setLaserPowerRegulation4378;
	jmethodID mid_getMinimumLaserPowerSetpoint4379;
	jmethodID mid_setMinimumLaserPowerSetpoint4380;
	jmethodID mid_getMaximumLaserPowerSetpoint4381;
	jmethodID mid_setMaximumLaserPowerSetpoint4382;
	jmethodID mid_getCCDTemperatureInfo4383;
	jmethodID mid_setCCDTemperatureInfo4384;
	jmethodID mid_isTemperatureRegulation4385;
	jmethodID mid_setTemperatureRegulation4386;
	jmethodID mid_getCCDSetpoint4387;
	jmethodID mid_setCCDSetpoint4388;
	jmethodID mid_getMinimumCCDSetpoint4389;
	jmethodID mid_setMinimumCCDSetpoint4390;
	jmethodID mid_getMaximumCCDSetpoint4391;
	jmethodID mid_setMaximumCCDSetpoint4392;
	jmethodID mid_getThermistor4393;
	jmethodID mid_isThermFault4394;
	jmethodID mid_isTempLock4395;
	jmethodID mid_getShutterState4396;
	jmethodID mid_isShutterOpen4397;
	jmethodID mid_openShutter4398;
	jmethodID mid_closeShutter4399;
	jmethodID mid_readWavelengthCalibrationCoefficientsFromSpectrometer4400;
	jmethodID mid_writeWavelengthCoefficientsToSpectrometer4401;
	jmethodID mid_getWavelengthCalibrationCoefficients4402;
	jmethodID mid_setWavelengthCalibrationCoefficients4403;
	jmethodID mid_getWavelengths4404;
	jmethodID mid_setWavelengths4405;
	jmethodID mid_getFirmwareVersion4406;
	jmethodID mid_setDSPFirmwareVersion4407;
	jmethodID mid_getDSPFirmwareVersion4408;
	jmethodID mid_setFPGAFirmwareVersion4409;
	jmethodID mid_getFPGAFirmwareVersion4410;
	jmethodID mid_setUSBFirmwareVersion4411;
	jmethodID mid_getUSBFirmwareVersion4412;
	jmethodID mid_getSpectrometer4413;
	jmethodID mid_setMasterClock4414;
	jmethodID mid_getLEDFlashCodes4415;
	jmethodID mid_toString4416;
	jmethodID mid_addExposureListener4417;
	jmethodID mid_removeExposureListener4418;
	jmethodID mid_getLastExposure4419;
	jmethodID mid_has1DMode4420;
	jmethodID mid_set2DMode4421;
	jmethodID mid_set1DMode4422;
	jmethodID mid_is2DMode4423;
	jmethodID mid_is1DMode4424;
	jmethodID mid_get2DintegrationTime4425;
	jmethodID mid_addIntegrationTimeChangeListener4426;
	jmethodID mid_removeIntegrationTimeChangeListener4427;
	jmethodID mid_fireIntegrationTimeChanged4428;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_MMSRAMANSPECTROMETER_T
#define EXTERN_TYPEDEF_MMSRAMANSPECTROMETER_T
	typedef void* MMSRAMANSPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_MMSRAMANSPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
#define EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
	typedef void* GUIPROVIDERARRAY_T;
#endif /* EXTERN_TYPEDEF_GUIPROVIDERARRAY_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETEREXPOSURE_T
#define EXTERN_TYPEDEF_SPECTROMETEREXPOSURE_T
	typedef void* SPECTROMETEREXPOSURE_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETEREXPOSURE_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETERRECONSTRUCTION_T
#define EXTERN_TYPEDEF_SPECTROMETERRECONSTRUCTION_T
	typedef void* SPECTROMETERRECONSTRUCTION_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERRECONSTRUCTION_T */
#ifndef EXTERN_TYPEDEF_SPECTRUM_T
#define EXTERN_TYPEDEF_SPECTRUM_T
	typedef void* SPECTRUM_T;
#endif /* EXTERN_TYPEDEF_SPECTRUM_T */
#ifndef EXTERN_TYPEDEF_MMSRAMANCALIBRATION_T
#define EXTERN_TYPEDEF_MMSRAMANCALIBRATION_T
	typedef void* MMSRAMANCALIBRATION_T;
#endif /* EXTERN_TYPEDEF_MMSRAMANCALIBRATION_T */
#ifndef EXTERN_TYPEDEF_LASER_T
#define EXTERN_TYPEDEF_LASER_T
	typedef void* LASER_T;
#endif /* EXTERN_TYPEDEF_LASER_T */
#ifndef EXTERN_TYPEDEF_LASERARRAY_T
#define EXTERN_TYPEDEF_LASERARRAY_T
	typedef void* LASERARRAY_T;
#endif /* EXTERN_TYPEDEF_LASERARRAY_T */
#ifndef EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
#define EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
	typedef void* COEFFICIENTSARRAY_T;
#endif /* EXTERN_TYPEDEF_COEFFICIENTSARRAY_T */
#ifndef EXTERN_TYPEDEF_MMSRAMAN_T
#define EXTERN_TYPEDEF_MMSRAMAN_T
	typedef void* MMSRAMAN_T;
#endif /* EXTERN_TYPEDEF_MMSRAMAN_T */
#ifndef EXTERN_TYPEDEF_JSTRINGARRAY_T
#define EXTERN_TYPEDEF_JSTRINGARRAY_T
	typedef void* JSTRINGARRAY_T;
#endif /* EXTERN_TYPEDEF_JSTRINGARRAY_T */
#ifndef EXTERN_TYPEDEF_EXPOSURELISTENER_T
#define EXTERN_TYPEDEF_EXPOSURELISTENER_T
	typedef void* EXPOSURELISTENER_T;
#endif /* EXTERN_TYPEDEF_EXPOSURELISTENER_T */
#ifndef EXTERN_TYPEDEF_INTEGRATIONTIMECHANGELISTENER_T
#define EXTERN_TYPEDEF_INTEGRATIONTIMECHANGELISTENER_T
	typedef void* INTEGRATIONTIMECHANGELISTENER_T;
#endif /* EXTERN_TYPEDEF_INTEGRATIONTIMECHANGELISTENER_T */

	EXPORTED MMSRAMAN_T MMSRaman_Create();
	EXPORTED MMSRAMAN_T MMSRaman_Create_1(int i);
	EXPORTED void MMSRaman_openSpectrometer(MMSRAMAN_T c_mmsraman, int index);
	EXPORTED void MMSRaman_getGUIFeatures(MMSRAMAN_T c_mmsraman, GUIPROVIDERARRAY_T retval);
	EXPORTED void MMSRaman_getSerialNumber(MMSRAMAN_T c_mmsraman, JSTRING_T retval);
	EXPORTED void MMSRaman_getModelNumber(MMSRAMAN_T c_mmsraman, JSTRING_T retval);
	EXPORTED void MMSRaman_getSpectrometerInfo(MMSRAMAN_T c_mmsraman);
	EXPORTED float MMSRaman_getIntegrationTime(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_setIntegrationTime(MMSRAMAN_T c_mmsraman, int intTime);
	EXPORTED void MMSRaman_getSpectrometerExposure(MMSRAMAN_T c_mmsraman, signed char shutter, signed char type, SPECTROMETEREXPOSURE_T retval);
	EXPORTED void MMSRaman_startExposure(MMSRAMAN_T c_mmsraman, signed char shutter, signed char type);
	EXPORTED short MMSRaman_queryExposure(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_getExposure(MMSRAMAN_T c_mmsraman, SPECTROMETEREXPOSURE_T retval);
	EXPORTED void MMSRaman_endExposure(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_endExposure_1(MMSRAMAN_T c_mmsraman, signed char shutterState);
	EXPORTED void MMSRaman_getReconstruction(MMSRAMAN_T c_mmsraman, signed char type, SPECTROMETERRECONSTRUCTION_T retval);
	EXPORTED void MMSRaman_reset(MMSRAMAN_T c_mmsraman);
	EXPORTED signed char MMSRaman_getReconstructionType(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_setReconstructionType(MMSRAMAN_T c_mmsraman, signed char reconstructionType);
	EXPORTED void MMSRaman_getSpectrum(MMSRAMAN_T c_mmsraman, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void MMSRaman_getDarkExposure(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_getLightExposure(MMSRAMAN_T c_mmsraman);
	EXPORTED int MMSRaman_getCcdWidth(MMSRAMAN_T c_mmsraman);
	EXPORTED int MMSRaman_getCcdHeight(MMSRAMAN_T c_mmsraman);
	EXPORTED short MMSRaman_isExposureInProgress(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_setStrobeEnable(MMSRAMAN_T c_mmsraman, short laserOn);
	EXPORTED void MMSRaman_readCalibrationFromSpectrometer(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_writeCalibrationToSpectrometer(MMSRAMAN_T c_mmsraman, MMSRAMANCALIBRATION_T cal);
	EXPORTED void MMSRaman_getCalibration(MMSRAMAN_T c_mmsraman, MMSRAMANCALIBRATION_T retval);
	EXPORTED void MMSRaman_getLaser(MMSRAMAN_T c_mmsraman, int laserIndex, LASER_T retval);
	EXPORTED void MMSRaman_getLasers(MMSRAMAN_T c_mmsraman, LASERARRAY_T retval);
	EXPORTED void MMSRaman_setLasers(MMSRAMAN_T c_mmsraman, LASERARRAY_T lasers);
	EXPORTED int MMSRaman_getNumberOfEnabledLasers(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_setLaserInfo(MMSRAMAN_T c_mmsraman, int laserIndex);
	EXPORTED void MMSRaman_getLaserInfo(MMSRAMAN_T c_mmsraman, int laserIndex);
	EXPORTED int MMSRaman_getNumberOfSupportedLasers(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_setNumberOfSupportedLasers(MMSRAMAN_T c_mmsraman, int numberOfSupportedLasers);
	EXPORTED void MMSRaman_setDefaultLaser(MMSRAMAN_T c_mmsraman, int laserIndex);
	EXPORTED int MMSRaman_getDefaultLaser(MMSRAMAN_T c_mmsraman);
	EXPORTED short MMSRaman_isLaserTemperatureRegulation(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_setLaserTemperatureRegulation(MMSRAMAN_T c_mmsraman, short laserTemperatureRegulation);
	EXPORTED void MMSRaman_getLaserTemperatureInfo(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_setLaserTemperatureInfo(MMSRAMAN_T c_mmsraman);
	EXPORTED int MMSRaman_getMinimumLaserSetpoint(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_setMinimumLaserSetpoint(MMSRAMAN_T c_mmsraman, int minimumLaserSetpoint);
	EXPORTED int MMSRaman_getMaximumLaserSetpoint(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_setMaximumLaserSetpoint(MMSRAMAN_T c_mmsraman, int maximumLaserSetpoint);
	EXPORTED void MMSRaman_setLaserPowerInfo(MMSRAMAN_T c_mmsraman, int power);
	EXPORTED int MMSRaman_getLaserPowerInfo(MMSRAMAN_T c_mmsraman);
	EXPORTED short MMSRaman_isLaserPowerRegulation(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_setLaserPowerRegulation(MMSRAMAN_T c_mmsraman, short laserPowerRegulation);
	EXPORTED int MMSRaman_getMinimumLaserPowerSetpoint(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_setMinimumLaserPowerSetpoint(MMSRAMAN_T c_mmsraman, int minimumLaserPowerSetpoint);
	EXPORTED int MMSRaman_getMaximumLaserPowerSetpoint(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_setMaximumLaserPowerSetpoint(MMSRAMAN_T c_mmsraman, int maximumLaserPowerSetpoint);
	EXPORTED void MMSRaman_getCCDTemperatureInfo(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_setCCDTemperatureInfo(MMSRAMAN_T c_mmsraman, short regulation, float setpoint);
	EXPORTED short MMSRaman_isTemperatureRegulation(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_setTemperatureRegulation(MMSRAMAN_T c_mmsraman, short temperatureRegulation);
	EXPORTED float MMSRaman_getCCDSetpoint(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_setCCDSetpoint(MMSRAMAN_T c_mmsraman, float setpoint);
	EXPORTED int MMSRaman_getMinimumCCDSetpoint(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_setMinimumCCDSetpoint(MMSRAMAN_T c_mmsraman, int min);
	EXPORTED int MMSRaman_getMaximumCCDSetpoint(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_setMaximumCCDSetpoint(MMSRAMAN_T c_mmsraman, int max);
	EXPORTED float MMSRaman_getThermistor(MMSRAMAN_T c_mmsraman);
	EXPORTED short MMSRaman_isThermFault(MMSRAMAN_T c_mmsraman);
	EXPORTED short MMSRaman_isTempLock(MMSRAMAN_T c_mmsraman);
	EXPORTED signed char MMSRaman_getShutterState(MMSRAMAN_T c_mmsraman);
	EXPORTED short MMSRaman_isShutterOpen(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_openShutter(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_closeShutter(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_readWavelengthCalibrationCoefficientsFromSpectrometer(MMSRAMAN_T c_mmsraman, COEFFICIENTSARRAY_T retval);
	EXPORTED void MMSRaman_writeWavelengthCoefficientsToSpectrometer(MMSRAMAN_T c_mmsraman, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void MMSRaman_getWavelengthCalibrationCoefficients(MMSRAMAN_T c_mmsraman, COEFFICIENTSARRAY_T retval);
	EXPORTED void MMSRaman_setWavelengthCalibrationCoefficients(MMSRAMAN_T c_mmsraman, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void MMSRaman_getWavelengths(MMSRAMAN_T c_mmsraman, int index, DOUBLEARRAY_T retval);
	EXPORTED void MMSRaman_setWavelengths(MMSRAMAN_T c_mmsraman, DOUBLEARRAY_T wl, int index);
	EXPORTED void MMSRaman_getFirmwareVersion(MMSRAMAN_T c_mmsraman, JSTRING_T retval);
	EXPORTED void MMSRaman_setDSPFirmwareVersion(MMSRAMAN_T c_mmsraman, JSTRING_T dsp);
	EXPORTED void MMSRaman_getDSPFirmwareVersion(MMSRAMAN_T c_mmsraman, JSTRING_T retval);
	EXPORTED void MMSRaman_setFPGAFirmwareVersion(MMSRAMAN_T c_mmsraman, JSTRING_T fpga);
	EXPORTED void MMSRaman_getFPGAFirmwareVersion(MMSRAMAN_T c_mmsraman, JSTRING_T retval);
	EXPORTED void MMSRaman_setUSBFirmwareVersion(MMSRAMAN_T c_mmsraman, JSTRING_T usb);
	EXPORTED void MMSRaman_getUSBFirmwareVersion(MMSRAMAN_T c_mmsraman, JSTRING_T retval);
	EXPORTED void MMSRaman_getSpectrometer(MMSRAMAN_T c_mmsraman, MMSRAMAN_T retval);
	EXPORTED void MMSRaman_setMasterClock(MMSRAMAN_T c_mmsraman, int rate);
	EXPORTED void MMSRaman_getLEDFlashCodes(MMSRAMAN_T c_mmsraman, JSTRINGARRAY_T retval);
	EXPORTED void MMSRaman_toString(MMSRAMAN_T c_mmsraman, JSTRING_T retval);
	EXPORTED void MMSRaman_addExposureListener(MMSRAMAN_T c_mmsraman, EXPOSURELISTENER_T listener);
	EXPORTED void MMSRaman_removeExposureListener(MMSRAMAN_T c_mmsraman, EXPOSURELISTENER_T listener);
	EXPORTED void MMSRaman_getLastExposure(MMSRAMAN_T c_mmsraman, SPECTROMETEREXPOSURE_T retval);
	EXPORTED short MMSRaman_has1DMode(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_set2DMode(MMSRAMAN_T c_mmsraman, int channel);
	EXPORTED void MMSRaman_set1DMode(MMSRAMAN_T c_mmsraman, int channel);
	EXPORTED short MMSRaman_is2DMode(MMSRAMAN_T c_mmsraman);
	EXPORTED short MMSRaman_is1DMode(MMSRAMAN_T c_mmsraman);
	EXPORTED int MMSRaman_get2DintegrationTime(MMSRAMAN_T c_mmsraman);
	EXPORTED void MMSRaman_addIntegrationTimeChangeListener(MMSRAMAN_T c_mmsraman, INTEGRATIONTIMECHANGELISTENER_T listener);
	EXPORTED void MMSRaman_removeIntegrationTimeChangeListener(MMSRAMAN_T c_mmsraman, INTEGRATIONTIMECHANGELISTENER_T listener);
	EXPORTED void MMSRaman_fireIntegrationTimeChanged(MMSRAMAN_T c_mmsraman, int time);
	EXPORTED void MMSRaman_Destroy(MMSRAMAN_T mmsraman);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED MMSRAMAN_T STDCALL MMSRaman_Create_stdcall();
	EXPORTED MMSRAMAN_T STDCALL MMSRaman_Create_stdcall_1(int i);
	EXPORTED void STDCALL MMSRaman_openSpectrometer_stdcall(MMSRAMAN_T c_mmsraman, int index);
	EXPORTED void STDCALL MMSRaman_getGUIFeatures_stdcall(MMSRAMAN_T c_mmsraman, GUIPROVIDERARRAY_T retval);
	EXPORTED void STDCALL MMSRaman_getSerialNumber_stdcall(MMSRAMAN_T c_mmsraman, JSTRING_T retval);
	EXPORTED void STDCALL MMSRaman_getModelNumber_stdcall(MMSRAMAN_T c_mmsraman, JSTRING_T retval);
	EXPORTED void STDCALL MMSRaman_getSpectrometerInfo_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED float STDCALL MMSRaman_getIntegrationTime_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_setIntegrationTime_stdcall(MMSRAMAN_T c_mmsraman, int intTime);
	EXPORTED void STDCALL MMSRaman_getSpectrometerExposure_stdcall(MMSRAMAN_T c_mmsraman, signed char shutter, signed char type, SPECTROMETEREXPOSURE_T retval);
	EXPORTED void STDCALL MMSRaman_startExposure_stdcall(MMSRAMAN_T c_mmsraman, signed char shutter, signed char type);
	EXPORTED short STDCALL MMSRaman_queryExposure_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_getExposure_stdcall(MMSRAMAN_T c_mmsraman, SPECTROMETEREXPOSURE_T retval);
	EXPORTED void STDCALL MMSRaman_endExposure_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_endExposure_stdcall_1(MMSRAMAN_T c_mmsraman, signed char shutterState);
	EXPORTED void STDCALL MMSRaman_getReconstruction_stdcall(MMSRAMAN_T c_mmsraman, signed char type, SPECTROMETERRECONSTRUCTION_T retval);
	EXPORTED void STDCALL MMSRaman_reset_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED signed char STDCALL MMSRaman_getReconstructionType_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_setReconstructionType_stdcall(MMSRAMAN_T c_mmsraman, signed char reconstructionType);
	EXPORTED void STDCALL MMSRaman_getSpectrum_stdcall(MMSRAMAN_T c_mmsraman, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void STDCALL MMSRaman_getDarkExposure_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_getLightExposure_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED int STDCALL MMSRaman_getCcdWidth_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED int STDCALL MMSRaman_getCcdHeight_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED short STDCALL MMSRaman_isExposureInProgress_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_setStrobeEnable_stdcall(MMSRAMAN_T c_mmsraman, short laserOn);
	EXPORTED void STDCALL MMSRaman_readCalibrationFromSpectrometer_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_writeCalibrationToSpectrometer_stdcall(MMSRAMAN_T c_mmsraman, MMSRAMANCALIBRATION_T cal);
	EXPORTED void STDCALL MMSRaman_getCalibration_stdcall(MMSRAMAN_T c_mmsraman, MMSRAMANCALIBRATION_T retval);
	EXPORTED void STDCALL MMSRaman_getLaser_stdcall(MMSRAMAN_T c_mmsraman, int laserIndex, LASER_T retval);
	EXPORTED void STDCALL MMSRaman_getLasers_stdcall(MMSRAMAN_T c_mmsraman, LASERARRAY_T retval);
	EXPORTED void STDCALL MMSRaman_setLasers_stdcall(MMSRAMAN_T c_mmsraman, LASERARRAY_T lasers);
	EXPORTED int STDCALL MMSRaman_getNumberOfEnabledLasers_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_setLaserInfo_stdcall(MMSRAMAN_T c_mmsraman, int laserIndex);
	EXPORTED void STDCALL MMSRaman_getLaserInfo_stdcall(MMSRAMAN_T c_mmsraman, int laserIndex);
	EXPORTED int STDCALL MMSRaman_getNumberOfSupportedLasers_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_setNumberOfSupportedLasers_stdcall(MMSRAMAN_T c_mmsraman, int numberOfSupportedLasers);
	EXPORTED void STDCALL MMSRaman_setDefaultLaser_stdcall(MMSRAMAN_T c_mmsraman, int laserIndex);
	EXPORTED int STDCALL MMSRaman_getDefaultLaser_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED short STDCALL MMSRaman_isLaserTemperatureRegulation_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_setLaserTemperatureRegulation_stdcall(MMSRAMAN_T c_mmsraman, short laserTemperatureRegulation);
	EXPORTED void STDCALL MMSRaman_getLaserTemperatureInfo_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_setLaserTemperatureInfo_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED int STDCALL MMSRaman_getMinimumLaserSetpoint_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_setMinimumLaserSetpoint_stdcall(MMSRAMAN_T c_mmsraman, int minimumLaserSetpoint);
	EXPORTED int STDCALL MMSRaman_getMaximumLaserSetpoint_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_setMaximumLaserSetpoint_stdcall(MMSRAMAN_T c_mmsraman, int maximumLaserSetpoint);
	EXPORTED void STDCALL MMSRaman_setLaserPowerInfo_stdcall(MMSRAMAN_T c_mmsraman, int power);
	EXPORTED int STDCALL MMSRaman_getLaserPowerInfo_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED short STDCALL MMSRaman_isLaserPowerRegulation_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_setLaserPowerRegulation_stdcall(MMSRAMAN_T c_mmsraman, short laserPowerRegulation);
	EXPORTED int STDCALL MMSRaman_getMinimumLaserPowerSetpoint_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_setMinimumLaserPowerSetpoint_stdcall(MMSRAMAN_T c_mmsraman, int minimumLaserPowerSetpoint);
	EXPORTED int STDCALL MMSRaman_getMaximumLaserPowerSetpoint_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_setMaximumLaserPowerSetpoint_stdcall(MMSRAMAN_T c_mmsraman, int maximumLaserPowerSetpoint);
	EXPORTED void STDCALL MMSRaman_getCCDTemperatureInfo_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_setCCDTemperatureInfo_stdcall(MMSRAMAN_T c_mmsraman, short regulation, float setpoint);
	EXPORTED short STDCALL MMSRaman_isTemperatureRegulation_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_setTemperatureRegulation_stdcall(MMSRAMAN_T c_mmsraman, short temperatureRegulation);
	EXPORTED float STDCALL MMSRaman_getCCDSetpoint_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_setCCDSetpoint_stdcall(MMSRAMAN_T c_mmsraman, float setpoint);
	EXPORTED int STDCALL MMSRaman_getMinimumCCDSetpoint_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_setMinimumCCDSetpoint_stdcall(MMSRAMAN_T c_mmsraman, int min);
	EXPORTED int STDCALL MMSRaman_getMaximumCCDSetpoint_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_setMaximumCCDSetpoint_stdcall(MMSRAMAN_T c_mmsraman, int max);
	EXPORTED float STDCALL MMSRaman_getThermistor_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED short STDCALL MMSRaman_isThermFault_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED short STDCALL MMSRaman_isTempLock_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED signed char STDCALL MMSRaman_getShutterState_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED short STDCALL MMSRaman_isShutterOpen_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_openShutter_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_closeShutter_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_readWavelengthCalibrationCoefficientsFromSpectrometer_stdcall(MMSRAMAN_T c_mmsraman, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL MMSRaman_writeWavelengthCoefficientsToSpectrometer_stdcall(MMSRAMAN_T c_mmsraman, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL MMSRaman_getWavelengthCalibrationCoefficients_stdcall(MMSRAMAN_T c_mmsraman, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL MMSRaman_setWavelengthCalibrationCoefficients_stdcall(MMSRAMAN_T c_mmsraman, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL MMSRaman_getWavelengths_stdcall(MMSRAMAN_T c_mmsraman, int index, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL MMSRaman_setWavelengths_stdcall(MMSRAMAN_T c_mmsraman, DOUBLEARRAY_T wl, int index);
	EXPORTED void STDCALL MMSRaman_getFirmwareVersion_stdcall(MMSRAMAN_T c_mmsraman, JSTRING_T retval);
	EXPORTED void STDCALL MMSRaman_setDSPFirmwareVersion_stdcall(MMSRAMAN_T c_mmsraman, JSTRING_T dsp);
	EXPORTED void STDCALL MMSRaman_getDSPFirmwareVersion_stdcall(MMSRAMAN_T c_mmsraman, JSTRING_T retval);
	EXPORTED void STDCALL MMSRaman_setFPGAFirmwareVersion_stdcall(MMSRAMAN_T c_mmsraman, JSTRING_T fpga);
	EXPORTED void STDCALL MMSRaman_getFPGAFirmwareVersion_stdcall(MMSRAMAN_T c_mmsraman, JSTRING_T retval);
	EXPORTED void STDCALL MMSRaman_setUSBFirmwareVersion_stdcall(MMSRAMAN_T c_mmsraman, JSTRING_T usb);
	EXPORTED void STDCALL MMSRaman_getUSBFirmwareVersion_stdcall(MMSRAMAN_T c_mmsraman, JSTRING_T retval);
	EXPORTED void STDCALL MMSRaman_getSpectrometer_stdcall(MMSRAMAN_T c_mmsraman, MMSRAMAN_T retval);
	EXPORTED void STDCALL MMSRaman_setMasterClock_stdcall(MMSRAMAN_T c_mmsraman, int rate);
	EXPORTED void STDCALL MMSRaman_getLEDFlashCodes_stdcall(MMSRAMAN_T c_mmsraman, JSTRINGARRAY_T retval);
	EXPORTED void STDCALL MMSRaman_toString_stdcall(MMSRAMAN_T c_mmsraman, JSTRING_T retval);
	EXPORTED void STDCALL MMSRaman_addExposureListener_stdcall(MMSRAMAN_T c_mmsraman, EXPOSURELISTENER_T listener);
	EXPORTED void STDCALL MMSRaman_removeExposureListener_stdcall(MMSRAMAN_T c_mmsraman, EXPOSURELISTENER_T listener);
	EXPORTED void STDCALL MMSRaman_getLastExposure_stdcall(MMSRAMAN_T c_mmsraman, SPECTROMETEREXPOSURE_T retval);
	EXPORTED short STDCALL MMSRaman_has1DMode_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_set2DMode_stdcall(MMSRAMAN_T c_mmsraman, int channel);
	EXPORTED void STDCALL MMSRaman_set1DMode_stdcall(MMSRAMAN_T c_mmsraman, int channel);
	EXPORTED short STDCALL MMSRaman_is2DMode_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED short STDCALL MMSRaman_is1DMode_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED int STDCALL MMSRaman_get2DintegrationTime_stdcall(MMSRAMAN_T c_mmsraman);
	EXPORTED void STDCALL MMSRaman_addIntegrationTimeChangeListener_stdcall(MMSRAMAN_T c_mmsraman, INTEGRATIONTIMECHANGELISTENER_T listener);
	EXPORTED void STDCALL MMSRaman_removeIntegrationTimeChangeListener_stdcall(MMSRAMAN_T c_mmsraman, INTEGRATIONTIMECHANGELISTENER_T listener);
	EXPORTED void STDCALL MMSRaman_fireIntegrationTimeChanged_stdcall(MMSRAMAN_T c_mmsraman, int time);
	EXPORTED void STDCALL MMSRaman_Destroy_stdcall(MMSRAMAN_T mmsraman);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* MMSRAMAN_H */
