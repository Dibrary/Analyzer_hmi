/**
 * File: SaturationThresholdImpl.h
 * Autogenerated on Fri Mar 23 13:38:39 EDT 2018 based on
 * SaturationThresholdImpl.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/saturationthreshold/SaturationThresholdImpl
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef SATURATIONTHRESHOLDIMPL_H
#define SATURATIONTHRESHOLDIMPL_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBFeature.h"
#include "USBSpectrometer.h"
#include "USBInterface.h"
#include "JString.h"
#include "JStringArray.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBFeature;
class USBSpectrometer;
class USBInterface;
class JString;
class JStringArray;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED SaturationThresholdImpl : public USBFeature // CPPClass.tag001
{
public: 
	SaturationThresholdImpl(USBSpectrometer& parentSpectrometer, USBInterface& usbInt);
	int getSaturationThreshold();
	void setSaturationThreshold(int newSaturationThreshold, JString& key);
	int readSaturationThresholdFromSpectrometer();
	void writeSaturationThresholdToSpectrometer(JString& key);
	JStringArray getFeatureGUIClassnames();
	~SaturationThresholdImpl();
	// No public default Java constructor; creating one:
	SaturationThresholdImpl();
	// No public Java copy constructor; creating one:
	SaturationThresholdImpl(const SaturationThresholdImpl &that);
	// Creating assignment operator declaration:
	SaturationThresholdImpl &operator=(const SaturationThresholdImpl &that);

private:
	jmethodID mid_SaturationThresholdImpl1974;
	jmethodID mid_getSaturationThreshold1975;
	jmethodID mid_setSaturationThreshold1976;
	jmethodID mid_readSaturationThresholdFromSpectrometer1977;
	jmethodID mid_writeSaturationThresholdToSpectrometer1978;
	jmethodID mid_getFeatureGUIClassnames1979;
	jfieldID fid_dataOutEndPoint;
	jfieldID fid_lowSpeedInEndPoint;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBFEATURE_T
#define EXTERN_TYPEDEF_USBFEATURE_T
	typedef void* USBFEATURE_T;
#endif /* EXTERN_TYPEDEF_USBFEATURE_T */
#ifndef EXTERN_TYPEDEF_USBSPECTROMETER_T
#define EXTERN_TYPEDEF_USBSPECTROMETER_T
	typedef void* USBSPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_USBSPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_JSTRINGARRAY_T
#define EXTERN_TYPEDEF_JSTRINGARRAY_T
	typedef void* JSTRINGARRAY_T;
#endif /* EXTERN_TYPEDEF_JSTRINGARRAY_T */
#ifndef EXTERN_TYPEDEF_SATURATIONTHRESHOLDIMPL_T
#define EXTERN_TYPEDEF_SATURATIONTHRESHOLDIMPL_T
	typedef void* SATURATIONTHRESHOLDIMPL_T;
#endif /* EXTERN_TYPEDEF_SATURATIONTHRESHOLDIMPL_T */

	// No public default Java constructor; creating one:
	EXPORTED SATURATIONTHRESHOLDIMPL_T SaturationThresholdImpl_Create();
	EXPORTED SATURATIONTHRESHOLDIMPL_T SaturationThresholdImpl_Create_1(USBSPECTROMETER_T parentSpectrometer, USBINTERFACE_T usbInt);
	EXPORTED int SaturationThresholdImpl_getSaturationThreshold(SATURATIONTHRESHOLDIMPL_T c_saturation_threshold_impl);
	EXPORTED void SaturationThresholdImpl_setSaturationThreshold(SATURATIONTHRESHOLDIMPL_T c_saturation_threshold_impl, int newSaturationThreshold, JSTRING_T key);
	EXPORTED int SaturationThresholdImpl_readSaturationThresholdFromSpectrometer(SATURATIONTHRESHOLDIMPL_T c_saturation_threshold_impl);
	EXPORTED void SaturationThresholdImpl_writeSaturationThresholdToSpectrometer(SATURATIONTHRESHOLDIMPL_T c_saturation_threshold_impl, JSTRING_T key);
	EXPORTED void SaturationThresholdImpl_getFeatureGUIClassnames(SATURATIONTHRESHOLDIMPL_T c_saturation_threshold_impl, JSTRINGARRAY_T retval);
	EXPORTED void SaturationThresholdImpl_Destroy(SATURATIONTHRESHOLDIMPL_T saturation_threshold_impl);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED SATURATIONTHRESHOLDIMPL_T STDCALL SaturationThresholdImpl_Create_stdcall_1(USBSPECTROMETER_T parentSpectrometer, USBINTERFACE_T usbInt);
	EXPORTED int STDCALL SaturationThresholdImpl_getSaturationThreshold_stdcall(SATURATIONTHRESHOLDIMPL_T c_saturation_threshold_impl);
	EXPORTED void STDCALL SaturationThresholdImpl_setSaturationThreshold_stdcall(SATURATIONTHRESHOLDIMPL_T c_saturation_threshold_impl, int newSaturationThreshold, JSTRING_T key);
	EXPORTED int STDCALL SaturationThresholdImpl_readSaturationThresholdFromSpectrometer_stdcall(SATURATIONTHRESHOLDIMPL_T c_saturation_threshold_impl);
	EXPORTED void STDCALL SaturationThresholdImpl_writeSaturationThresholdToSpectrometer_stdcall(SATURATIONTHRESHOLDIMPL_T c_saturation_threshold_impl, JSTRING_T key);
	EXPORTED void STDCALL SaturationThresholdImpl_getFeatureGUIClassnames_stdcall(SATURATIONTHRESHOLDIMPL_T c_saturation_threshold_impl, JSTRINGARRAY_T retval);
	EXPORTED void STDCALL SaturationThresholdImpl_Destroy_stdcall(SATURATIONTHRESHOLDIMPL_T saturation_threshold_impl);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* SATURATIONTHRESHOLDIMPL_H */
