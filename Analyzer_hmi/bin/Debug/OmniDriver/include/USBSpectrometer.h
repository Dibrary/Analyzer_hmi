/**
 * File: USBSpectrometer.h
 * Autogenerated on Fri Mar 23 13:38:47 EDT 2018 based on
 * USBSpectrometer.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/USBSpectrometer
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef USBSPECTROMETER_H
#define USBSPECTROMETER_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "Spectrometer.h"
#include "USBSpectrometerArray.h"
#include "JString.h"
#include "Spectrum.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class Spectrometer;
class USBSpectrometerArray;
class JString;
class Spectrum;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED USBSpectrometer : public Spectrometer // CPPClass.tag001
{
public: 
	USBSpectrometer(short driver);
	CharArray getInputBuffer();
	CharArray getOutputBuffer();
	void openNextUnclaimed();
	void openNextUnclaimedUSB();
	USBSpectrometerArray getOpenSpectrometersOfThisType();
	void initialize();
	CharArray readRawUSB(int inEP, int length);
	int writeRawUSB(int outEP, CharArray& message, int length);
	void setIntegrationTime(int intTime);
	int setTimeout(int timeoutMilliseconds);
	void setStrobeEnable(short strobe);
	void setStrobeDelay(int delay);
	void setPowerState(short power);
	JString getInfo(int slot);
	void setInfo(int slot, JString& str);
	CharArray getInfoBytes(int slot);
	void setInfoBytes(int slot, CharArray& byteArray);
	JString getSerialNumber();
	void setSerialNumber(JString& serialNumber);
	CharArray getStatusArray();
	int getDeviceIndex();
	void closeSpectrometer();
	JString getFirmwareVersion();
	Spectrum getSpectrum(Spectrum& spectrum);
	Spectrum getSpectrumRaw(Spectrum& spectrum);
	short initiateSpectrumAcquisition();
	Spectrum getAcquiredSpectrum(Spectrum& spectrum);
	JString getName();
	JString getClassName();
	int getNumberOfPixels(int index);
	int getNumberOfDarkPixels(int index);
	int getNumberOfDarkCCDPixels();
	int getNumberOfCCDPixels();
	void sendSimulatedTriggerSignal();
	void close();
	short isCommunicatingSuccessfully();
	JString testSpectrometerCommunication();
	short isTimeout();
	JString toString();
	~USBSpectrometer();
	// No public default Java constructor; creating one:
	USBSpectrometer();
	// No public Java copy constructor; creating one:
	USBSpectrometer(const USBSpectrometer &that);
	// Creating assignment operator declaration:
	USBSpectrometer &operator=(const USBSpectrometer &that);

private:
	jmethodID mid_USBSpectrometer3055;
	jmethodID mid_getInputBuffer3056;
	jmethodID mid_getOutputBuffer3057;
	jmethodID mid_openNextUnclaimed3058;
	jmethodID mid_openNextUnclaimedUSB3059;
	jmethodID mid_getOpenSpectrometersOfThisType3060;
	jmethodID mid_initialize3061;
	jmethodID mid_readRawUSB3062;
	jmethodID mid_writeRawUSB3063;
	jmethodID mid_setIntegrationTime3064;
	jmethodID mid_setTimeout3065;
	jmethodID mid_setStrobeEnable3066;
	jmethodID mid_setStrobeDelay3067;
	jmethodID mid_setPowerState3068;
	jmethodID mid_getInfo3069;
	jmethodID mid_setInfo3070;
	jmethodID mid_getInfoBytes3071;
	jmethodID mid_setInfoBytes3072;
	jmethodID mid_getSerialNumber3073;
	jmethodID mid_setSerialNumber3074;
	jmethodID mid_getStatusArray3075;
	jmethodID mid_getDeviceIndex3076;
	jmethodID mid_closeSpectrometer3077;
	jmethodID mid_getFirmwareVersion3078;
	jmethodID mid_getSpectrum3079;
	jmethodID mid_getSpectrumRaw3080;
	jmethodID mid_initiateSpectrumAcquisition3081;
	jmethodID mid_getAcquiredSpectrum3082;
	jmethodID mid_getName3083;
	jmethodID mid_getClassName3084;
	jmethodID mid_getNumberOfPixels3085;
	jmethodID mid_getNumberOfDarkPixels3086;
	jmethodID mid_getNumberOfDarkCCDPixels3087;
	jmethodID mid_getNumberOfCCDPixels3088;
	jmethodID mid_sendSimulatedTriggerSignal3089;
	jmethodID mid_close3090;
	jmethodID mid_isCommunicatingSuccessfully3091;
	jmethodID mid_testSpectrometerCommunication3092;
	jmethodID mid_isTimeout3093;
	jmethodID mid_toString3094;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_SPECTROMETER_T
#define EXTERN_TYPEDEF_SPECTROMETER_T
	typedef void* SPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_USBSPECTROMETERARRAY_T
#define EXTERN_TYPEDEF_USBSPECTROMETERARRAY_T
	typedef void* USBSPECTROMETERARRAY_T;
#endif /* EXTERN_TYPEDEF_USBSPECTROMETERARRAY_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_SPECTRUM_T
#define EXTERN_TYPEDEF_SPECTRUM_T
	typedef void* SPECTRUM_T;
#endif /* EXTERN_TYPEDEF_SPECTRUM_T */
#ifndef EXTERN_TYPEDEF_USBSPECTROMETER_T
#define EXTERN_TYPEDEF_USBSPECTROMETER_T
	typedef void* USBSPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_USBSPECTROMETER_T */

	// No public default Java constructor; creating one:
	EXPORTED USBSPECTROMETER_T USBSpectrometer_Create();
	EXPORTED USBSPECTROMETER_T USBSpectrometer_Create_1(short driver);
	EXPORTED void USBSpectrometer_getInputBuffer(USBSPECTROMETER_T c_usbspectrometer, CHARARRAY_T retval);
	EXPORTED void USBSpectrometer_getOutputBuffer(USBSPECTROMETER_T c_usbspectrometer, CHARARRAY_T retval);
	EXPORTED void USBSpectrometer_openNextUnclaimed(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED void USBSpectrometer_openNextUnclaimedUSB(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED void USBSpectrometer_getOpenSpectrometersOfThisType(USBSPECTROMETER_T c_usbspectrometer, USBSPECTROMETERARRAY_T retval);
	EXPORTED void USBSpectrometer_initialize(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED void USBSpectrometer_readRawUSB(USBSPECTROMETER_T c_usbspectrometer, int inEP, int length, CHARARRAY_T retval);
	EXPORTED int USBSpectrometer_writeRawUSB(USBSPECTROMETER_T c_usbspectrometer, int outEP, CHARARRAY_T message, int length);
	EXPORTED void USBSpectrometer_setIntegrationTime(USBSPECTROMETER_T c_usbspectrometer, int intTime);
	EXPORTED int USBSpectrometer_setTimeout(USBSPECTROMETER_T c_usbspectrometer, int timeoutMilliseconds);
	EXPORTED void USBSpectrometer_setStrobeEnable(USBSPECTROMETER_T c_usbspectrometer, short strobe);
	EXPORTED void USBSpectrometer_setStrobeDelay(USBSPECTROMETER_T c_usbspectrometer, int delay);
	EXPORTED void USBSpectrometer_setPowerState(USBSPECTROMETER_T c_usbspectrometer, short power);
	EXPORTED void USBSpectrometer_getInfo(USBSPECTROMETER_T c_usbspectrometer, int slot, JSTRING_T retval);
	EXPORTED void USBSpectrometer_setInfo(USBSPECTROMETER_T c_usbspectrometer, int slot, JSTRING_T str);
	EXPORTED void USBSpectrometer_getInfoBytes(USBSPECTROMETER_T c_usbspectrometer, int slot, CHARARRAY_T retval);
	EXPORTED void USBSpectrometer_setInfoBytes(USBSPECTROMETER_T c_usbspectrometer, int slot, CHARARRAY_T byteArray);
	EXPORTED void USBSpectrometer_getSerialNumber(USBSPECTROMETER_T c_usbspectrometer, JSTRING_T retval);
	EXPORTED void USBSpectrometer_setSerialNumber(USBSPECTROMETER_T c_usbspectrometer, JSTRING_T serialNumber);
	EXPORTED void USBSpectrometer_getStatusArray(USBSPECTROMETER_T c_usbspectrometer, CHARARRAY_T retval);
	EXPORTED int USBSpectrometer_getDeviceIndex(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED void USBSpectrometer_closeSpectrometer(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED void USBSpectrometer_getFirmwareVersion(USBSPECTROMETER_T c_usbspectrometer, JSTRING_T retval);
	EXPORTED void USBSpectrometer_getSpectrum(USBSPECTROMETER_T c_usbspectrometer, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void USBSpectrometer_getSpectrumRaw(USBSPECTROMETER_T c_usbspectrometer, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED short USBSpectrometer_initiateSpectrumAcquisition(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED void USBSpectrometer_getAcquiredSpectrum(USBSPECTROMETER_T c_usbspectrometer, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void USBSpectrometer_getName(USBSPECTROMETER_T c_usbspectrometer, JSTRING_T retval);
	EXPORTED void USBSpectrometer_getClassName(USBSPECTROMETER_T c_usbspectrometer, JSTRING_T retval);
	EXPORTED int USBSpectrometer_getNumberOfPixels(USBSPECTROMETER_T c_usbspectrometer, int index);
	EXPORTED int USBSpectrometer_getNumberOfDarkPixels(USBSPECTROMETER_T c_usbspectrometer, int index);
	EXPORTED int USBSpectrometer_getNumberOfDarkCCDPixels(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED int USBSpectrometer_getNumberOfCCDPixels(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED void USBSpectrometer_sendSimulatedTriggerSignal(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED void USBSpectrometer_close(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED short USBSpectrometer_isCommunicatingSuccessfully(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED void USBSpectrometer_testSpectrometerCommunication(USBSPECTROMETER_T c_usbspectrometer, JSTRING_T retval);
	EXPORTED short USBSpectrometer_isTimeout(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED void USBSpectrometer_toString(USBSPECTROMETER_T c_usbspectrometer, JSTRING_T retval);
	EXPORTED void USBSpectrometer_Destroy(USBSPECTROMETER_T usbspectrometer);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED USBSPECTROMETER_T STDCALL USBSpectrometer_Create_stdcall_1(short driver);
	EXPORTED void STDCALL USBSpectrometer_getInputBuffer_stdcall(USBSPECTROMETER_T c_usbspectrometer, CHARARRAY_T retval);
	EXPORTED void STDCALL USBSpectrometer_getOutputBuffer_stdcall(USBSPECTROMETER_T c_usbspectrometer, CHARARRAY_T retval);
	EXPORTED void STDCALL USBSpectrometer_openNextUnclaimed_stdcall(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED void STDCALL USBSpectrometer_openNextUnclaimedUSB_stdcall(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED void STDCALL USBSpectrometer_getOpenSpectrometersOfThisType_stdcall(USBSPECTROMETER_T c_usbspectrometer, USBSPECTROMETERARRAY_T retval);
	EXPORTED void STDCALL USBSpectrometer_initialize_stdcall(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED void STDCALL USBSpectrometer_readRawUSB_stdcall(USBSPECTROMETER_T c_usbspectrometer, int inEP, int length, CHARARRAY_T retval);
	EXPORTED int STDCALL USBSpectrometer_writeRawUSB_stdcall(USBSPECTROMETER_T c_usbspectrometer, int outEP, CHARARRAY_T message, int length);
	EXPORTED void STDCALL USBSpectrometer_setIntegrationTime_stdcall(USBSPECTROMETER_T c_usbspectrometer, int intTime);
	EXPORTED int STDCALL USBSpectrometer_setTimeout_stdcall(USBSPECTROMETER_T c_usbspectrometer, int timeoutMilliseconds);
	EXPORTED void STDCALL USBSpectrometer_setStrobeEnable_stdcall(USBSPECTROMETER_T c_usbspectrometer, short strobe);
	EXPORTED void STDCALL USBSpectrometer_setStrobeDelay_stdcall(USBSPECTROMETER_T c_usbspectrometer, int delay);
	EXPORTED void STDCALL USBSpectrometer_setPowerState_stdcall(USBSPECTROMETER_T c_usbspectrometer, short power);
	EXPORTED void STDCALL USBSpectrometer_getInfo_stdcall(USBSPECTROMETER_T c_usbspectrometer, int slot, JSTRING_T retval);
	EXPORTED void STDCALL USBSpectrometer_setInfo_stdcall(USBSPECTROMETER_T c_usbspectrometer, int slot, JSTRING_T str);
	EXPORTED void STDCALL USBSpectrometer_getInfoBytes_stdcall(USBSPECTROMETER_T c_usbspectrometer, int slot, CHARARRAY_T retval);
	EXPORTED void STDCALL USBSpectrometer_setInfoBytes_stdcall(USBSPECTROMETER_T c_usbspectrometer, int slot, CHARARRAY_T byteArray);
	EXPORTED void STDCALL USBSpectrometer_getSerialNumber_stdcall(USBSPECTROMETER_T c_usbspectrometer, JSTRING_T retval);
	EXPORTED void STDCALL USBSpectrometer_setSerialNumber_stdcall(USBSPECTROMETER_T c_usbspectrometer, JSTRING_T serialNumber);
	EXPORTED void STDCALL USBSpectrometer_getStatusArray_stdcall(USBSPECTROMETER_T c_usbspectrometer, CHARARRAY_T retval);
	EXPORTED int STDCALL USBSpectrometer_getDeviceIndex_stdcall(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED void STDCALL USBSpectrometer_closeSpectrometer_stdcall(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED void STDCALL USBSpectrometer_getFirmwareVersion_stdcall(USBSPECTROMETER_T c_usbspectrometer, JSTRING_T retval);
	EXPORTED void STDCALL USBSpectrometer_getSpectrum_stdcall(USBSPECTROMETER_T c_usbspectrometer, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void STDCALL USBSpectrometer_getSpectrumRaw_stdcall(USBSPECTROMETER_T c_usbspectrometer, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED short STDCALL USBSpectrometer_initiateSpectrumAcquisition_stdcall(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED void STDCALL USBSpectrometer_getAcquiredSpectrum_stdcall(USBSPECTROMETER_T c_usbspectrometer, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void STDCALL USBSpectrometer_getName_stdcall(USBSPECTROMETER_T c_usbspectrometer, JSTRING_T retval);
	EXPORTED void STDCALL USBSpectrometer_getClassName_stdcall(USBSPECTROMETER_T c_usbspectrometer, JSTRING_T retval);
	EXPORTED int STDCALL USBSpectrometer_getNumberOfPixels_stdcall(USBSPECTROMETER_T c_usbspectrometer, int index);
	EXPORTED int STDCALL USBSpectrometer_getNumberOfDarkPixels_stdcall(USBSPECTROMETER_T c_usbspectrometer, int index);
	EXPORTED int STDCALL USBSpectrometer_getNumberOfDarkCCDPixels_stdcall(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED int STDCALL USBSpectrometer_getNumberOfCCDPixels_stdcall(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED void STDCALL USBSpectrometer_sendSimulatedTriggerSignal_stdcall(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED void STDCALL USBSpectrometer_close_stdcall(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED short STDCALL USBSpectrometer_isCommunicatingSuccessfully_stdcall(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED void STDCALL USBSpectrometer_testSpectrometerCommunication_stdcall(USBSPECTROMETER_T c_usbspectrometer, JSTRING_T retval);
	EXPORTED short STDCALL USBSpectrometer_isTimeout_stdcall(USBSPECTROMETER_T c_usbspectrometer);
	EXPORTED void STDCALL USBSpectrometer_toString_stdcall(USBSPECTROMETER_T c_usbspectrometer, JSTRING_T retval);
	EXPORTED void STDCALL USBSpectrometer_Destroy_stdcall(USBSPECTROMETER_T usbspectrometer);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* USBSPECTROMETER_H */
