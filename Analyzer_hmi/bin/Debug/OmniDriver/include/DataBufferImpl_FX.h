/**
 * File: DataBufferImpl_FX.h
 * Autogenerated on Fri Mar 23 13:38:31 EDT 2018 based on
 * DataBufferImpl_FX.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/buffer/DataBufferImpl_FX
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef DATABUFFERIMPL_FX_H
#define DATABUFFERIMPL_FX_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "DataBufferImpl.h"
#include "OceanBinaryProtocolProvider.h"
#include "USBInterface.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class DataBufferImpl;
class OceanBinaryProtocolProvider;
class USBInterface;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED DataBufferImpl_FX : public DataBufferImpl // CPPClass.tag001
{
public: 
	DataBufferImpl_FX(OceanBinaryProtocolProvider& bn, USBInterface& usbInt);
	void clearBuffer();
	int getBufferCapacity();
	int getBufferCapacityMaximum();
	int getBufferCapacityMinimum();
	int getNumberOfElements();
	void setBufferCapacity(int bufferSize);
	void abortAcquisition();
	void startAcquisition();
	void enableBuffer(short value);
	short isEnableBuffer();
	~DataBufferImpl_FX();
	// No public default Java constructor; creating one:
	DataBufferImpl_FX();
	// No public Java copy constructor; creating one:
	DataBufferImpl_FX(const DataBufferImpl_FX &that);
	// Creating assignment operator declaration:
	DataBufferImpl_FX &operator=(const DataBufferImpl_FX &that);

private:
	jmethodID mid_DataBufferImpl_FX969;
	jmethodID mid_clearBuffer970;
	jmethodID mid_getBufferCapacity971;
	jmethodID mid_getBufferCapacityMaximum972;
	jmethodID mid_getBufferCapacityMinimum973;
	jmethodID mid_getNumberOfElements974;
	jmethodID mid_setBufferCapacity975;
	jmethodID mid_abortAcquisition976;
	jmethodID mid_startAcquisition977;
	jmethodID mid_enableBuffer978;
	jmethodID mid_isEnableBuffer979;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_DATABUFFERIMPL_T
#define EXTERN_TYPEDEF_DATABUFFERIMPL_T
	typedef void* DATABUFFERIMPL_T;
#endif /* EXTERN_TYPEDEF_DATABUFFERIMPL_T */
#ifndef EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T
#define EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T
	typedef void* OCEANBINARYPROTOCOLPROVIDER_T;
#endif /* EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_DATABUFFERIMPL_FX_T
#define EXTERN_TYPEDEF_DATABUFFERIMPL_FX_T
	typedef void* DATABUFFERIMPL_FX_T;
#endif /* EXTERN_TYPEDEF_DATABUFFERIMPL_FX_T */

	// No public default Java constructor; creating one:
	EXPORTED DATABUFFERIMPL_FX_T DataBufferImpl_FX_Create();
	EXPORTED DATABUFFERIMPL_FX_T DataBufferImpl_FX_Create_1(OCEANBINARYPROTOCOLPROVIDER_T bn, USBINTERFACE_T usbInt);
	EXPORTED void DataBufferImpl_FX_clearBuffer(DATABUFFERIMPL_FX_T c_data_buffer_impl_f_x);
	EXPORTED int DataBufferImpl_FX_getBufferCapacity(DATABUFFERIMPL_FX_T c_data_buffer_impl_f_x);
	EXPORTED int DataBufferImpl_FX_getBufferCapacityMaximum(DATABUFFERIMPL_FX_T c_data_buffer_impl_f_x);
	EXPORTED int DataBufferImpl_FX_getBufferCapacityMinimum(DATABUFFERIMPL_FX_T c_data_buffer_impl_f_x);
	EXPORTED int DataBufferImpl_FX_getNumberOfElements(DATABUFFERIMPL_FX_T c_data_buffer_impl_f_x);
	EXPORTED void DataBufferImpl_FX_setBufferCapacity(DATABUFFERIMPL_FX_T c_data_buffer_impl_f_x, int bufferSize);
	EXPORTED void DataBufferImpl_FX_abortAcquisition(DATABUFFERIMPL_FX_T c_data_buffer_impl_f_x);
	EXPORTED void DataBufferImpl_FX_startAcquisition(DATABUFFERIMPL_FX_T c_data_buffer_impl_f_x);
	EXPORTED void DataBufferImpl_FX_enableBuffer(DATABUFFERIMPL_FX_T c_data_buffer_impl_f_x, short value);
	EXPORTED short DataBufferImpl_FX_isEnableBuffer(DATABUFFERIMPL_FX_T c_data_buffer_impl_f_x);
	EXPORTED void DataBufferImpl_FX_Destroy(DATABUFFERIMPL_FX_T data_buffer_impl_f_x);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED DATABUFFERIMPL_FX_T STDCALL DataBufferImpl_FX_Create_stdcall_1(OCEANBINARYPROTOCOLPROVIDER_T bn, USBINTERFACE_T usbInt);
	EXPORTED void STDCALL DataBufferImpl_FX_clearBuffer_stdcall(DATABUFFERIMPL_FX_T c_data_buffer_impl_f_x);
	EXPORTED int STDCALL DataBufferImpl_FX_getBufferCapacity_stdcall(DATABUFFERIMPL_FX_T c_data_buffer_impl_f_x);
	EXPORTED int STDCALL DataBufferImpl_FX_getBufferCapacityMaximum_stdcall(DATABUFFERIMPL_FX_T c_data_buffer_impl_f_x);
	EXPORTED int STDCALL DataBufferImpl_FX_getBufferCapacityMinimum_stdcall(DATABUFFERIMPL_FX_T c_data_buffer_impl_f_x);
	EXPORTED int STDCALL DataBufferImpl_FX_getNumberOfElements_stdcall(DATABUFFERIMPL_FX_T c_data_buffer_impl_f_x);
	EXPORTED void STDCALL DataBufferImpl_FX_setBufferCapacity_stdcall(DATABUFFERIMPL_FX_T c_data_buffer_impl_f_x, int bufferSize);
	EXPORTED void STDCALL DataBufferImpl_FX_abortAcquisition_stdcall(DATABUFFERIMPL_FX_T c_data_buffer_impl_f_x);
	EXPORTED void STDCALL DataBufferImpl_FX_startAcquisition_stdcall(DATABUFFERIMPL_FX_T c_data_buffer_impl_f_x);
	EXPORTED void STDCALL DataBufferImpl_FX_enableBuffer_stdcall(DATABUFFERIMPL_FX_T c_data_buffer_impl_f_x, short value);
	EXPORTED short STDCALL DataBufferImpl_FX_isEnableBuffer_stdcall(DATABUFFERIMPL_FX_T c_data_buffer_impl_f_x);
	EXPORTED void STDCALL DataBufferImpl_FX_Destroy_stdcall(DATABUFFERIMPL_FX_T data_buffer_impl_f_x);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* DATABUFFERIMPL_FX_H */
