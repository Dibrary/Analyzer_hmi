/**
 * File: ContinuousStrobeImpl_STSBase.h
 * Autogenerated on Fri Mar 23 13:38:32 EDT 2018 based on
 * ContinuousStrobeImpl_STSBase.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/continuousstrobe/ContinuousStrobeImpl_STSBase
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef CONTINUOUSSTROBEIMPL_STSBASE_H
#define CONTINUOUSSTROBEIMPL_STSBASE_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "ContinuousStrobeImpl_OBP.h"
#include "STSBase.h"
#include "USBInterface.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class ContinuousStrobeImpl_OBP;
class STSBase;
class USBInterface;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED ContinuousStrobeImpl_STSBase : public ContinuousStrobeImpl_OBP // CPPClass.tag001
{
public: 
	ContinuousStrobeImpl_STSBase(STSBase& sts, USBInterface& usbInt);
	int getContinuousStrobeDelayMinimum();
	int getContinuousStrobeDelayMaximum();
	int getContinuousStrobeDelayIncrement(int magnitude);
	double continuousStrobeCountsToMicros(int counts);
	void setContinuousModeType(short mode);
	short getContinuousModeType();
	void setDelayAfterIntegration(int delay);
	int getDelayAfterIntegration();
	void setContinuousEnable(short value);
	short getContinuousEnable();
	~ContinuousStrobeImpl_STSBase();
	// No public default Java constructor; creating one:
	ContinuousStrobeImpl_STSBase();
	// No public Java copy constructor; creating one:
	ContinuousStrobeImpl_STSBase(const ContinuousStrobeImpl_STSBase &that);
	// Creating assignment operator declaration:
	ContinuousStrobeImpl_STSBase &operator=(const ContinuousStrobeImpl_STSBase &that);
	int PERIOD_MINIMUM_USEC;
	int PERIOD_MAXIMUM_USEC;
	int PERIOD_INCREMENT_USEC;
	int COUNTS_PER_USEC;

private:
	jmethodID mid_ContinuousStrobeImpl_STSBase1103;
	jmethodID mid_getContinuousStrobeDelayMinimum1104;
	jmethodID mid_getContinuousStrobeDelayMaximum1105;
	jmethodID mid_getContinuousStrobeDelayIncrement1106;
	jmethodID mid_continuousStrobeCountsToMicros1107;
	jmethodID mid_setContinuousModeType1108;
	jmethodID mid_getContinuousModeType1109;
	jmethodID mid_setDelayAfterIntegration1110;
	jmethodID mid_getDelayAfterIntegration1111;
	jmethodID mid_setContinuousEnable1112;
	jmethodID mid_getContinuousEnable1113;
	jfieldID fid_PERIOD_MINIMUM_USEC;
	jfieldID fid_PERIOD_MAXIMUM_USEC;
	jfieldID fid_PERIOD_INCREMENT_USEC;
	jfieldID fid_COUNTS_PER_USEC;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_CONTINUOUSSTROBEIMPL_OBP_T
#define EXTERN_TYPEDEF_CONTINUOUSSTROBEIMPL_OBP_T
	typedef void* CONTINUOUSSTROBEIMPL_OBP_T;
#endif /* EXTERN_TYPEDEF_CONTINUOUSSTROBEIMPL_OBP_T */
#ifndef EXTERN_TYPEDEF_STSBASE_T
#define EXTERN_TYPEDEF_STSBASE_T
	typedef void* STSBASE_T;
#endif /* EXTERN_TYPEDEF_STSBASE_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_CONTINUOUSSTROBEIMPL_STSBASE_T
#define EXTERN_TYPEDEF_CONTINUOUSSTROBEIMPL_STSBASE_T
	typedef void* CONTINUOUSSTROBEIMPL_STSBASE_T;
#endif /* EXTERN_TYPEDEF_CONTINUOUSSTROBEIMPL_STSBASE_T */

	// No public default Java constructor; creating one:
	EXPORTED CONTINUOUSSTROBEIMPL_STSBASE_T ContinuousStrobeImpl_STSBase_Create();
	EXPORTED CONTINUOUSSTROBEIMPL_STSBASE_T ContinuousStrobeImpl_STSBase_Create_1(STSBASE_T sts, USBINTERFACE_T usbInt);
	EXPORTED int ContinuousStrobeImpl_STSBase_getContinuousStrobeDelayMinimum(CONTINUOUSSTROBEIMPL_STSBASE_T c_continuous_strobe_impl_s_t_s_base);
	EXPORTED int ContinuousStrobeImpl_STSBase_getContinuousStrobeDelayMaximum(CONTINUOUSSTROBEIMPL_STSBASE_T c_continuous_strobe_impl_s_t_s_base);
	EXPORTED int ContinuousStrobeImpl_STSBase_getContinuousStrobeDelayIncrement(CONTINUOUSSTROBEIMPL_STSBASE_T c_continuous_strobe_impl_s_t_s_base, int magnitude);
	EXPORTED double ContinuousStrobeImpl_STSBase_continuousStrobeCountsToMicros(CONTINUOUSSTROBEIMPL_STSBASE_T c_continuous_strobe_impl_s_t_s_base, int counts);
	EXPORTED void ContinuousStrobeImpl_STSBase_setContinuousModeType(CONTINUOUSSTROBEIMPL_STSBASE_T c_continuous_strobe_impl_s_t_s_base, short mode);
	EXPORTED short ContinuousStrobeImpl_STSBase_getContinuousModeType(CONTINUOUSSTROBEIMPL_STSBASE_T c_continuous_strobe_impl_s_t_s_base);
	EXPORTED void ContinuousStrobeImpl_STSBase_setDelayAfterIntegration(CONTINUOUSSTROBEIMPL_STSBASE_T c_continuous_strobe_impl_s_t_s_base, int delay);
	EXPORTED int ContinuousStrobeImpl_STSBase_getDelayAfterIntegration(CONTINUOUSSTROBEIMPL_STSBASE_T c_continuous_strobe_impl_s_t_s_base);
	EXPORTED void ContinuousStrobeImpl_STSBase_setContinuousEnable(CONTINUOUSSTROBEIMPL_STSBASE_T c_continuous_strobe_impl_s_t_s_base, short value);
	EXPORTED short ContinuousStrobeImpl_STSBase_getContinuousEnable(CONTINUOUSSTROBEIMPL_STSBASE_T c_continuous_strobe_impl_s_t_s_base);
	EXPORTED void ContinuousStrobeImpl_STSBase_Destroy(CONTINUOUSSTROBEIMPL_STSBASE_T continuous_strobe_impl_s_t_s_base);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED CONTINUOUSSTROBEIMPL_STSBASE_T STDCALL ContinuousStrobeImpl_STSBase_Create_stdcall_1(STSBASE_T sts, USBINTERFACE_T usbInt);
	EXPORTED int STDCALL ContinuousStrobeImpl_STSBase_getContinuousStrobeDelayMinimum_stdcall(CONTINUOUSSTROBEIMPL_STSBASE_T c_continuous_strobe_impl_s_t_s_base);
	EXPORTED int STDCALL ContinuousStrobeImpl_STSBase_getContinuousStrobeDelayMaximum_stdcall(CONTINUOUSSTROBEIMPL_STSBASE_T c_continuous_strobe_impl_s_t_s_base);
	EXPORTED int STDCALL ContinuousStrobeImpl_STSBase_getContinuousStrobeDelayIncrement_stdcall(CONTINUOUSSTROBEIMPL_STSBASE_T c_continuous_strobe_impl_s_t_s_base, int magnitude);
	EXPORTED double STDCALL ContinuousStrobeImpl_STSBase_continuousStrobeCountsToMicros_stdcall(CONTINUOUSSTROBEIMPL_STSBASE_T c_continuous_strobe_impl_s_t_s_base, int counts);
	EXPORTED void STDCALL ContinuousStrobeImpl_STSBase_setContinuousModeType_stdcall(CONTINUOUSSTROBEIMPL_STSBASE_T c_continuous_strobe_impl_s_t_s_base, short mode);
	EXPORTED short STDCALL ContinuousStrobeImpl_STSBase_getContinuousModeType_stdcall(CONTINUOUSSTROBEIMPL_STSBASE_T c_continuous_strobe_impl_s_t_s_base);
	EXPORTED void STDCALL ContinuousStrobeImpl_STSBase_setDelayAfterIntegration_stdcall(CONTINUOUSSTROBEIMPL_STSBASE_T c_continuous_strobe_impl_s_t_s_base, int delay);
	EXPORTED int STDCALL ContinuousStrobeImpl_STSBase_getDelayAfterIntegration_stdcall(CONTINUOUSSTROBEIMPL_STSBASE_T c_continuous_strobe_impl_s_t_s_base);
	EXPORTED void STDCALL ContinuousStrobeImpl_STSBase_setContinuousEnable_stdcall(CONTINUOUSSTROBEIMPL_STSBASE_T c_continuous_strobe_impl_s_t_s_base, short value);
	EXPORTED short STDCALL ContinuousStrobeImpl_STSBase_getContinuousEnable_stdcall(CONTINUOUSSTROBEIMPL_STSBASE_T c_continuous_strobe_impl_s_t_s_base);
	EXPORTED void STDCALL ContinuousStrobeImpl_STSBase_Destroy_stdcall(CONTINUOUSSTROBEIMPL_STSBASE_T continuous_strobe_impl_s_t_s_base);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* CONTINUOUSSTROBEIMPL_STSBASE_H */
