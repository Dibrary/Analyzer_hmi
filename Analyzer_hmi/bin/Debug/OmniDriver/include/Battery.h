/**
 * File: Battery.h
 * Autogenerated on Fri Mar 23 13:38:30 EDT 2018 based on
 * Battery.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/battery/Battery
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef BATTERY_H
#define BATTERY_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#endif /* INCLUDES_IN_HEADER */


CLASS_TOKEN EXPORTED Battery : public BaseJavaClass // CPPClass.tag001
{
public: 
	short hasBattery();
	int getChargeLevel();
	short isCharging();
	double getBatteryTemperature();
	void chargeAccumulator();
	~Battery();
	// No public default Java constructor; creating one:
	Battery();
	// No public Java copy constructor; creating one:
	Battery(const Battery &that);
	// Creating assignment operator declaration:
	Battery &operator=(const Battery &that);

private:
	jmethodID mid_hasBattery893;
	jmethodID mid_getChargeLevel894;
	jmethodID mid_isCharging895;
	jmethodID mid_getBatteryTemperature896;
	jmethodID mid_chargeAccumulator897;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_BATTERY_T
#define EXTERN_TYPEDEF_BATTERY_T
	typedef void* BATTERY_T;
#endif /* EXTERN_TYPEDEF_BATTERY_T */

	// No public default Java constructor; creating one:
	EXPORTED BATTERY_T Battery_Create();
	EXPORTED short Battery_hasBattery(BATTERY_T c_battery);
	EXPORTED int Battery_getChargeLevel(BATTERY_T c_battery);
	EXPORTED short Battery_isCharging(BATTERY_T c_battery);
	EXPORTED double Battery_getBatteryTemperature(BATTERY_T c_battery);
	EXPORTED void Battery_chargeAccumulator(BATTERY_T c_battery);
	EXPORTED void Battery_Destroy(BATTERY_T battery);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED short STDCALL Battery_hasBattery_stdcall(BATTERY_T c_battery);
	EXPORTED int STDCALL Battery_getChargeLevel_stdcall(BATTERY_T c_battery);
	EXPORTED short STDCALL Battery_isCharging_stdcall(BATTERY_T c_battery);
	EXPORTED double STDCALL Battery_getBatteryTemperature_stdcall(BATTERY_T c_battery);
	EXPORTED void STDCALL Battery_chargeAccumulator_stdcall(BATTERY_T c_battery);
	EXPORTED void STDCALL Battery_Destroy_stdcall(BATTERY_T battery);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* BATTERY_H */
