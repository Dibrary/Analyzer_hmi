/**
 * File: MethodDescriptorHelper.h
 * Autogenerated on Fri Mar 23 13:38:46 EDT 2018 based on
 * MethodDescriptorHelper.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/MethodDescriptorHelper
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef METHODDESCRIPTORHELPER_H
#define METHODDESCRIPTORHELPER_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "ParameterDescriptor.h"
#include "Comparable.h"
#include "Number.h"
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class ParameterDescriptor;
class Comparable;
class Number;
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED MethodDescriptorHelper : public BaseJavaClass // CPPClass.tag001
{
public: 
	Comparable getMinimumValue(ParameterDescriptor& desc);
	Comparable getMaximumValue(ParameterDescriptor& desc);
	Number getIncrementValue(ParameterDescriptor& desc);
	ParameterDescriptor createParameterDescriptor(JString& name);
	~MethodDescriptorHelper();
	// No public default Java constructor; creating one:
	MethodDescriptorHelper();
	// No public Java copy constructor; creating one:
	MethodDescriptorHelper(const MethodDescriptorHelper &that);
	// Creating assignment operator declaration:
	MethodDescriptorHelper &operator=(const MethodDescriptorHelper &that);

private:
	jmethodID mid_getMinimumValue2909;
	jmethodID mid_getMaximumValue2910;
	jmethodID mid_getIncrementValue2911;
	jmethodID mid_createParameterDescriptor2912;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_PARAMETERDESCRIPTOR_T
#define EXTERN_TYPEDEF_PARAMETERDESCRIPTOR_T
	typedef void* PARAMETERDESCRIPTOR_T;
#endif /* EXTERN_TYPEDEF_PARAMETERDESCRIPTOR_T */
#ifndef EXTERN_TYPEDEF_COMPARABLE_T
#define EXTERN_TYPEDEF_COMPARABLE_T
	typedef void* COMPARABLE_T;
#endif /* EXTERN_TYPEDEF_COMPARABLE_T */
#ifndef EXTERN_TYPEDEF_NUMBER_T
#define EXTERN_TYPEDEF_NUMBER_T
	typedef void* NUMBER_T;
#endif /* EXTERN_TYPEDEF_NUMBER_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_METHODDESCRIPTORHELPER_T
#define EXTERN_TYPEDEF_METHODDESCRIPTORHELPER_T
	typedef void* METHODDESCRIPTORHELPER_T;
#endif /* EXTERN_TYPEDEF_METHODDESCRIPTORHELPER_T */

	// No public default Java constructor; creating one:
	EXPORTED METHODDESCRIPTORHELPER_T MethodDescriptorHelper_Create();
	EXPORTED void MethodDescriptorHelper_getMinimumValue(METHODDESCRIPTORHELPER_T c_method_descriptor_helper, PARAMETERDESCRIPTOR_T desc, COMPARABLE_T retval);
	EXPORTED void MethodDescriptorHelper_getMaximumValue(METHODDESCRIPTORHELPER_T c_method_descriptor_helper, PARAMETERDESCRIPTOR_T desc, COMPARABLE_T retval);
	EXPORTED void MethodDescriptorHelper_getIncrementValue(METHODDESCRIPTORHELPER_T c_method_descriptor_helper, PARAMETERDESCRIPTOR_T desc, NUMBER_T retval);
	EXPORTED void MethodDescriptorHelper_createParameterDescriptor(METHODDESCRIPTORHELPER_T c_method_descriptor_helper, JSTRING_T name, PARAMETERDESCRIPTOR_T retval);
	EXPORTED void MethodDescriptorHelper_Destroy(METHODDESCRIPTORHELPER_T method_descriptor_helper);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED void STDCALL MethodDescriptorHelper_getMinimumValue_stdcall(METHODDESCRIPTORHELPER_T c_method_descriptor_helper, PARAMETERDESCRIPTOR_T desc, COMPARABLE_T retval);
	EXPORTED void STDCALL MethodDescriptorHelper_getMaximumValue_stdcall(METHODDESCRIPTORHELPER_T c_method_descriptor_helper, PARAMETERDESCRIPTOR_T desc, COMPARABLE_T retval);
	EXPORTED void STDCALL MethodDescriptorHelper_getIncrementValue_stdcall(METHODDESCRIPTORHELPER_T c_method_descriptor_helper, PARAMETERDESCRIPTOR_T desc, NUMBER_T retval);
	EXPORTED void STDCALL MethodDescriptorHelper_createParameterDescriptor_stdcall(METHODDESCRIPTORHELPER_T c_method_descriptor_helper, JSTRING_T name, PARAMETERDESCRIPTOR_T retval);
	EXPORTED void STDCALL MethodDescriptorHelper_Destroy_stdcall(METHODDESCRIPTORHELPER_T method_descriptor_helper);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* METHODDESCRIPTORHELPER_H */
