/**
 * File: USBConfigurationDescriptor.h
 * Autogenerated on Fri Mar 23 13:39:20 EDT 2018 based on
 * USBConfigurationDescriptor.java
 * for the Java class
 * com/oceanoptics/uniusb/USBConfigurationDescriptor
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef USBCONFIGURATIONDESCRIPTOR_H
#define USBCONFIGURATIONDESCRIPTOR_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED USBConfigurationDescriptor : public BaseJavaClass // CPPClass.tag001
{
public: 
	USBConfigurationDescriptor();
	JString toString();
	signed char getLength();
	signed char getDescriptorType();
	short getTotalLength();
	signed char getNumInterfaces();
	signed char getConfigurationValue();
	signed char getConfiguration();
	signed char getAttributes();
	signed char getMaxPower();
	~USBConfigurationDescriptor();
	// No public Java copy constructor; creating one:
	USBConfigurationDescriptor(const USBConfigurationDescriptor &that);
	// Creating assignment operator declaration:
	USBConfigurationDescriptor &operator=(const USBConfigurationDescriptor &that);

private:
	jmethodID mid_USBConfigurationDescriptor6592;
	jmethodID mid_toString6593;
	jmethodID mid_getLength6594;
	jmethodID mid_getDescriptorType6595;
	jmethodID mid_getTotalLength6596;
	jmethodID mid_getNumInterfaces6597;
	jmethodID mid_getConfigurationValue6598;
	jmethodID mid_getConfiguration6599;
	jmethodID mid_getAttributes6600;
	jmethodID mid_getMaxPower6601;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_USBCONFIGURATIONDESCRIPTOR_T
#define EXTERN_TYPEDEF_USBCONFIGURATIONDESCRIPTOR_T
	typedef void* USBCONFIGURATIONDESCRIPTOR_T;
#endif /* EXTERN_TYPEDEF_USBCONFIGURATIONDESCRIPTOR_T */

	EXPORTED USBCONFIGURATIONDESCRIPTOR_T USBConfigurationDescriptor_Create();
	EXPORTED void USBConfigurationDescriptor_toString(USBCONFIGURATIONDESCRIPTOR_T c_usbconfigurationdescriptor, JSTRING_T retval);
	EXPORTED signed char USBConfigurationDescriptor_getLength(USBCONFIGURATIONDESCRIPTOR_T c_usbconfigurationdescriptor);
	EXPORTED signed char USBConfigurationDescriptor_getDescriptorType(USBCONFIGURATIONDESCRIPTOR_T c_usbconfigurationdescriptor);
	EXPORTED short USBConfigurationDescriptor_getTotalLength(USBCONFIGURATIONDESCRIPTOR_T c_usbconfigurationdescriptor);
	EXPORTED signed char USBConfigurationDescriptor_getNumInterfaces(USBCONFIGURATIONDESCRIPTOR_T c_usbconfigurationdescriptor);
	EXPORTED signed char USBConfigurationDescriptor_getConfigurationValue(USBCONFIGURATIONDESCRIPTOR_T c_usbconfigurationdescriptor);
	EXPORTED signed char USBConfigurationDescriptor_getConfiguration(USBCONFIGURATIONDESCRIPTOR_T c_usbconfigurationdescriptor);
	EXPORTED signed char USBConfigurationDescriptor_getAttributes(USBCONFIGURATIONDESCRIPTOR_T c_usbconfigurationdescriptor);
	EXPORTED signed char USBConfigurationDescriptor_getMaxPower(USBCONFIGURATIONDESCRIPTOR_T c_usbconfigurationdescriptor);
	EXPORTED void USBConfigurationDescriptor_Destroy(USBCONFIGURATIONDESCRIPTOR_T usbconfigurationdescriptor);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED USBCONFIGURATIONDESCRIPTOR_T STDCALL USBConfigurationDescriptor_Create_stdcall();
	EXPORTED void STDCALL USBConfigurationDescriptor_toString_stdcall(USBCONFIGURATIONDESCRIPTOR_T c_usbconfigurationdescriptor, JSTRING_T retval);
	EXPORTED signed char STDCALL USBConfigurationDescriptor_getLength_stdcall(USBCONFIGURATIONDESCRIPTOR_T c_usbconfigurationdescriptor);
	EXPORTED signed char STDCALL USBConfigurationDescriptor_getDescriptorType_stdcall(USBCONFIGURATIONDESCRIPTOR_T c_usbconfigurationdescriptor);
	EXPORTED short STDCALL USBConfigurationDescriptor_getTotalLength_stdcall(USBCONFIGURATIONDESCRIPTOR_T c_usbconfigurationdescriptor);
	EXPORTED signed char STDCALL USBConfigurationDescriptor_getNumInterfaces_stdcall(USBCONFIGURATIONDESCRIPTOR_T c_usbconfigurationdescriptor);
	EXPORTED signed char STDCALL USBConfigurationDescriptor_getConfigurationValue_stdcall(USBCONFIGURATIONDESCRIPTOR_T c_usbconfigurationdescriptor);
	EXPORTED signed char STDCALL USBConfigurationDescriptor_getConfiguration_stdcall(USBCONFIGURATIONDESCRIPTOR_T c_usbconfigurationdescriptor);
	EXPORTED signed char STDCALL USBConfigurationDescriptor_getAttributes_stdcall(USBCONFIGURATIONDESCRIPTOR_T c_usbconfigurationdescriptor);
	EXPORTED signed char STDCALL USBConfigurationDescriptor_getMaxPower_stdcall(USBCONFIGURATIONDESCRIPTOR_T c_usbconfigurationdescriptor);
	EXPORTED void STDCALL USBConfigurationDescriptor_Destroy_stdcall(USBCONFIGURATIONDESCRIPTOR_T usbconfigurationdescriptor);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* USBCONFIGURATIONDESCRIPTOR_H */
