/**
 * File: UniRS232.h
 * Autogenerated on Fri Mar 23 13:39:20 EDT 2018 based on
 * UniRS232.java
 * for the Java class
 * com/oceanoptics/unirs232/UniRS232
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef UNIRS232_H
#define UNIRS232_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED UniRS232 : public BaseJavaClass // CPPClass.tag001
{
public: 
	UniRS232();
	long long openPort(JString& portname);
	void closePort();
	short isOpened();
	signed char setReadTimeout(int milliSeconds);
	int getReadTimeout();
	int write(CharArray& data);
	int write(CharArray& data, int length);
	int writeSlow(CharArray& data, int msecDelayBetweenBytes);
	int writeSlow(CharArray& data, int length, int msecDelayBetweenBytes);
	int writeString(JString& data);
	int writeString(JString& data, int length);
	int writeStringSlow(JString& data, int msecDelayBetweenBytes);
	int writeStringSlow(JString& data, int length, int msecDelayBetweenBytes);
	int read(CharArray& data);
	int read(CharArray& data, int length);
	JString readString(int length);
	signed char flushOutput();
	signed char flushInput();
	signed char purgeOutput(int maxWaitMillis);
	int getBaudRate();
	signed char setBaudRate(int rate);
	signed char getDataBits();
	signed char setDataBits(signed char bits);
	signed char getStopBits();
	signed char setStopBits(signed char bits);
	signed char getParity();
	signed char setParity(signed char parity);
	signed char getFlowControl();
	signed char setFlowControl(signed char flow);
	signed char sendBreak();
	signed char getDCD();
	signed char setDCD(signed char on);
	signed char setDTR(signed char on);
	signed char setRTS(signed char on);
	signed char getCTS();
	short waitForSingleByteInRXBuffer(int maxWaitMillis);
	int waitForXBytesInRXBuffer(int numBytes, int maxWaitMillis);
	int getBytesInRXBuffer();
	int waitForRXBufferToStopGrowing(int waitTimeoutMillis);
	~UniRS232();
	// No public Java copy constructor; creating one:
	UniRS232(const UniRS232 &that);
	// Creating assignment operator declaration:
	UniRS232 &operator=(const UniRS232 &that);
	signed char errSuccess;
	signed char errPortNotOpened;
	signed char errOpenNoTty;
	signed char errOpenFailed;
	signed char errSpeedInvalid;
	signed char errFlowInvalid;
	signed char errParityInvalid;
	signed char errCharsizeInvalid;
	signed char errStopbitsInvalid;
	signed char errOptionInvalid;
	signed char errResourceFailure;
	signed char errOutput;
	signed char errInput;
	signed char errTimeout;
	signed char errExtended;
	signed char errBadDeviceName;
	signed char flowControlNone;
	signed char flowControlSoft;
	signed char flowControlHarware;
	signed char flowControlBoth;
	signed char parityNone;
	signed char parityOdd;
	signed char parityEven;
	signed char dataBits8;
	signed char dataBits7;
	signed char dataBits6;
	signed char dataBits5;

private:
	jmethodID mid_UniRS2326692;
	jmethodID mid_openPort6693;
	jmethodID mid_closePort6694;
	jmethodID mid_isOpened6695;
	jmethodID mid_setReadTimeout6696;
	jmethodID mid_getReadTimeout6697;
	jmethodID mid_write6698;
	jmethodID mid_write6699;
	jmethodID mid_writeSlow6700;
	jmethodID mid_writeSlow6701;
	jmethodID mid_writeString6702;
	jmethodID mid_writeString6703;
	jmethodID mid_writeStringSlow6704;
	jmethodID mid_writeStringSlow6705;
	jmethodID mid_read6706;
	jmethodID mid_read6707;
	jmethodID mid_readString6708;
	jmethodID mid_flushOutput6709;
	jmethodID mid_flushInput6710;
	jmethodID mid_purgeOutput6711;
	jmethodID mid_getBaudRate6712;
	jmethodID mid_setBaudRate6713;
	jmethodID mid_getDataBits6714;
	jmethodID mid_setDataBits6715;
	jmethodID mid_getStopBits6716;
	jmethodID mid_setStopBits6717;
	jmethodID mid_getParity6718;
	jmethodID mid_setParity6719;
	jmethodID mid_getFlowControl6720;
	jmethodID mid_setFlowControl6721;
	jmethodID mid_sendBreak6722;
	jmethodID mid_getDCD6723;
	jmethodID mid_setDCD6724;
	jmethodID mid_setDTR6725;
	jmethodID mid_setRTS6726;
	jmethodID mid_getCTS6727;
	jmethodID mid_waitForSingleByteInRXBuffer6728;
	jmethodID mid_waitForXBytesInRXBuffer6729;
	jmethodID mid_getBytesInRXBuffer6730;
	jmethodID mid_waitForRXBufferToStopGrowing6731;
	jfieldID fid_errSuccess;
	jfieldID fid_errPortNotOpened;
	jfieldID fid_errOpenNoTty;
	jfieldID fid_errOpenFailed;
	jfieldID fid_errSpeedInvalid;
	jfieldID fid_errFlowInvalid;
	jfieldID fid_errParityInvalid;
	jfieldID fid_errCharsizeInvalid;
	jfieldID fid_errStopbitsInvalid;
	jfieldID fid_errOptionInvalid;
	jfieldID fid_errResourceFailure;
	jfieldID fid_errOutput;
	jfieldID fid_errInput;
	jfieldID fid_errTimeout;
	jfieldID fid_errExtended;
	jfieldID fid_errBadDeviceName;
	jfieldID fid_flowControlNone;
	jfieldID fid_flowControlSoft;
	jfieldID fid_flowControlHarware;
	jfieldID fid_flowControlBoth;
	jfieldID fid_parityNone;
	jfieldID fid_parityOdd;
	jfieldID fid_parityEven;
	jfieldID fid_dataBits8;
	jfieldID fid_dataBits7;
	jfieldID fid_dataBits6;
	jfieldID fid_dataBits5;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_UNIRS232_T
#define EXTERN_TYPEDEF_UNIRS232_T
	typedef void* UNIRS232_T;
#endif /* EXTERN_TYPEDEF_UNIRS232_T */

	EXPORTED UNIRS232_T UniRS232_Create();
	EXPORTED long long UniRS232_openPort(UNIRS232_T c_uni_r_s232, JSTRING_T portname);
	EXPORTED void UniRS232_closePort(UNIRS232_T c_uni_r_s232);
	EXPORTED short UniRS232_isOpened(UNIRS232_T c_uni_r_s232);
	EXPORTED signed char UniRS232_setReadTimeout(UNIRS232_T c_uni_r_s232, int milliSeconds);
	EXPORTED int UniRS232_getReadTimeout(UNIRS232_T c_uni_r_s232);
	EXPORTED int UniRS232_write(UNIRS232_T c_uni_r_s232, CHARARRAY_T data);
	EXPORTED int UniRS232_write_1(UNIRS232_T c_uni_r_s232, CHARARRAY_T data, int length);
	EXPORTED int UniRS232_writeSlow(UNIRS232_T c_uni_r_s232, CHARARRAY_T data, int msecDelayBetweenBytes);
	EXPORTED int UniRS232_writeSlow_1(UNIRS232_T c_uni_r_s232, CHARARRAY_T data, int length, int msecDelayBetweenBytes);
	EXPORTED int UniRS232_writeString(UNIRS232_T c_uni_r_s232, JSTRING_T data);
	EXPORTED int UniRS232_writeString_1(UNIRS232_T c_uni_r_s232, JSTRING_T data, int length);
	EXPORTED int UniRS232_writeStringSlow(UNIRS232_T c_uni_r_s232, JSTRING_T data, int msecDelayBetweenBytes);
	EXPORTED int UniRS232_writeStringSlow_1(UNIRS232_T c_uni_r_s232, JSTRING_T data, int length, int msecDelayBetweenBytes);
	EXPORTED int UniRS232_read(UNIRS232_T c_uni_r_s232, CHARARRAY_T data);
	EXPORTED int UniRS232_read_1(UNIRS232_T c_uni_r_s232, CHARARRAY_T data, int length);
	EXPORTED void UniRS232_readString(UNIRS232_T c_uni_r_s232, int length, JSTRING_T retval);
	EXPORTED signed char UniRS232_flushOutput(UNIRS232_T c_uni_r_s232);
	EXPORTED signed char UniRS232_flushInput(UNIRS232_T c_uni_r_s232);
	EXPORTED signed char UniRS232_purgeOutput(UNIRS232_T c_uni_r_s232, int maxWaitMillis);
	EXPORTED int UniRS232_getBaudRate(UNIRS232_T c_uni_r_s232);
	EXPORTED signed char UniRS232_setBaudRate(UNIRS232_T c_uni_r_s232, int rate);
	EXPORTED signed char UniRS232_getDataBits(UNIRS232_T c_uni_r_s232);
	EXPORTED signed char UniRS232_setDataBits(UNIRS232_T c_uni_r_s232, signed char bits);
	EXPORTED signed char UniRS232_getStopBits(UNIRS232_T c_uni_r_s232);
	EXPORTED signed char UniRS232_setStopBits(UNIRS232_T c_uni_r_s232, signed char bits);
	EXPORTED signed char UniRS232_getParity(UNIRS232_T c_uni_r_s232);
	EXPORTED signed char UniRS232_setParity(UNIRS232_T c_uni_r_s232, signed char parity);
	EXPORTED signed char UniRS232_getFlowControl(UNIRS232_T c_uni_r_s232);
	EXPORTED signed char UniRS232_setFlowControl(UNIRS232_T c_uni_r_s232, signed char flow);
	EXPORTED signed char UniRS232_sendBreak(UNIRS232_T c_uni_r_s232);
	EXPORTED signed char UniRS232_getDCD(UNIRS232_T c_uni_r_s232);
	EXPORTED signed char UniRS232_setDCD(UNIRS232_T c_uni_r_s232, signed char on);
	EXPORTED signed char UniRS232_setDTR(UNIRS232_T c_uni_r_s232, signed char on);
	EXPORTED signed char UniRS232_setRTS(UNIRS232_T c_uni_r_s232, signed char on);
	EXPORTED signed char UniRS232_getCTS(UNIRS232_T c_uni_r_s232);
	EXPORTED short UniRS232_waitForSingleByteInRXBuffer(UNIRS232_T c_uni_r_s232, int maxWaitMillis);
	EXPORTED int UniRS232_waitForXBytesInRXBuffer(UNIRS232_T c_uni_r_s232, int numBytes, int maxWaitMillis);
	EXPORTED int UniRS232_getBytesInRXBuffer(UNIRS232_T c_uni_r_s232);
	EXPORTED int UniRS232_waitForRXBufferToStopGrowing(UNIRS232_T c_uni_r_s232, int waitTimeoutMillis);
	EXPORTED void UniRS232_Destroy(UNIRS232_T uni_r_s232);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED UNIRS232_T STDCALL UniRS232_Create_stdcall();
	EXPORTED long long STDCALL UniRS232_openPort_stdcall(UNIRS232_T c_uni_r_s232, JSTRING_T portname);
	EXPORTED void STDCALL UniRS232_closePort_stdcall(UNIRS232_T c_uni_r_s232);
	EXPORTED short STDCALL UniRS232_isOpened_stdcall(UNIRS232_T c_uni_r_s232);
	EXPORTED signed char STDCALL UniRS232_setReadTimeout_stdcall(UNIRS232_T c_uni_r_s232, int milliSeconds);
	EXPORTED int STDCALL UniRS232_getReadTimeout_stdcall(UNIRS232_T c_uni_r_s232);
	EXPORTED int STDCALL UniRS232_write_stdcall(UNIRS232_T c_uni_r_s232, CHARARRAY_T data);
	EXPORTED int STDCALL UniRS232_write_stdcall_1(UNIRS232_T c_uni_r_s232, CHARARRAY_T data, int length);
	EXPORTED int STDCALL UniRS232_writeSlow_stdcall(UNIRS232_T c_uni_r_s232, CHARARRAY_T data, int msecDelayBetweenBytes);
	EXPORTED int STDCALL UniRS232_writeSlow_stdcall_1(UNIRS232_T c_uni_r_s232, CHARARRAY_T data, int length, int msecDelayBetweenBytes);
	EXPORTED int STDCALL UniRS232_writeString_stdcall(UNIRS232_T c_uni_r_s232, JSTRING_T data);
	EXPORTED int STDCALL UniRS232_writeString_stdcall_1(UNIRS232_T c_uni_r_s232, JSTRING_T data, int length);
	EXPORTED int STDCALL UniRS232_writeStringSlow_stdcall(UNIRS232_T c_uni_r_s232, JSTRING_T data, int msecDelayBetweenBytes);
	EXPORTED int STDCALL UniRS232_writeStringSlow_stdcall_1(UNIRS232_T c_uni_r_s232, JSTRING_T data, int length, int msecDelayBetweenBytes);
	EXPORTED int STDCALL UniRS232_read_stdcall(UNIRS232_T c_uni_r_s232, CHARARRAY_T data);
	EXPORTED int STDCALL UniRS232_read_stdcall_1(UNIRS232_T c_uni_r_s232, CHARARRAY_T data, int length);
	EXPORTED void STDCALL UniRS232_readString_stdcall(UNIRS232_T c_uni_r_s232, int length, JSTRING_T retval);
	EXPORTED signed char STDCALL UniRS232_flushOutput_stdcall(UNIRS232_T c_uni_r_s232);
	EXPORTED signed char STDCALL UniRS232_flushInput_stdcall(UNIRS232_T c_uni_r_s232);
	EXPORTED signed char STDCALL UniRS232_purgeOutput_stdcall(UNIRS232_T c_uni_r_s232, int maxWaitMillis);
	EXPORTED int STDCALL UniRS232_getBaudRate_stdcall(UNIRS232_T c_uni_r_s232);
	EXPORTED signed char STDCALL UniRS232_setBaudRate_stdcall(UNIRS232_T c_uni_r_s232, int rate);
	EXPORTED signed char STDCALL UniRS232_getDataBits_stdcall(UNIRS232_T c_uni_r_s232);
	EXPORTED signed char STDCALL UniRS232_setDataBits_stdcall(UNIRS232_T c_uni_r_s232, signed char bits);
	EXPORTED signed char STDCALL UniRS232_getStopBits_stdcall(UNIRS232_T c_uni_r_s232);
	EXPORTED signed char STDCALL UniRS232_setStopBits_stdcall(UNIRS232_T c_uni_r_s232, signed char bits);
	EXPORTED signed char STDCALL UniRS232_getParity_stdcall(UNIRS232_T c_uni_r_s232);
	EXPORTED signed char STDCALL UniRS232_setParity_stdcall(UNIRS232_T c_uni_r_s232, signed char parity);
	EXPORTED signed char STDCALL UniRS232_getFlowControl_stdcall(UNIRS232_T c_uni_r_s232);
	EXPORTED signed char STDCALL UniRS232_setFlowControl_stdcall(UNIRS232_T c_uni_r_s232, signed char flow);
	EXPORTED signed char STDCALL UniRS232_sendBreak_stdcall(UNIRS232_T c_uni_r_s232);
	EXPORTED signed char STDCALL UniRS232_getDCD_stdcall(UNIRS232_T c_uni_r_s232);
	EXPORTED signed char STDCALL UniRS232_setDCD_stdcall(UNIRS232_T c_uni_r_s232, signed char on);
	EXPORTED signed char STDCALL UniRS232_setDTR_stdcall(UNIRS232_T c_uni_r_s232, signed char on);
	EXPORTED signed char STDCALL UniRS232_setRTS_stdcall(UNIRS232_T c_uni_r_s232, signed char on);
	EXPORTED signed char STDCALL UniRS232_getCTS_stdcall(UNIRS232_T c_uni_r_s232);
	EXPORTED short STDCALL UniRS232_waitForSingleByteInRXBuffer_stdcall(UNIRS232_T c_uni_r_s232, int maxWaitMillis);
	EXPORTED int STDCALL UniRS232_waitForXBytesInRXBuffer_stdcall(UNIRS232_T c_uni_r_s232, int numBytes, int maxWaitMillis);
	EXPORTED int STDCALL UniRS232_getBytesInRXBuffer_stdcall(UNIRS232_T c_uni_r_s232);
	EXPORTED int STDCALL UniRS232_waitForRXBufferToStopGrowing_stdcall(UNIRS232_T c_uni_r_s232, int waitTimeoutMillis);
	EXPORTED void STDCALL UniRS232_Destroy_stdcall(UNIRS232_T uni_r_s232);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* UNIRS232_H */
