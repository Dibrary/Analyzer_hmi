/**
 * File: USB.h
 * Autogenerated on Fri Mar 23 13:39:20 EDT 2018 based on
 * USB.java
 * for the Java class
 * com/oceanoptics/uniusb/USB
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef USB_H
#define USB_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBEndpointDescriptor.h"
#include "USBDeviceDescriptor.h"
#include "USBInterfaceDescriptor.h"
#include "USBConfigurationDescriptor.h"
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBEndpointDescriptor;
class USBDeviceDescriptor;
class USBInterfaceDescriptor;
class USBConfigurationDescriptor;
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED USB : public BaseJavaClass // CPPClass.tag001
{
public: 
	USB(short driver);
	int setTimeout(long long devID, USBEndpointDescriptor& endPointDescriptor, int timeoutMilliseconds);
	long long openDevice(int vendID, int prodID, int number);
	void closeDevice(long long devID);
	int bulkOut(long long devID, USBEndpointDescriptor& endPointDescriptor, CharArray& data, int size);
	int bulkIn(long long devID, USBEndpointDescriptor& endPointDescriptor, CharArray& data, int size);
	void abortPipe(long long devID, USBEndpointDescriptor& endpoint);
	void resetPipe(long long devID, USBEndpointDescriptor& endPointDescriptor);
	USBDeviceDescriptor getUSBDeviceDescriptor(long long devID);
	USBInterfaceDescriptor getUSBInterfaceDescriptor(long long devID);
	USBConfigurationDescriptor getUSBConfigurationDescriptor(long long devID, int configNumber);
	JString getUSBStringDescriptor(long long devID, int index);
	short isUSB2Mode();
	~USB();
	// No public default Java constructor; creating one:
	USB();
	// No public Java copy constructor; creating one:
	USB(const USB &that);
	// Creating assignment operator declaration:
	USB &operator=(const USB &that);

private:
	jmethodID mid_USB6578;
	jmethodID mid_setTimeout6579;
	jmethodID mid_openDevice6580;
	jmethodID mid_closeDevice6581;
	jmethodID mid_bulkOut6582;
	jmethodID mid_bulkIn6583;
	jmethodID mid_abortPipe6584;
	jmethodID mid_resetPipe6585;
	jmethodID mid_getUSBDeviceDescriptor6586;
	jmethodID mid_getUSBInterfaceDescriptor6587;
	jmethodID mid_getUSBConfigurationDescriptor6588;
	jmethodID mid_getUSBStringDescriptor6589;
	jmethodID mid_isUSB2Mode6590;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBENDPOINTDESCRIPTOR_T
#define EXTERN_TYPEDEF_USBENDPOINTDESCRIPTOR_T
	typedef void* USBENDPOINTDESCRIPTOR_T;
#endif /* EXTERN_TYPEDEF_USBENDPOINTDESCRIPTOR_T */
#ifndef EXTERN_TYPEDEF_USBDEVICEDESCRIPTOR_T
#define EXTERN_TYPEDEF_USBDEVICEDESCRIPTOR_T
	typedef void* USBDEVICEDESCRIPTOR_T;
#endif /* EXTERN_TYPEDEF_USBDEVICEDESCRIPTOR_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACEDESCRIPTOR_T
#define EXTERN_TYPEDEF_USBINTERFACEDESCRIPTOR_T
	typedef void* USBINTERFACEDESCRIPTOR_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACEDESCRIPTOR_T */
#ifndef EXTERN_TYPEDEF_USBCONFIGURATIONDESCRIPTOR_T
#define EXTERN_TYPEDEF_USBCONFIGURATIONDESCRIPTOR_T
	typedef void* USBCONFIGURATIONDESCRIPTOR_T;
#endif /* EXTERN_TYPEDEF_USBCONFIGURATIONDESCRIPTOR_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_USB_T
#define EXTERN_TYPEDEF_USB_T
	typedef void* USB_T;
#endif /* EXTERN_TYPEDEF_USB_T */

	// No public default Java constructor; creating one:
	EXPORTED USB_T USB_Create();
	EXPORTED USB_T USB_Create_1(short driver);
	EXPORTED int USB_setTimeout(USB_T c_usb, long long devID, USBENDPOINTDESCRIPTOR_T endPointDescriptor, int timeoutMilliseconds);
	EXPORTED long long USB_openDevice(USB_T c_usb, int vendID, int prodID, int number);
	EXPORTED void USB_closeDevice(USB_T c_usb, long long devID);
	EXPORTED int USB_bulkOut(USB_T c_usb, long long devID, USBENDPOINTDESCRIPTOR_T endPointDescriptor, CHARARRAY_T data, int size);
	EXPORTED int USB_bulkIn(USB_T c_usb, long long devID, USBENDPOINTDESCRIPTOR_T endPointDescriptor, CHARARRAY_T data, int size);
	EXPORTED void USB_abortPipe(USB_T c_usb, long long devID, USBENDPOINTDESCRIPTOR_T endpoint);
	EXPORTED void USB_resetPipe(USB_T c_usb, long long devID, USBENDPOINTDESCRIPTOR_T endPointDescriptor);
	EXPORTED void USB_getUSBDeviceDescriptor(USB_T c_usb, long long devID, USBDEVICEDESCRIPTOR_T retval);
	EXPORTED void USB_getUSBInterfaceDescriptor(USB_T c_usb, long long devID, USBINTERFACEDESCRIPTOR_T retval);
	EXPORTED void USB_getUSBConfigurationDescriptor(USB_T c_usb, long long devID, int configNumber, USBCONFIGURATIONDESCRIPTOR_T retval);
	EXPORTED void USB_getUSBStringDescriptor(USB_T c_usb, long long devID, int index, JSTRING_T retval);
	EXPORTED short USB_isUSB2Mode(USB_T c_usb);
	EXPORTED void USB_Destroy(USB_T usb);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED USB_T STDCALL USB_Create_stdcall_1(short driver);
	EXPORTED int STDCALL USB_setTimeout_stdcall(USB_T c_usb, long long devID, USBENDPOINTDESCRIPTOR_T endPointDescriptor, int timeoutMilliseconds);
	EXPORTED long long STDCALL USB_openDevice_stdcall(USB_T c_usb, int vendID, int prodID, int number);
	EXPORTED void STDCALL USB_closeDevice_stdcall(USB_T c_usb, long long devID);
	EXPORTED int STDCALL USB_bulkOut_stdcall(USB_T c_usb, long long devID, USBENDPOINTDESCRIPTOR_T endPointDescriptor, CHARARRAY_T data, int size);
	EXPORTED int STDCALL USB_bulkIn_stdcall(USB_T c_usb, long long devID, USBENDPOINTDESCRIPTOR_T endPointDescriptor, CHARARRAY_T data, int size);
	EXPORTED void STDCALL USB_abortPipe_stdcall(USB_T c_usb, long long devID, USBENDPOINTDESCRIPTOR_T endpoint);
	EXPORTED void STDCALL USB_resetPipe_stdcall(USB_T c_usb, long long devID, USBENDPOINTDESCRIPTOR_T endPointDescriptor);
	EXPORTED void STDCALL USB_getUSBDeviceDescriptor_stdcall(USB_T c_usb, long long devID, USBDEVICEDESCRIPTOR_T retval);
	EXPORTED void STDCALL USB_getUSBInterfaceDescriptor_stdcall(USB_T c_usb, long long devID, USBINTERFACEDESCRIPTOR_T retval);
	EXPORTED void STDCALL USB_getUSBConfigurationDescriptor_stdcall(USB_T c_usb, long long devID, int configNumber, USBCONFIGURATIONDESCRIPTOR_T retval);
	EXPORTED void STDCALL USB_getUSBStringDescriptor_stdcall(USB_T c_usb, long long devID, int index, JSTRING_T retval);
	EXPORTED short STDCALL USB_isUSB2Mode_stdcall(USB_T c_usb);
	EXPORTED void STDCALL USB_Destroy_stdcall(USB_T usb);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* USB_H */
