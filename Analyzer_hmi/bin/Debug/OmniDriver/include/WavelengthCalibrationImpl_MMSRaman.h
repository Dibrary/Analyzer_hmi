/**
 * File: WavelengthCalibrationImpl_MMSRaman.h
 * Autogenerated on Fri Mar 23 13:38:57 EDT 2018 based on
 * WavelengthCalibrationImpl_MMSRaman.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/mmsraman/features/wavelengthcalibration/WavelengthCalibrationImpl_MMSRaman
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_H
#define WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "WavelengthCalibrationImpl.h"
#include "USBInterface.h"
#include "MMSRamanSpectrometer.h"
#include "CoefficientsArray.h"
#include "JStringArray.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class WavelengthCalibrationImpl;
class USBInterface;
class MMSRamanSpectrometer;
class CoefficientsArray;
class JStringArray;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED WavelengthCalibrationImpl_MMSRaman : public WavelengthCalibrationImpl // CPPClass.tag001
{
public: 
	WavelengthCalibrationImpl_MMSRaman(USBInterface& usb, MMSRamanSpectrometer& s);
	void writeWavelengthCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	CoefficientsArray readWavelengthCalibrationCoefficientsFromSpectrometer();
	void setWavelengthCalibrationCoefficients(CoefficientsArray& c);
	CoefficientsArray getWavelengthCalibrationCoefficients();
	DoubleArray getWavelengths(int index);
	void setWavelengths(DoubleArray& wavelengths, int index);
	JStringArray getFeatureGUIClassnames();
	~WavelengthCalibrationImpl_MMSRaman();
	// No public default Java constructor; creating one:
	WavelengthCalibrationImpl_MMSRaman();
	// No public Java copy constructor; creating one:
	WavelengthCalibrationImpl_MMSRaman(const WavelengthCalibrationImpl_MMSRaman &that);
	// Creating assignment operator declaration:
	WavelengthCalibrationImpl_MMSRaman &operator=(const WavelengthCalibrationImpl_MMSRaman &that);

private:
	jmethodID mid_WavelengthCalibrationImpl_MMSRaman4302;
	jmethodID mid_writeWavelengthCoefficientsToSpectrometer4303;
	jmethodID mid_readWavelengthCalibrationCoefficientsFromSpectrometer4304;
	jmethodID mid_setWavelengthCalibrationCoefficients4305;
	jmethodID mid_getWavelengthCalibrationCoefficients4306;
	jmethodID mid_getWavelengths4307;
	jmethodID mid_setWavelengths4308;
	jmethodID mid_getFeatureGUIClassnames4309;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_WAVELENGTHCALIBRATIONIMPL_T
#define EXTERN_TYPEDEF_WAVELENGTHCALIBRATIONIMPL_T
	typedef void* WAVELENGTHCALIBRATIONIMPL_T;
#endif /* EXTERN_TYPEDEF_WAVELENGTHCALIBRATIONIMPL_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_MMSRAMANSPECTROMETER_T
#define EXTERN_TYPEDEF_MMSRAMANSPECTROMETER_T
	typedef void* MMSRAMANSPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_MMSRAMANSPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
#define EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
	typedef void* COEFFICIENTSARRAY_T;
#endif /* EXTERN_TYPEDEF_COEFFICIENTSARRAY_T */
#ifndef EXTERN_TYPEDEF_JSTRINGARRAY_T
#define EXTERN_TYPEDEF_JSTRINGARRAY_T
	typedef void* JSTRINGARRAY_T;
#endif /* EXTERN_TYPEDEF_JSTRINGARRAY_T */
#ifndef EXTERN_TYPEDEF_WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T
#define EXTERN_TYPEDEF_WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T
	typedef void* WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T;
#endif /* EXTERN_TYPEDEF_WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T */

	// No public default Java constructor; creating one:
	EXPORTED WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T WavelengthCalibrationImpl_MMSRaman_Create();
	EXPORTED WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T WavelengthCalibrationImpl_MMSRaman_Create_1(USBINTERFACE_T usb, MMSRAMANSPECTROMETER_T s);
	EXPORTED void WavelengthCalibrationImpl_MMSRaman_writeWavelengthCoefficientsToSpectrometer(WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T c_wavelength_calibration_impl_m_m_s_raman, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void WavelengthCalibrationImpl_MMSRaman_readWavelengthCalibrationCoefficientsFromSpectrometer(WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T c_wavelength_calibration_impl_m_m_s_raman, COEFFICIENTSARRAY_T retval);
	EXPORTED void WavelengthCalibrationImpl_MMSRaman_setWavelengthCalibrationCoefficients(WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T c_wavelength_calibration_impl_m_m_s_raman, COEFFICIENTSARRAY_T c);
	EXPORTED void WavelengthCalibrationImpl_MMSRaman_getWavelengthCalibrationCoefficients(WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T c_wavelength_calibration_impl_m_m_s_raman, COEFFICIENTSARRAY_T retval);
	EXPORTED void WavelengthCalibrationImpl_MMSRaman_getWavelengths(WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T c_wavelength_calibration_impl_m_m_s_raman, int index, DOUBLEARRAY_T retval);
	EXPORTED void WavelengthCalibrationImpl_MMSRaman_setWavelengths(WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T c_wavelength_calibration_impl_m_m_s_raman, DOUBLEARRAY_T wavelengths, int index);
	EXPORTED void WavelengthCalibrationImpl_MMSRaman_getFeatureGUIClassnames(WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T c_wavelength_calibration_impl_m_m_s_raman, JSTRINGARRAY_T retval);
	EXPORTED void WavelengthCalibrationImpl_MMSRaman_Destroy(WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T wavelength_calibration_impl_m_m_s_raman);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T STDCALL WavelengthCalibrationImpl_MMSRaman_Create_stdcall_1(USBINTERFACE_T usb, MMSRAMANSPECTROMETER_T s);
	EXPORTED void STDCALL WavelengthCalibrationImpl_MMSRaman_writeWavelengthCoefficientsToSpectrometer_stdcall(WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T c_wavelength_calibration_impl_m_m_s_raman, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL WavelengthCalibrationImpl_MMSRaman_readWavelengthCalibrationCoefficientsFromSpectrometer_stdcall(WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T c_wavelength_calibration_impl_m_m_s_raman, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL WavelengthCalibrationImpl_MMSRaman_setWavelengthCalibrationCoefficients_stdcall(WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T c_wavelength_calibration_impl_m_m_s_raman, COEFFICIENTSARRAY_T c);
	EXPORTED void STDCALL WavelengthCalibrationImpl_MMSRaman_getWavelengthCalibrationCoefficients_stdcall(WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T c_wavelength_calibration_impl_m_m_s_raman, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL WavelengthCalibrationImpl_MMSRaman_getWavelengths_stdcall(WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T c_wavelength_calibration_impl_m_m_s_raman, int index, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL WavelengthCalibrationImpl_MMSRaman_setWavelengths_stdcall(WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T c_wavelength_calibration_impl_m_m_s_raman, DOUBLEARRAY_T wavelengths, int index);
	EXPORTED void STDCALL WavelengthCalibrationImpl_MMSRaman_getFeatureGUIClassnames_stdcall(WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T c_wavelength_calibration_impl_m_m_s_raman, JSTRINGARRAY_T retval);
	EXPORTED void STDCALL WavelengthCalibrationImpl_MMSRaman_Destroy_stdcall(WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_T wavelength_calibration_impl_m_m_s_raman);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* WAVELENGTHCALIBRATIONIMPL_MMSRAMAN_H */
