/**
 * File: LaserProviderImpl.h
 * Autogenerated on Fri Mar 23 13:38:57 EDT 2018 based on
 * LaserProviderImpl.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/mmsraman/features/laser/LaserProviderImpl
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef LASERPROVIDERIMPL_H
#define LASERPROVIDERIMPL_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBFeature.h"
#include "USBInterface.h"
#include "MMSRamanSpectrometer.h"
#include "Laser.h"
#include "LaserArray.h"
#include "JStringArray.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBFeature;
class USBInterface;
class MMSRamanSpectrometer;
class Laser;
class LaserArray;
class JStringArray;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED LaserProviderImpl : public USBFeature // CPPClass.tag001
{
public: 
	LaserProviderImpl(USBInterface& usbInt, MMSRamanSpectrometer& spec);
	Laser getLaser(int laserIndex);
	LaserArray getLasers();
	void setLasers(LaserArray& lasers);
	int getNumberOfEnabledLasers();
	int getNumberOfSupportedLasers();
	void setNumberOfSupportedLasers(int numLasers);
	void getLaserInfo(int laserIndex);
	void setLaserInfo(int laserIndex);
	int getDefaultLaser();
	void setDefaultLaser(int defaultLaser);
	void setLaserTemperatureRegulation(short laserTemperatureRegulation);
	void getLaserTemperatureInfo();
	void setLaserTemperatureInfo();
	short isLaserTemperatureRegulation();
	int getMinimumLaserSetpoint();
	void setMinimumLaserSetpoint(int minimumLaserSetpoint);
	int getMaximumLaserSetpoint();
	void setMaximumLaserSetpoint(int maximumLaserSetpoint);
	void setLaserPowerRegulation(short laserPowerRegulation);
	int getLaserPowerInfo();
	void setLaserPowerInfo(int power);
	short isLaserPowerRegulation();
	int getMinimumLaserPowerSetpoint();
	void setMinimumLaserPowerSetpoint(int minimumLaserPowerSetpoint);
	int getMaximumLaserPowerSetpoint();
	void setMaximumLaserPowerSetpoint(int maximumLaserPowerSetpoint);
	JStringArray getFeatureGUIClassnames();
	~LaserProviderImpl();
	// No public default Java constructor; creating one:
	LaserProviderImpl();
	// No public Java copy constructor; creating one:
	LaserProviderImpl(const LaserProviderImpl &that);
	// Creating assignment operator declaration:
	LaserProviderImpl &operator=(const LaserProviderImpl &that);

private:
	jmethodID mid_LaserProviderImpl4268;
	jmethodID mid_getLaser4269;
	jmethodID mid_getLasers4270;
	jmethodID mid_setLasers4271;
	jmethodID mid_getNumberOfEnabledLasers4272;
	jmethodID mid_getNumberOfSupportedLasers4273;
	jmethodID mid_setNumberOfSupportedLasers4274;
	jmethodID mid_getLaserInfo4275;
	jmethodID mid_setLaserInfo4276;
	jmethodID mid_getDefaultLaser4277;
	jmethodID mid_setDefaultLaser4278;
	jmethodID mid_setLaserTemperatureRegulation4279;
	jmethodID mid_getLaserTemperatureInfo4280;
	jmethodID mid_setLaserTemperatureInfo4281;
	jmethodID mid_isLaserTemperatureRegulation4282;
	jmethodID mid_getMinimumLaserSetpoint4283;
	jmethodID mid_setMinimumLaserSetpoint4284;
	jmethodID mid_getMaximumLaserSetpoint4285;
	jmethodID mid_setMaximumLaserSetpoint4286;
	jmethodID mid_setLaserPowerRegulation4287;
	jmethodID mid_getLaserPowerInfo4288;
	jmethodID mid_setLaserPowerInfo4289;
	jmethodID mid_isLaserPowerRegulation4290;
	jmethodID mid_getMinimumLaserPowerSetpoint4291;
	jmethodID mid_setMinimumLaserPowerSetpoint4292;
	jmethodID mid_getMaximumLaserPowerSetpoint4293;
	jmethodID mid_setMaximumLaserPowerSetpoint4294;
	jmethodID mid_getFeatureGUIClassnames4295;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBFEATURE_T
#define EXTERN_TYPEDEF_USBFEATURE_T
	typedef void* USBFEATURE_T;
#endif /* EXTERN_TYPEDEF_USBFEATURE_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_MMSRAMANSPECTROMETER_T
#define EXTERN_TYPEDEF_MMSRAMANSPECTROMETER_T
	typedef void* MMSRAMANSPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_MMSRAMANSPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_LASER_T
#define EXTERN_TYPEDEF_LASER_T
	typedef void* LASER_T;
#endif /* EXTERN_TYPEDEF_LASER_T */
#ifndef EXTERN_TYPEDEF_LASERARRAY_T
#define EXTERN_TYPEDEF_LASERARRAY_T
	typedef void* LASERARRAY_T;
#endif /* EXTERN_TYPEDEF_LASERARRAY_T */
#ifndef EXTERN_TYPEDEF_JSTRINGARRAY_T
#define EXTERN_TYPEDEF_JSTRINGARRAY_T
	typedef void* JSTRINGARRAY_T;
#endif /* EXTERN_TYPEDEF_JSTRINGARRAY_T */
#ifndef EXTERN_TYPEDEF_LASERPROVIDERIMPL_T
#define EXTERN_TYPEDEF_LASERPROVIDERIMPL_T
	typedef void* LASERPROVIDERIMPL_T;
#endif /* EXTERN_TYPEDEF_LASERPROVIDERIMPL_T */

	// No public default Java constructor; creating one:
	EXPORTED LASERPROVIDERIMPL_T LaserProviderImpl_Create();
	EXPORTED LASERPROVIDERIMPL_T LaserProviderImpl_Create_1(USBINTERFACE_T usbInt, MMSRAMANSPECTROMETER_T spec);
	EXPORTED void LaserProviderImpl_getLaser(LASERPROVIDERIMPL_T c_laser_provider_impl, int laserIndex, LASER_T retval);
	EXPORTED void LaserProviderImpl_getLasers(LASERPROVIDERIMPL_T c_laser_provider_impl, LASERARRAY_T retval);
	EXPORTED void LaserProviderImpl_setLasers(LASERPROVIDERIMPL_T c_laser_provider_impl, LASERARRAY_T lasers);
	EXPORTED int LaserProviderImpl_getNumberOfEnabledLasers(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED int LaserProviderImpl_getNumberOfSupportedLasers(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED void LaserProviderImpl_setNumberOfSupportedLasers(LASERPROVIDERIMPL_T c_laser_provider_impl, int numLasers);
	EXPORTED void LaserProviderImpl_getLaserInfo(LASERPROVIDERIMPL_T c_laser_provider_impl, int laserIndex);
	EXPORTED void LaserProviderImpl_setLaserInfo(LASERPROVIDERIMPL_T c_laser_provider_impl, int laserIndex);
	EXPORTED int LaserProviderImpl_getDefaultLaser(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED void LaserProviderImpl_setDefaultLaser(LASERPROVIDERIMPL_T c_laser_provider_impl, int defaultLaser);
	EXPORTED void LaserProviderImpl_setLaserTemperatureRegulation(LASERPROVIDERIMPL_T c_laser_provider_impl, short laserTemperatureRegulation);
	EXPORTED void LaserProviderImpl_getLaserTemperatureInfo(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED void LaserProviderImpl_setLaserTemperatureInfo(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED short LaserProviderImpl_isLaserTemperatureRegulation(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED int LaserProviderImpl_getMinimumLaserSetpoint(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED void LaserProviderImpl_setMinimumLaserSetpoint(LASERPROVIDERIMPL_T c_laser_provider_impl, int minimumLaserSetpoint);
	EXPORTED int LaserProviderImpl_getMaximumLaserSetpoint(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED void LaserProviderImpl_setMaximumLaserSetpoint(LASERPROVIDERIMPL_T c_laser_provider_impl, int maximumLaserSetpoint);
	EXPORTED void LaserProviderImpl_setLaserPowerRegulation(LASERPROVIDERIMPL_T c_laser_provider_impl, short laserPowerRegulation);
	EXPORTED int LaserProviderImpl_getLaserPowerInfo(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED void LaserProviderImpl_setLaserPowerInfo(LASERPROVIDERIMPL_T c_laser_provider_impl, int power);
	EXPORTED short LaserProviderImpl_isLaserPowerRegulation(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED int LaserProviderImpl_getMinimumLaserPowerSetpoint(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED void LaserProviderImpl_setMinimumLaserPowerSetpoint(LASERPROVIDERIMPL_T c_laser_provider_impl, int minimumLaserPowerSetpoint);
	EXPORTED int LaserProviderImpl_getMaximumLaserPowerSetpoint(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED void LaserProviderImpl_setMaximumLaserPowerSetpoint(LASERPROVIDERIMPL_T c_laser_provider_impl, int maximumLaserPowerSetpoint);
	EXPORTED void LaserProviderImpl_getFeatureGUIClassnames(LASERPROVIDERIMPL_T c_laser_provider_impl, JSTRINGARRAY_T retval);
	EXPORTED void LaserProviderImpl_Destroy(LASERPROVIDERIMPL_T laser_provider_impl);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED LASERPROVIDERIMPL_T STDCALL LaserProviderImpl_Create_stdcall_1(USBINTERFACE_T usbInt, MMSRAMANSPECTROMETER_T spec);
	EXPORTED void STDCALL LaserProviderImpl_getLaser_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl, int laserIndex, LASER_T retval);
	EXPORTED void STDCALL LaserProviderImpl_getLasers_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl, LASERARRAY_T retval);
	EXPORTED void STDCALL LaserProviderImpl_setLasers_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl, LASERARRAY_T lasers);
	EXPORTED int STDCALL LaserProviderImpl_getNumberOfEnabledLasers_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED int STDCALL LaserProviderImpl_getNumberOfSupportedLasers_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED void STDCALL LaserProviderImpl_setNumberOfSupportedLasers_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl, int numLasers);
	EXPORTED void STDCALL LaserProviderImpl_getLaserInfo_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl, int laserIndex);
	EXPORTED void STDCALL LaserProviderImpl_setLaserInfo_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl, int laserIndex);
	EXPORTED int STDCALL LaserProviderImpl_getDefaultLaser_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED void STDCALL LaserProviderImpl_setDefaultLaser_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl, int defaultLaser);
	EXPORTED void STDCALL LaserProviderImpl_setLaserTemperatureRegulation_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl, short laserTemperatureRegulation);
	EXPORTED void STDCALL LaserProviderImpl_getLaserTemperatureInfo_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED void STDCALL LaserProviderImpl_setLaserTemperatureInfo_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED short STDCALL LaserProviderImpl_isLaserTemperatureRegulation_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED int STDCALL LaserProviderImpl_getMinimumLaserSetpoint_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED void STDCALL LaserProviderImpl_setMinimumLaserSetpoint_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl, int minimumLaserSetpoint);
	EXPORTED int STDCALL LaserProviderImpl_getMaximumLaserSetpoint_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED void STDCALL LaserProviderImpl_setMaximumLaserSetpoint_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl, int maximumLaserSetpoint);
	EXPORTED void STDCALL LaserProviderImpl_setLaserPowerRegulation_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl, short laserPowerRegulation);
	EXPORTED int STDCALL LaserProviderImpl_getLaserPowerInfo_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED void STDCALL LaserProviderImpl_setLaserPowerInfo_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl, int power);
	EXPORTED short STDCALL LaserProviderImpl_isLaserPowerRegulation_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED int STDCALL LaserProviderImpl_getMinimumLaserPowerSetpoint_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED void STDCALL LaserProviderImpl_setMinimumLaserPowerSetpoint_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl, int minimumLaserPowerSetpoint);
	EXPORTED int STDCALL LaserProviderImpl_getMaximumLaserPowerSetpoint_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl);
	EXPORTED void STDCALL LaserProviderImpl_setMaximumLaserPowerSetpoint_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl, int maximumLaserPowerSetpoint);
	EXPORTED void STDCALL LaserProviderImpl_getFeatureGUIClassnames_stdcall(LASERPROVIDERIMPL_T c_laser_provider_impl, JSTRINGARRAY_T retval);
	EXPORTED void STDCALL LaserProviderImpl_Destroy_stdcall(LASERPROVIDERIMPL_T laser_provider_impl);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* LASERPROVIDERIMPL_H */
