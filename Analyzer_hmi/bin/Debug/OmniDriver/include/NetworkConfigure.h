/**
 * File: NetworkConfigure.h
 * Autogenerated on Fri Mar 23 13:38:38 EDT 2018 based on
 * NetworkConfigure.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/networkconfigure/NetworkConfigure
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef NETWORKCONFIGURE_H
#define NETWORKCONFIGURE_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "IPv4SubnetAddress.h"
#include "IPv4Address.h"
#include "JString.h"
#include "WiFiSSID.h"
#include "WiFiPassphrase.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class IPv4SubnetAddress;
class IPv4Address;
class JString;
class WiFiSSID;
class WiFiPassphrase;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED NetworkConfigure : public BaseJavaClass // CPPClass.tag001
{
public: 
	short isDHCPEnabled(int param0);
	void setDHCPEnable(int param0, short param1);
	IPv4SubnetAddress getIPv4Address(int param0, int param1);
	void addIPv4Address(int param0, IPv4SubnetAddress& param1);
	void removeIPv4Address(int param0, int param1);
	IPv4Address getIPv4Gateway(int param0);
	void setIPv4Gateway(int param0, IPv4Address& param1);
	short supportsMulticast();
	void writeMACAddress(int param0, JString& param1);
	JString readMACAddress(int param0);
	short runSelfTest(int param0);
	int getNumberOfInterfaces();
	short isInterfaceEnabled(int param0);
	void setInterfaceEnable(int param0, short param1);
	void saveSettings();
	short hasGigabitEnable();
	short isGigabitEnabled();
	void setGigabitEnable(short param0);
	WiFiSSID getSSID();
	void setSSID(WiFiSSID& param0);
	JString getWiFiMode();
	void setWiFiMode(JString& param0);
	JString getWiFiSecurity();
	void setWiFiSecurity(JString& param0);
	void setWiFiPassphrase(WiFiPassphrase& param0);
	short isDhcpServer();
	void setDhcpServer(short param0);
	IPv4SubnetAddress getDhcpBaseAddress();
	void setDhcpBaseAddress(IPv4SubnetAddress& param0);
	~NetworkConfigure();
	// No public default Java constructor; creating one:
	NetworkConfigure();
	// No public Java copy constructor; creating one:
	NetworkConfigure(const NetworkConfigure &that);
	// Creating assignment operator declaration:
	NetworkConfigure &operator=(const NetworkConfigure &that);

private:
	jmethodID mid_isDHCPEnabled1790;
	jmethodID mid_setDHCPEnable1791;
	jmethodID mid_getIPv4Address1792;
	jmethodID mid_addIPv4Address1793;
	jmethodID mid_removeIPv4Address1794;
	jmethodID mid_getIPv4Gateway1795;
	jmethodID mid_setIPv4Gateway1796;
	jmethodID mid_supportsMulticast1797;
	jmethodID mid_writeMACAddress1798;
	jmethodID mid_readMACAddress1799;
	jmethodID mid_runSelfTest1800;
	jmethodID mid_getNumberOfInterfaces1801;
	jmethodID mid_isInterfaceEnabled1802;
	jmethodID mid_setInterfaceEnable1803;
	jmethodID mid_saveSettings1804;
	jmethodID mid_hasGigabitEnable1805;
	jmethodID mid_isGigabitEnabled1806;
	jmethodID mid_setGigabitEnable1807;
	jmethodID mid_getSSID1808;
	jmethodID mid_setSSID1809;
	jmethodID mid_getWiFiMode1810;
	jmethodID mid_setWiFiMode1811;
	jmethodID mid_getWiFiSecurity1812;
	jmethodID mid_setWiFiSecurity1813;
	jmethodID mid_setWiFiPassphrase1814;
	jmethodID mid_isDhcpServer1815;
	jmethodID mid_setDhcpServer1816;
	jmethodID mid_getDhcpBaseAddress1817;
	jmethodID mid_setDhcpBaseAddress1818;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_IPV4SUBNETADDRESS_T
#define EXTERN_TYPEDEF_IPV4SUBNETADDRESS_T
	typedef void* IPV4SUBNETADDRESS_T;
#endif /* EXTERN_TYPEDEF_IPV4SUBNETADDRESS_T */
#ifndef EXTERN_TYPEDEF_IPV4ADDRESS_T
#define EXTERN_TYPEDEF_IPV4ADDRESS_T
	typedef void* IPV4ADDRESS_T;
#endif /* EXTERN_TYPEDEF_IPV4ADDRESS_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_WIFISSID_T
#define EXTERN_TYPEDEF_WIFISSID_T
	typedef void* WIFISSID_T;
#endif /* EXTERN_TYPEDEF_WIFISSID_T */
#ifndef EXTERN_TYPEDEF_WIFIPASSPHRASE_T
#define EXTERN_TYPEDEF_WIFIPASSPHRASE_T
	typedef void* WIFIPASSPHRASE_T;
#endif /* EXTERN_TYPEDEF_WIFIPASSPHRASE_T */
#ifndef EXTERN_TYPEDEF_NETWORKCONFIGURE_T
#define EXTERN_TYPEDEF_NETWORKCONFIGURE_T
	typedef void* NETWORKCONFIGURE_T;
#endif /* EXTERN_TYPEDEF_NETWORKCONFIGURE_T */

	// No public default Java constructor; creating one:
	EXPORTED NETWORKCONFIGURE_T NetworkConfigure_Create();
	EXPORTED short NetworkConfigure_isDHCPEnabled(NETWORKCONFIGURE_T c_network_configure, int param0);
	EXPORTED void NetworkConfigure_setDHCPEnable(NETWORKCONFIGURE_T c_network_configure, int param0, short param1);
	EXPORTED void NetworkConfigure_getIPv4Address(NETWORKCONFIGURE_T c_network_configure, int param0, int param1, IPV4SUBNETADDRESS_T retval);
	EXPORTED void NetworkConfigure_addIPv4Address(NETWORKCONFIGURE_T c_network_configure, int param0, IPV4SUBNETADDRESS_T param1);
	EXPORTED void NetworkConfigure_removeIPv4Address(NETWORKCONFIGURE_T c_network_configure, int param0, int param1);
	EXPORTED void NetworkConfigure_getIPv4Gateway(NETWORKCONFIGURE_T c_network_configure, int param0, IPV4ADDRESS_T retval);
	EXPORTED void NetworkConfigure_setIPv4Gateway(NETWORKCONFIGURE_T c_network_configure, int param0, IPV4ADDRESS_T param1);
	EXPORTED short NetworkConfigure_supportsMulticast(NETWORKCONFIGURE_T c_network_configure);
	EXPORTED void NetworkConfigure_writeMACAddress(NETWORKCONFIGURE_T c_network_configure, int param0, JSTRING_T param1);
	EXPORTED void NetworkConfigure_readMACAddress(NETWORKCONFIGURE_T c_network_configure, int param0, JSTRING_T retval);
	EXPORTED short NetworkConfigure_runSelfTest(NETWORKCONFIGURE_T c_network_configure, int param0);
	EXPORTED int NetworkConfigure_getNumberOfInterfaces(NETWORKCONFIGURE_T c_network_configure);
	EXPORTED short NetworkConfigure_isInterfaceEnabled(NETWORKCONFIGURE_T c_network_configure, int param0);
	EXPORTED void NetworkConfigure_setInterfaceEnable(NETWORKCONFIGURE_T c_network_configure, int param0, short param1);
	EXPORTED void NetworkConfigure_saveSettings(NETWORKCONFIGURE_T c_network_configure);
	EXPORTED short NetworkConfigure_hasGigabitEnable(NETWORKCONFIGURE_T c_network_configure);
	EXPORTED short NetworkConfigure_isGigabitEnabled(NETWORKCONFIGURE_T c_network_configure);
	EXPORTED void NetworkConfigure_setGigabitEnable(NETWORKCONFIGURE_T c_network_configure, short param0);
	EXPORTED void NetworkConfigure_getSSID(NETWORKCONFIGURE_T c_network_configure, WIFISSID_T retval);
	EXPORTED void NetworkConfigure_setSSID(NETWORKCONFIGURE_T c_network_configure, WIFISSID_T param0);
	EXPORTED void NetworkConfigure_getWiFiMode(NETWORKCONFIGURE_T c_network_configure, JSTRING_T retval);
	EXPORTED void NetworkConfigure_setWiFiMode(NETWORKCONFIGURE_T c_network_configure, JSTRING_T param0);
	EXPORTED void NetworkConfigure_getWiFiSecurity(NETWORKCONFIGURE_T c_network_configure, JSTRING_T retval);
	EXPORTED void NetworkConfigure_setWiFiSecurity(NETWORKCONFIGURE_T c_network_configure, JSTRING_T param0);
	EXPORTED void NetworkConfigure_setWiFiPassphrase(NETWORKCONFIGURE_T c_network_configure, WIFIPASSPHRASE_T param0);
	EXPORTED short NetworkConfigure_isDhcpServer(NETWORKCONFIGURE_T c_network_configure);
	EXPORTED void NetworkConfigure_setDhcpServer(NETWORKCONFIGURE_T c_network_configure, short param0);
	EXPORTED void NetworkConfigure_getDhcpBaseAddress(NETWORKCONFIGURE_T c_network_configure, IPV4SUBNETADDRESS_T retval);
	EXPORTED void NetworkConfigure_setDhcpBaseAddress(NETWORKCONFIGURE_T c_network_configure, IPV4SUBNETADDRESS_T param0);
	EXPORTED void NetworkConfigure_Destroy(NETWORKCONFIGURE_T network_configure);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED short STDCALL NetworkConfigure_isDHCPEnabled_stdcall(NETWORKCONFIGURE_T c_network_configure, int param0);
	EXPORTED void STDCALL NetworkConfigure_setDHCPEnable_stdcall(NETWORKCONFIGURE_T c_network_configure, int param0, short param1);
	EXPORTED void STDCALL NetworkConfigure_getIPv4Address_stdcall(NETWORKCONFIGURE_T c_network_configure, int param0, int param1, IPV4SUBNETADDRESS_T retval);
	EXPORTED void STDCALL NetworkConfigure_addIPv4Address_stdcall(NETWORKCONFIGURE_T c_network_configure, int param0, IPV4SUBNETADDRESS_T param1);
	EXPORTED void STDCALL NetworkConfigure_removeIPv4Address_stdcall(NETWORKCONFIGURE_T c_network_configure, int param0, int param1);
	EXPORTED void STDCALL NetworkConfigure_getIPv4Gateway_stdcall(NETWORKCONFIGURE_T c_network_configure, int param0, IPV4ADDRESS_T retval);
	EXPORTED void STDCALL NetworkConfigure_setIPv4Gateway_stdcall(NETWORKCONFIGURE_T c_network_configure, int param0, IPV4ADDRESS_T param1);
	EXPORTED short STDCALL NetworkConfigure_supportsMulticast_stdcall(NETWORKCONFIGURE_T c_network_configure);
	EXPORTED void STDCALL NetworkConfigure_writeMACAddress_stdcall(NETWORKCONFIGURE_T c_network_configure, int param0, JSTRING_T param1);
	EXPORTED void STDCALL NetworkConfigure_readMACAddress_stdcall(NETWORKCONFIGURE_T c_network_configure, int param0, JSTRING_T retval);
	EXPORTED short STDCALL NetworkConfigure_runSelfTest_stdcall(NETWORKCONFIGURE_T c_network_configure, int param0);
	EXPORTED int STDCALL NetworkConfigure_getNumberOfInterfaces_stdcall(NETWORKCONFIGURE_T c_network_configure);
	EXPORTED short STDCALL NetworkConfigure_isInterfaceEnabled_stdcall(NETWORKCONFIGURE_T c_network_configure, int param0);
	EXPORTED void STDCALL NetworkConfigure_setInterfaceEnable_stdcall(NETWORKCONFIGURE_T c_network_configure, int param0, short param1);
	EXPORTED void STDCALL NetworkConfigure_saveSettings_stdcall(NETWORKCONFIGURE_T c_network_configure);
	EXPORTED short STDCALL NetworkConfigure_hasGigabitEnable_stdcall(NETWORKCONFIGURE_T c_network_configure);
	EXPORTED short STDCALL NetworkConfigure_isGigabitEnabled_stdcall(NETWORKCONFIGURE_T c_network_configure);
	EXPORTED void STDCALL NetworkConfigure_setGigabitEnable_stdcall(NETWORKCONFIGURE_T c_network_configure, short param0);
	EXPORTED void STDCALL NetworkConfigure_getSSID_stdcall(NETWORKCONFIGURE_T c_network_configure, WIFISSID_T retval);
	EXPORTED void STDCALL NetworkConfigure_setSSID_stdcall(NETWORKCONFIGURE_T c_network_configure, WIFISSID_T param0);
	EXPORTED void STDCALL NetworkConfigure_getWiFiMode_stdcall(NETWORKCONFIGURE_T c_network_configure, JSTRING_T retval);
	EXPORTED void STDCALL NetworkConfigure_setWiFiMode_stdcall(NETWORKCONFIGURE_T c_network_configure, JSTRING_T param0);
	EXPORTED void STDCALL NetworkConfigure_getWiFiSecurity_stdcall(NETWORKCONFIGURE_T c_network_configure, JSTRING_T retval);
	EXPORTED void STDCALL NetworkConfigure_setWiFiSecurity_stdcall(NETWORKCONFIGURE_T c_network_configure, JSTRING_T param0);
	EXPORTED void STDCALL NetworkConfigure_setWiFiPassphrase_stdcall(NETWORKCONFIGURE_T c_network_configure, WIFIPASSPHRASE_T param0);
	EXPORTED short STDCALL NetworkConfigure_isDhcpServer_stdcall(NETWORKCONFIGURE_T c_network_configure);
	EXPORTED void STDCALL NetworkConfigure_setDhcpServer_stdcall(NETWORKCONFIGURE_T c_network_configure, short param0);
	EXPORTED void STDCALL NetworkConfigure_getDhcpBaseAddress_stdcall(NETWORKCONFIGURE_T c_network_configure, IPV4SUBNETADDRESS_T retval);
	EXPORTED void STDCALL NetworkConfigure_setDhcpBaseAddress_stdcall(NETWORKCONFIGURE_T c_network_configure, IPV4SUBNETADDRESS_T param0);
	EXPORTED void STDCALL NetworkConfigure_Destroy_stdcall(NETWORKCONFIGURE_T network_configure);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* NETWORKCONFIGURE_H */
