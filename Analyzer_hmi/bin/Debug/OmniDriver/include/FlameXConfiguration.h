/**
 * File: FlameXConfiguration.h
 * Autogenerated on Mon Jun 19 10:50:33 EDT 2017 based on
 * FlameXConfiguration.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/flamex/FlameXConfiguration
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef FLAMEXCONFIGURATION_H
#define FLAMEXCONFIGURATION_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "Configuration.h"
#include "Spectrometer.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class Configuration;
class Spectrometer;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED FlameXConfiguration : public Configuration // CPPClass.tag001
{
public: 
	FlameXConfiguration(Spectrometer& spec);
	void getConfigurationFromSpectrometer();
	void setConfigurationToSpectrometer();
	short isBenchDefined();
	short isCPLDVersionDefined();
	short isDetectorSerialNumberDefined();
	short isSpectrometerConfigurationDefined();
	~FlameXConfiguration();
	// No public default Java constructor; creating one:
	FlameXConfiguration();
	// No public Java copy constructor; creating one:
	FlameXConfiguration(const FlameXConfiguration &that);
	// Creating assignment operator declaration:
	FlameXConfiguration &operator=(const FlameXConfiguration &that);

private:
	jmethodID mid_FlameXConfiguration3122;
	jmethodID mid_getConfigurationFromSpectrometer3123;
	jmethodID mid_setConfigurationToSpectrometer3124;
	jmethodID mid_isBenchDefined3125;
	jmethodID mid_isCPLDVersionDefined3126;
	jmethodID mid_isDetectorSerialNumberDefined3127;
	jmethodID mid_isSpectrometerConfigurationDefined3128;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_CONFIGURATION_T
#define EXTERN_TYPEDEF_CONFIGURATION_T
	typedef void* CONFIGURATION_T;
#endif /* EXTERN_TYPEDEF_CONFIGURATION_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETER_T
#define EXTERN_TYPEDEF_SPECTROMETER_T
	typedef void* SPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_FLAMEXCONFIGURATION_T
#define EXTERN_TYPEDEF_FLAMEXCONFIGURATION_T
	typedef void* FLAMEXCONFIGURATION_T;
#endif /* EXTERN_TYPEDEF_FLAMEXCONFIGURATION_T */

	// No public default Java constructor; creating one:
	EXPORTED FLAMEXCONFIGURATION_T FlameXConfiguration_Create();
	EXPORTED FLAMEXCONFIGURATION_T FlameXConfiguration_Create_1(SPECTROMETER_T spec);
	EXPORTED void FlameXConfiguration_getConfigurationFromSpectrometer(FLAMEXCONFIGURATION_T c_flame_x_configuration);
	EXPORTED void FlameXConfiguration_setConfigurationToSpectrometer(FLAMEXCONFIGURATION_T c_flame_x_configuration);
	EXPORTED short FlameXConfiguration_isBenchDefined(FLAMEXCONFIGURATION_T c_flame_x_configuration);
	EXPORTED short FlameXConfiguration_isCPLDVersionDefined(FLAMEXCONFIGURATION_T c_flame_x_configuration);
	EXPORTED short FlameXConfiguration_isDetectorSerialNumberDefined(FLAMEXCONFIGURATION_T c_flame_x_configuration);
	EXPORTED short FlameXConfiguration_isSpectrometerConfigurationDefined(FLAMEXCONFIGURATION_T c_flame_x_configuration);
	EXPORTED void FlameXConfiguration_Destroy(FLAMEXCONFIGURATION_T flame_x_configuration);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED FLAMEXCONFIGURATION_T STDCALL FlameXConfiguration_Create_stdcall_1(SPECTROMETER_T spec);
	EXPORTED void STDCALL FlameXConfiguration_getConfigurationFromSpectrometer_stdcall(FLAMEXCONFIGURATION_T c_flame_x_configuration);
	EXPORTED void STDCALL FlameXConfiguration_setConfigurationToSpectrometer_stdcall(FLAMEXCONFIGURATION_T c_flame_x_configuration);
	EXPORTED short STDCALL FlameXConfiguration_isBenchDefined_stdcall(FLAMEXCONFIGURATION_T c_flame_x_configuration);
	EXPORTED short STDCALL FlameXConfiguration_isCPLDVersionDefined_stdcall(FLAMEXCONFIGURATION_T c_flame_x_configuration);
	EXPORTED short STDCALL FlameXConfiguration_isDetectorSerialNumberDefined_stdcall(FLAMEXCONFIGURATION_T c_flame_x_configuration);
	EXPORTED short STDCALL FlameXConfiguration_isSpectrometerConfigurationDefined_stdcall(FLAMEXCONFIGURATION_T c_flame_x_configuration);
	EXPORTED void STDCALL FlameXConfiguration_Destroy_stdcall(FLAMEXCONFIGURATION_T flame_x_configuration);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* FLAMEXCONFIGURATION_H */
