/**
 * File: ReferenceManager.h
 * Autogenerated on Thu Jul 10 13:47:20 EDT 2008 based on
 * ReferenceManager.java
 * for the Java class
 * com/oceanoptics/utilities/ReferenceManager
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 *
 * NOTE: SRS manually edited this file to fix an infinite recursive call to addReference()
 *	 Grep for "memleakfix" to find all places that need to be modified.
 	 ALSO, on 8/4/2008, SRS manually changed "CLASS" to "CLASS_TOKEN"
	 as part of a solution to a problem with gcc on the Mac.
 */


#ifndef REFERENCEMANAGER_H
#define REFERENCEMANAGER_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "JString.h"
#include "JStringArray.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class JString;
class JStringArray;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED ReferenceManager : public BaseJavaClass
{
public: 
	ReferenceManager(JNIEnv* pJNIEnv); // memleakfix
	int addReference(JNIEnv* pJNIEnv, JString& name, long long o); // memleakfix
	void setObject(JNIEnv* pJNIEnv, jobject jj); // memleakfix
	int removeReference(JNIEnv* pJNIEnv, long long o); // memleakfix
	void printReferenceMap(JNIEnv* pJNIEnv); // memleakfix
	void main(JNIEnv* pJNIEnv, JStringArray& args); // memleakfix
	void setVerbose(JNIEnv* pJNIEnv, unsigned char verbose); // memleakfix
	~ReferenceManager();
	// No public Java copy constructor; creating one:
	ReferenceManager(JNIEnv* pJNIEnv, const ReferenceManager &that); // memleakfix
	// Creating assignment operator declaration:
	// memleakfix ReferenceManager &operator=(const ReferenceManager &that);

private:
	jmethodID mid_ReferenceManager192;
	jmethodID mid_addReference193;
	jmethodID mid_removeReference194;
	jmethodID mid_printReferenceMap195;
	jmethodID mid_main196;
	jmethodID mid_setVerbose197;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_JSTRINGARRAY_T
#define EXTERN_TYPEDEF_JSTRINGARRAY_T
	typedef void* JSTRINGARRAY_T;
#endif /* EXTERN_TYPEDEF_JSTRINGARRAY_T */
#ifndef EXTERN_TYPEDEF_REFERENCEMANAGER_T
#define EXTERN_TYPEDEF_REFERENCEMANAGER_T
	typedef void* REFERENCEMANAGER_T;
#endif /* EXTERN_TYPEDEF_REFERENCEMANAGER_T */

	EXPORTED REFERENCEMANAGER_T ReferenceManager_Create();
	EXPORTED int ReferenceManager_addReference(REFERENCEMANAGER_T c_reference_manager, JSTRING_T name, long long o);
	EXPORTED int ReferenceManager_removeReference(REFERENCEMANAGER_T c_reference_manager, long long o);
	EXPORTED void ReferenceManager_printReferenceMap(REFERENCEMANAGER_T c_reference_manager);
	EXPORTED void ReferenceManager_main(REFERENCEMANAGER_T c_reference_manager, JSTRINGARRAY_T args);
	EXPORTED void ReferenceManager_setVerbose(REFERENCEMANAGER_T c_reference_manager, unsigned char verbose);
	EXPORTED void ReferenceManager_Destroy(REFERENCEMANAGER_T reference_manager);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED REFERENCEMANAGER_T STDCALL ReferenceManager_Create_stdcall();
	EXPORTED int STDCALL ReferenceManager_addReference_stdcall(REFERENCEMANAGER_T c_reference_manager, JSTRING_T name, long long o);
	EXPORTED int STDCALL ReferenceManager_removeReference_stdcall(REFERENCEMANAGER_T c_reference_manager, long long o);
	EXPORTED void STDCALL ReferenceManager_printReferenceMap_stdcall(REFERENCEMANAGER_T c_reference_manager);
	EXPORTED void STDCALL ReferenceManager_main_stdcall(REFERENCEMANAGER_T c_reference_manager, JSTRINGARRAY_T args);
	EXPORTED void STDCALL ReferenceManager_setVerbose_stdcall(REFERENCEMANAGER_T c_reference_manager, unsigned char verbose);
	EXPORTED void STDCALL ReferenceManager_Destroy_stdcall(REFERENCEMANAGER_T reference_manager);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* REFERENCEMANAGER_H */
