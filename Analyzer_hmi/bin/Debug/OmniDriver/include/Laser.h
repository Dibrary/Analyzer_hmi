/**
 * File: Laser.h
 * Autogenerated on Fri Mar 23 13:38:57 EDT 2018 based on
 * Laser.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/mmsraman/ramanspectrometer/Laser
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef LASER_H
#define LASER_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "Spectrometer.h"
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class Spectrometer;
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED Laser : public BaseJavaClass // CPPClass.tag001
{
public: 
	Laser(Spectrometer& spectrometer, int laserIndex);
	int getLaserIndex();
	short isRemoteEnabled();
	void setRemoteEnabled(short remoteEnabled);
	float getLaserWavelength();
	void setLaserWavelength(float laserWavelength, int channelIndex);
	void setLaserWavelengthForAllChannels(float laserWavelength);
	short isSafetyKeyOn();
	void setSafetyKeyOn(short safetyKeyOn);
	short isLaserPresent();
	void setLaserPresent(short laserPresent);
	short isLaserFault();
	void setLaserFault(short laserFault);
	short isLaserTemperatureLock();
	void setLaserTemperatureLock(short laserTemperatureLock);
	short isLaserPowered();
	void setLaserPowered(short laserPowered);
	JString toString();
	~Laser();
	// No public default Java constructor; creating one:
	Laser();
	// No public Java copy constructor; creating one:
	Laser(const Laser &that);
	// Creating assignment operator declaration:
	Laser &operator=(const Laser &that);

private:
	jmethodID mid_Laser4310;
	jmethodID mid_getLaserIndex4311;
	jmethodID mid_isRemoteEnabled4312;
	jmethodID mid_setRemoteEnabled4313;
	jmethodID mid_getLaserWavelength4314;
	jmethodID mid_setLaserWavelength4315;
	jmethodID mid_setLaserWavelengthForAllChannels4316;
	jmethodID mid_isSafetyKeyOn4317;
	jmethodID mid_setSafetyKeyOn4318;
	jmethodID mid_isLaserPresent4319;
	jmethodID mid_setLaserPresent4320;
	jmethodID mid_isLaserFault4321;
	jmethodID mid_setLaserFault4322;
	jmethodID mid_isLaserTemperatureLock4323;
	jmethodID mid_setLaserTemperatureLock4324;
	jmethodID mid_isLaserPowered4325;
	jmethodID mid_setLaserPowered4326;
	jmethodID mid_toString4327;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_SPECTROMETER_T
#define EXTERN_TYPEDEF_SPECTROMETER_T
	typedef void* SPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_LASER_T
#define EXTERN_TYPEDEF_LASER_T
	typedef void* LASER_T;
#endif /* EXTERN_TYPEDEF_LASER_T */

	// No public default Java constructor; creating one:
	EXPORTED LASER_T Laser_Create();
	EXPORTED LASER_T Laser_Create_1(SPECTROMETER_T spectrometer, int laserIndex);
	EXPORTED int Laser_getLaserIndex(LASER_T c_laser);
	EXPORTED short Laser_isRemoteEnabled(LASER_T c_laser);
	EXPORTED void Laser_setRemoteEnabled(LASER_T c_laser, short remoteEnabled);
	EXPORTED float Laser_getLaserWavelength(LASER_T c_laser);
	EXPORTED void Laser_setLaserWavelength(LASER_T c_laser, float laserWavelength, int channelIndex);
	EXPORTED void Laser_setLaserWavelengthForAllChannels(LASER_T c_laser, float laserWavelength);
	EXPORTED short Laser_isSafetyKeyOn(LASER_T c_laser);
	EXPORTED void Laser_setSafetyKeyOn(LASER_T c_laser, short safetyKeyOn);
	EXPORTED short Laser_isLaserPresent(LASER_T c_laser);
	EXPORTED void Laser_setLaserPresent(LASER_T c_laser, short laserPresent);
	EXPORTED short Laser_isLaserFault(LASER_T c_laser);
	EXPORTED void Laser_setLaserFault(LASER_T c_laser, short laserFault);
	EXPORTED short Laser_isLaserTemperatureLock(LASER_T c_laser);
	EXPORTED void Laser_setLaserTemperatureLock(LASER_T c_laser, short laserTemperatureLock);
	EXPORTED short Laser_isLaserPowered(LASER_T c_laser);
	EXPORTED void Laser_setLaserPowered(LASER_T c_laser, short laserPowered);
	EXPORTED void Laser_toString(LASER_T c_laser, JSTRING_T retval);
	EXPORTED void Laser_Destroy(LASER_T laser);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED LASER_T STDCALL Laser_Create_stdcall_1(SPECTROMETER_T spectrometer, int laserIndex);
	EXPORTED int STDCALL Laser_getLaserIndex_stdcall(LASER_T c_laser);
	EXPORTED short STDCALL Laser_isRemoteEnabled_stdcall(LASER_T c_laser);
	EXPORTED void STDCALL Laser_setRemoteEnabled_stdcall(LASER_T c_laser, short remoteEnabled);
	EXPORTED float STDCALL Laser_getLaserWavelength_stdcall(LASER_T c_laser);
	EXPORTED void STDCALL Laser_setLaserWavelength_stdcall(LASER_T c_laser, float laserWavelength, int channelIndex);
	EXPORTED void STDCALL Laser_setLaserWavelengthForAllChannels_stdcall(LASER_T c_laser, float laserWavelength);
	EXPORTED short STDCALL Laser_isSafetyKeyOn_stdcall(LASER_T c_laser);
	EXPORTED void STDCALL Laser_setSafetyKeyOn_stdcall(LASER_T c_laser, short safetyKeyOn);
	EXPORTED short STDCALL Laser_isLaserPresent_stdcall(LASER_T c_laser);
	EXPORTED void STDCALL Laser_setLaserPresent_stdcall(LASER_T c_laser, short laserPresent);
	EXPORTED short STDCALL Laser_isLaserFault_stdcall(LASER_T c_laser);
	EXPORTED void STDCALL Laser_setLaserFault_stdcall(LASER_T c_laser, short laserFault);
	EXPORTED short STDCALL Laser_isLaserTemperatureLock_stdcall(LASER_T c_laser);
	EXPORTED void STDCALL Laser_setLaserTemperatureLock_stdcall(LASER_T c_laser, short laserTemperatureLock);
	EXPORTED short STDCALL Laser_isLaserPowered_stdcall(LASER_T c_laser);
	EXPORTED void STDCALL Laser_setLaserPowered_stdcall(LASER_T c_laser, short laserPowered);
	EXPORTED void STDCALL Laser_toString_stdcall(LASER_T c_laser, JSTRING_T retval);
	EXPORTED void STDCALL Laser_Destroy_stdcall(LASER_T laser);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* LASER_H */
