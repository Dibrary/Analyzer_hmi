/**
 * File: IrradianceCalibrationFactorImpl_STSBase.h
 * Autogenerated on Fri Mar 23 13:38:37 EDT 2018 based on
 * IrradianceCalibrationFactorImpl_STSBase.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/irradiancecalibrationfactor/IrradianceCalibrationFactorImpl_STSBase
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_H
#define IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "IrradianceCalibrationFactorImpl.h"
#include "STSBase.h"
#include "USBInterface.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class IrradianceCalibrationFactorImpl;
class STSBase;
class USBInterface;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED IrradianceCalibrationFactorImpl_STSBase : public IrradianceCalibrationFactorImpl // CPPClass.tag001
{
public: 
	IrradianceCalibrationFactorImpl_STSBase(STSBase& sts, USBInterface& usb);
	DoubleArray getIrradianceCalibrationFactors();
	void setIrradianceCalibrationFactors(DoubleArray& data);
	double getCollectionArea();
	void setCollectionArea(double area);
	short hasCollectionArea();
	~IrradianceCalibrationFactorImpl_STSBase();
	// No public default Java constructor; creating one:
	IrradianceCalibrationFactorImpl_STSBase();
	// No public Java copy constructor; creating one:
	IrradianceCalibrationFactorImpl_STSBase(const IrradianceCalibrationFactorImpl_STSBase &that);
	// Creating assignment operator declaration:
	IrradianceCalibrationFactorImpl_STSBase &operator=(const IrradianceCalibrationFactorImpl_STSBase &that);

private:
	jmethodID mid_IrradianceCalibrationFactorImpl_STSBase1634;
	jmethodID mid_getIrradianceCalibrationFactors1635;
	jmethodID mid_setIrradianceCalibrationFactors1636;
	jmethodID mid_getCollectionArea1637;
	jmethodID mid_setCollectionArea1638;
	jmethodID mid_hasCollectionArea1639;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTORIMPL_T
#define EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTORIMPL_T
	typedef void* IRRADIANCECALIBRATIONFACTORIMPL_T;
#endif /* EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTORIMPL_T */
#ifndef EXTERN_TYPEDEF_STSBASE_T
#define EXTERN_TYPEDEF_STSBASE_T
	typedef void* STSBASE_T;
#endif /* EXTERN_TYPEDEF_STSBASE_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_T
#define EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_T
	typedef void* IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_T;
#endif /* EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_T */

	// No public default Java constructor; creating one:
	EXPORTED IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_T IrradianceCalibrationFactorImpl_STSBase_Create();
	EXPORTED IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_T IrradianceCalibrationFactorImpl_STSBase_Create_1(STSBASE_T sts, USBINTERFACE_T usb);
	EXPORTED void IrradianceCalibrationFactorImpl_STSBase_getIrradianceCalibrationFactors(IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_T c_irradiance_calibration_factor_impl_s_t_s_base, DOUBLEARRAY_T retval);
	EXPORTED void IrradianceCalibrationFactorImpl_STSBase_setIrradianceCalibrationFactors(IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_T c_irradiance_calibration_factor_impl_s_t_s_base, DOUBLEARRAY_T data);
	EXPORTED double IrradianceCalibrationFactorImpl_STSBase_getCollectionArea(IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_T c_irradiance_calibration_factor_impl_s_t_s_base);
	EXPORTED void IrradianceCalibrationFactorImpl_STSBase_setCollectionArea(IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_T c_irradiance_calibration_factor_impl_s_t_s_base, double area);
	EXPORTED short IrradianceCalibrationFactorImpl_STSBase_hasCollectionArea(IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_T c_irradiance_calibration_factor_impl_s_t_s_base);
	EXPORTED void IrradianceCalibrationFactorImpl_STSBase_Destroy(IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_T irradiance_calibration_factor_impl_s_t_s_base);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_T STDCALL IrradianceCalibrationFactorImpl_STSBase_Create_stdcall_1(STSBASE_T sts, USBINTERFACE_T usb);
	EXPORTED void STDCALL IrradianceCalibrationFactorImpl_STSBase_getIrradianceCalibrationFactors_stdcall(IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_T c_irradiance_calibration_factor_impl_s_t_s_base, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL IrradianceCalibrationFactorImpl_STSBase_setIrradianceCalibrationFactors_stdcall(IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_T c_irradiance_calibration_factor_impl_s_t_s_base, DOUBLEARRAY_T data);
	EXPORTED double STDCALL IrradianceCalibrationFactorImpl_STSBase_getCollectionArea_stdcall(IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_T c_irradiance_calibration_factor_impl_s_t_s_base);
	EXPORTED void STDCALL IrradianceCalibrationFactorImpl_STSBase_setCollectionArea_stdcall(IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_T c_irradiance_calibration_factor_impl_s_t_s_base, double area);
	EXPORTED short STDCALL IrradianceCalibrationFactorImpl_STSBase_hasCollectionArea_stdcall(IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_T c_irradiance_calibration_factor_impl_s_t_s_base);
	EXPORTED void STDCALL IrradianceCalibrationFactorImpl_STSBase_Destroy_stdcall(IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_T irradiance_calibration_factor_impl_s_t_s_base);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* IRRADIANCECALIBRATIONFACTORIMPL_STSBASE_H */
