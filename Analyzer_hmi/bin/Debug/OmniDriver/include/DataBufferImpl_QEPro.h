/**
 * File: DataBufferImpl_QEPro.h
 * Autogenerated on Fri Mar 23 13:38:32 EDT 2018 based on
 * DataBufferImpl_QEPro.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/buffer/DataBufferImpl_QEPro
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef DATABUFFERIMPL_QEPRO_H
#define DATABUFFERIMPL_QEPRO_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "DataBufferImpl.h"
#include "QEPro.h"
#include "USBInterface.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class DataBufferImpl;
class QEPro;
class USBInterface;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED DataBufferImpl_QEPro : public DataBufferImpl // CPPClass.tag001
{
public: 
	DataBufferImpl_QEPro(QEPro& qe, USBInterface& usbInt);
	void clearBuffer();
	int getBufferCapacity();
	int getBufferCapacityMaximum();
	int getBufferCapacityMinimum();
	int getNumberOfElements();
	void setBufferCapacity(int bufferSize);
	void abortAcquisition();
	void startAcquisition();
	void enableBuffer(short value);
	short isEnableBuffer();
	~DataBufferImpl_QEPro();
	// No public default Java constructor; creating one:
	DataBufferImpl_QEPro();
	// No public Java copy constructor; creating one:
	DataBufferImpl_QEPro(const DataBufferImpl_QEPro &that);
	// Creating assignment operator declaration:
	DataBufferImpl_QEPro &operator=(const DataBufferImpl_QEPro &that);

private:
	jmethodID mid_DataBufferImpl_QEPro980;
	jmethodID mid_clearBuffer981;
	jmethodID mid_getBufferCapacity982;
	jmethodID mid_getBufferCapacityMaximum983;
	jmethodID mid_getBufferCapacityMinimum984;
	jmethodID mid_getNumberOfElements985;
	jmethodID mid_setBufferCapacity986;
	jmethodID mid_abortAcquisition987;
	jmethodID mid_startAcquisition988;
	jmethodID mid_enableBuffer989;
	jmethodID mid_isEnableBuffer990;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_DATABUFFERIMPL_T
#define EXTERN_TYPEDEF_DATABUFFERIMPL_T
	typedef void* DATABUFFERIMPL_T;
#endif /* EXTERN_TYPEDEF_DATABUFFERIMPL_T */
#ifndef EXTERN_TYPEDEF_QEPRO_T
#define EXTERN_TYPEDEF_QEPRO_T
	typedef void* QEPRO_T;
#endif /* EXTERN_TYPEDEF_QEPRO_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_DATABUFFERIMPL_QEPRO_T
#define EXTERN_TYPEDEF_DATABUFFERIMPL_QEPRO_T
	typedef void* DATABUFFERIMPL_QEPRO_T;
#endif /* EXTERN_TYPEDEF_DATABUFFERIMPL_QEPRO_T */

	// No public default Java constructor; creating one:
	EXPORTED DATABUFFERIMPL_QEPRO_T DataBufferImpl_QEPro_Create();
	EXPORTED DATABUFFERIMPL_QEPRO_T DataBufferImpl_QEPro_Create_1(QEPRO_T qe, USBINTERFACE_T usbInt);
	EXPORTED void DataBufferImpl_QEPro_clearBuffer(DATABUFFERIMPL_QEPRO_T c_data_buffer_impl_q_e_pro);
	EXPORTED int DataBufferImpl_QEPro_getBufferCapacity(DATABUFFERIMPL_QEPRO_T c_data_buffer_impl_q_e_pro);
	EXPORTED int DataBufferImpl_QEPro_getBufferCapacityMaximum(DATABUFFERIMPL_QEPRO_T c_data_buffer_impl_q_e_pro);
	EXPORTED int DataBufferImpl_QEPro_getBufferCapacityMinimum(DATABUFFERIMPL_QEPRO_T c_data_buffer_impl_q_e_pro);
	EXPORTED int DataBufferImpl_QEPro_getNumberOfElements(DATABUFFERIMPL_QEPRO_T c_data_buffer_impl_q_e_pro);
	EXPORTED void DataBufferImpl_QEPro_setBufferCapacity(DATABUFFERIMPL_QEPRO_T c_data_buffer_impl_q_e_pro, int bufferSize);
	EXPORTED void DataBufferImpl_QEPro_abortAcquisition(DATABUFFERIMPL_QEPRO_T c_data_buffer_impl_q_e_pro);
	EXPORTED void DataBufferImpl_QEPro_startAcquisition(DATABUFFERIMPL_QEPRO_T c_data_buffer_impl_q_e_pro);
	EXPORTED void DataBufferImpl_QEPro_enableBuffer(DATABUFFERIMPL_QEPRO_T c_data_buffer_impl_q_e_pro, short value);
	EXPORTED short DataBufferImpl_QEPro_isEnableBuffer(DATABUFFERIMPL_QEPRO_T c_data_buffer_impl_q_e_pro);
	EXPORTED void DataBufferImpl_QEPro_Destroy(DATABUFFERIMPL_QEPRO_T data_buffer_impl_q_e_pro);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED DATABUFFERIMPL_QEPRO_T STDCALL DataBufferImpl_QEPro_Create_stdcall_1(QEPRO_T qe, USBINTERFACE_T usbInt);
	EXPORTED void STDCALL DataBufferImpl_QEPro_clearBuffer_stdcall(DATABUFFERIMPL_QEPRO_T c_data_buffer_impl_q_e_pro);
	EXPORTED int STDCALL DataBufferImpl_QEPro_getBufferCapacity_stdcall(DATABUFFERIMPL_QEPRO_T c_data_buffer_impl_q_e_pro);
	EXPORTED int STDCALL DataBufferImpl_QEPro_getBufferCapacityMaximum_stdcall(DATABUFFERIMPL_QEPRO_T c_data_buffer_impl_q_e_pro);
	EXPORTED int STDCALL DataBufferImpl_QEPro_getBufferCapacityMinimum_stdcall(DATABUFFERIMPL_QEPRO_T c_data_buffer_impl_q_e_pro);
	EXPORTED int STDCALL DataBufferImpl_QEPro_getNumberOfElements_stdcall(DATABUFFERIMPL_QEPRO_T c_data_buffer_impl_q_e_pro);
	EXPORTED void STDCALL DataBufferImpl_QEPro_setBufferCapacity_stdcall(DATABUFFERIMPL_QEPRO_T c_data_buffer_impl_q_e_pro, int bufferSize);
	EXPORTED void STDCALL DataBufferImpl_QEPro_abortAcquisition_stdcall(DATABUFFERIMPL_QEPRO_T c_data_buffer_impl_q_e_pro);
	EXPORTED void STDCALL DataBufferImpl_QEPro_startAcquisition_stdcall(DATABUFFERIMPL_QEPRO_T c_data_buffer_impl_q_e_pro);
	EXPORTED void STDCALL DataBufferImpl_QEPro_enableBuffer_stdcall(DATABUFFERIMPL_QEPRO_T c_data_buffer_impl_q_e_pro, short value);
	EXPORTED short STDCALL DataBufferImpl_QEPro_isEnableBuffer_stdcall(DATABUFFERIMPL_QEPRO_T c_data_buffer_impl_q_e_pro);
	EXPORTED void STDCALL DataBufferImpl_QEPro_Destroy_stdcall(DATABUFFERIMPL_QEPRO_T data_buffer_impl_q_e_pro);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* DATABUFFERIMPL_QEPRO_H */
