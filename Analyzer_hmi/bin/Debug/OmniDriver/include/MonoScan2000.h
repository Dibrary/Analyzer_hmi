/**
 * File: MonoScan2000.h
 * Autogenerated on Fri Mar 23 13:38:25 EDT 2018 based on
 * MonoScan2000.java
 * for the Java class
 * com/oceanoptics/omnidriver/accessories/mikropack/devices/MonoScan2000
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef MONOSCAN2000_H
#define MONOSCAN2000_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "MPDeviceBase.h"
#include "UniRS232.h"
#include "JStringArray.h"
#include "PrintStream.h"
#include "Node.h"
#include "JString.h"
#include "GetStatus$Status.h"
#include "GetOperationStatus$OperationStatus.h"
#include "GetFaultStatus$FaultStatus.h"
#include "GetActualStatus$ActualStatus.h"
#include "GetActualHomingStatus$ActualHomingStatus.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class MPDeviceBase;
class UniRS232;
class JStringArray;
class PrintStream;
class Node;
class JString;
class GetStatus$Status;
class GetOperationStatus$OperationStatus;
class GetFaultStatus$FaultStatus;
class GetActualStatus$ActualStatus;
class GetActualHomingStatus$ActualHomingStatus;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED MonoScan2000 : public MPDeviceBase // CPPClass.tag001
{
public: 
	MonoScan2000(UniRS232& serPort);
	int getSerialNumber();
	void goToWavelength(double nm);
	void shiftWavelength(double shift);
	double getCurrentWavelength();
	void printEEPROM(JStringArray& param0, PrintStream& param1);
	void setResponseMode(Node& param0, int param1);
	void toggleDigitalOutput(Node& param0);
	void setVelocity(Node& param0, int param1);
	void setSpeed(Node& param0, int param1);
	void setOutputError(Node& param0);
	void setOutputDigital(Node& param0);
	void setHomePosition(Node& param0);
	void setDigitalOutput(Node& param0);
	void saveToEEPROM(Node& param0);
	void runHomingSequence(Node& param0);
	void runHallHoming(Node& param0);
	void resumeProgram(Node& param0);
	void resetNode(Node& param0);
	void notifyPositionEnable(Node& param0);
	void notifyPositionDisable(Node& param0);
	void moveAndWait(Node& param0, long long param1);
	void moveAndWait(Node& param0);
	void move(Node& param0);
	void loadRelativePosition(Node& param0, int param1);
	void loadAbsolutePosition(Node& param0, int param1);
	JString getVersion(Node& param0);
	int getVelocity(Node& param0);
	int getTemperature(Node& param0);
	int getTargetPosition(Node& param0);
	int getSpeed(Node& param0);
	GetStatus$Status getStatus(Node& param0);
	JStringArray getProgramSequence(Node& param0);
	int getPositiveLimit(Node& param0);
	int getPosition(Node& param0);
	GetOperationStatus$OperationStatus getOperationStatus(Node& param0);
	int getNodeNumber(Node& param0);
	int getNegativeLimit(Node& param0);
	int getMaximumSpeed(Node& param0);
	GetFaultStatus$FaultStatus getFaultStatus(Node& param0);
	int getCurrentActualVelocity(Node& param0);
	JString getControllerType(Node& param0);
	JString getControllerSerialNumber(Node& param0);
	GetActualStatus$ActualStatus getActualStatus(Node& param0);
	GetActualHomingStatus$ActualHomingStatus getActualHomingStatus(Node& param0);
	void endProgramSequence(Node& param0);
	void enableProgram(Node& param0);
	void enableDrive(Node& param0);
	void disableProgram(Node& param0);
	void disableDrive(Node& param0);
	void clearDigitalOutput(Node& param0);
	void beginProgrammingSequence(Node& param0);
	UniRS232 getSerialPort();
	void setSerialPort(UniRS232& param0);
	~MonoScan2000();
	// No public default Java constructor; creating one:
	MonoScan2000();
	// No public Java copy constructor; creating one:
	MonoScan2000(const MonoScan2000 &that);
	// Creating assignment operator declaration:
	MonoScan2000 &operator=(const MonoScan2000 &that);

private:
	jmethodID mid_MonoScan2000365;
	jmethodID mid_getSerialNumber366;
	jmethodID mid_goToWavelength367;
	jmethodID mid_shiftWavelength368;
	jmethodID mid_getCurrentWavelength369;
	jmethodID mid_printEEPROM370;
	jmethodID mid_setResponseMode371;
	jmethodID mid_toggleDigitalOutput372;
	jmethodID mid_setVelocity373;
	jmethodID mid_setSpeed374;
	jmethodID mid_setOutputError375;
	jmethodID mid_setOutputDigital376;
	jmethodID mid_setHomePosition377;
	jmethodID mid_setDigitalOutput378;
	jmethodID mid_saveToEEPROM379;
	jmethodID mid_runHomingSequence380;
	jmethodID mid_runHallHoming381;
	jmethodID mid_resumeProgram382;
	jmethodID mid_resetNode383;
	jmethodID mid_notifyPositionEnable384;
	jmethodID mid_notifyPositionDisable385;
	jmethodID mid_moveAndWait386;
	jmethodID mid_moveAndWait387;
	jmethodID mid_move388;
	jmethodID mid_loadRelativePosition389;
	jmethodID mid_loadAbsolutePosition390;
	jmethodID mid_getVersion391;
	jmethodID mid_getVelocity392;
	jmethodID mid_getTemperature393;
	jmethodID mid_getTargetPosition394;
	jmethodID mid_getSpeed395;
	jmethodID mid_getStatus396;
	jmethodID mid_getProgramSequence397;
	jmethodID mid_getPositiveLimit398;
	jmethodID mid_getPosition399;
	jmethodID mid_getOperationStatus400;
	jmethodID mid_getNodeNumber401;
	jmethodID mid_getNegativeLimit402;
	jmethodID mid_getMaximumSpeed403;
	jmethodID mid_getFaultStatus404;
	jmethodID mid_getCurrentActualVelocity405;
	jmethodID mid_getControllerType406;
	jmethodID mid_getControllerSerialNumber407;
	jmethodID mid_getActualStatus408;
	jmethodID mid_getActualHomingStatus409;
	jmethodID mid_endProgramSequence410;
	jmethodID mid_enableProgram411;
	jmethodID mid_enableDrive412;
	jmethodID mid_disableProgram413;
	jmethodID mid_disableDrive414;
	jmethodID mid_clearDigitalOutput415;
	jmethodID mid_beginProgrammingSequence416;
	jmethodID mid_getSerialPort417;
	jmethodID mid_setSerialPort418;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_MPDEVICEBASE_T
#define EXTERN_TYPEDEF_MPDEVICEBASE_T
	typedef void* MPDEVICEBASE_T;
#endif /* EXTERN_TYPEDEF_MPDEVICEBASE_T */
#ifndef EXTERN_TYPEDEF_UNIRS232_T
#define EXTERN_TYPEDEF_UNIRS232_T
	typedef void* UNIRS232_T;
#endif /* EXTERN_TYPEDEF_UNIRS232_T */
#ifndef EXTERN_TYPEDEF_JSTRINGARRAY_T
#define EXTERN_TYPEDEF_JSTRINGARRAY_T
	typedef void* JSTRINGARRAY_T;
#endif /* EXTERN_TYPEDEF_JSTRINGARRAY_T */
#ifndef EXTERN_TYPEDEF_PRINTSTREAM_T
#define EXTERN_TYPEDEF_PRINTSTREAM_T
	typedef void* PRINTSTREAM_T;
#endif /* EXTERN_TYPEDEF_PRINTSTREAM_T */
#ifndef EXTERN_TYPEDEF_NODE_T
#define EXTERN_TYPEDEF_NODE_T
	typedef void* NODE_T;
#endif /* EXTERN_TYPEDEF_NODE_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_GETSTATUS$STATUS_T
#define EXTERN_TYPEDEF_GETSTATUS$STATUS_T
	typedef void* GETSTATUS$STATUS_T;
#endif /* EXTERN_TYPEDEF_GETSTATUS$STATUS_T */
#ifndef EXTERN_TYPEDEF_GETOPERATIONSTATUS$OPERATIONSTATUS_T
#define EXTERN_TYPEDEF_GETOPERATIONSTATUS$OPERATIONSTATUS_T
	typedef void* GETOPERATIONSTATUS$OPERATIONSTATUS_T;
#endif /* EXTERN_TYPEDEF_GETOPERATIONSTATUS$OPERATIONSTATUS_T */
#ifndef EXTERN_TYPEDEF_GETFAULTSTATUS$FAULTSTATUS_T
#define EXTERN_TYPEDEF_GETFAULTSTATUS$FAULTSTATUS_T
	typedef void* GETFAULTSTATUS$FAULTSTATUS_T;
#endif /* EXTERN_TYPEDEF_GETFAULTSTATUS$FAULTSTATUS_T */
#ifndef EXTERN_TYPEDEF_GETACTUALSTATUS$ACTUALSTATUS_T
#define EXTERN_TYPEDEF_GETACTUALSTATUS$ACTUALSTATUS_T
	typedef void* GETACTUALSTATUS$ACTUALSTATUS_T;
#endif /* EXTERN_TYPEDEF_GETACTUALSTATUS$ACTUALSTATUS_T */
#ifndef EXTERN_TYPEDEF_GETACTUALHOMINGSTATUS$ACTUALHOMINGSTATUS_T
#define EXTERN_TYPEDEF_GETACTUALHOMINGSTATUS$ACTUALHOMINGSTATUS_T
	typedef void* GETACTUALHOMINGSTATUS$ACTUALHOMINGSTATUS_T;
#endif /* EXTERN_TYPEDEF_GETACTUALHOMINGSTATUS$ACTUALHOMINGSTATUS_T */
#ifndef EXTERN_TYPEDEF_MONOSCAN2000_T
#define EXTERN_TYPEDEF_MONOSCAN2000_T
	typedef void* MONOSCAN2000_T;
#endif /* EXTERN_TYPEDEF_MONOSCAN2000_T */

	// No public default Java constructor; creating one:
	EXPORTED MONOSCAN2000_T MonoScan2000_Create();
	EXPORTED MONOSCAN2000_T MonoScan2000_Create_1(UNIRS232_T serPort);
	EXPORTED int MonoScan2000_getSerialNumber(MONOSCAN2000_T c_mono_scan2000);
	EXPORTED void MonoScan2000_goToWavelength(MONOSCAN2000_T c_mono_scan2000, double nm);
	EXPORTED void MonoScan2000_shiftWavelength(MONOSCAN2000_T c_mono_scan2000, double shift);
	EXPORTED double MonoScan2000_getCurrentWavelength(MONOSCAN2000_T c_mono_scan2000);
	EXPORTED void MonoScan2000_printEEPROM(MONOSCAN2000_T c_mono_scan2000, JSTRINGARRAY_T param0, PRINTSTREAM_T param1);
	EXPORTED void MonoScan2000_setResponseMode(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, int param1);
	EXPORTED void MonoScan2000_toggleDigitalOutput(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_setVelocity(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, int param1);
	EXPORTED void MonoScan2000_setSpeed(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, int param1);
	EXPORTED void MonoScan2000_setOutputError(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_setOutputDigital(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_setHomePosition(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_setDigitalOutput(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_saveToEEPROM(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_runHomingSequence(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_runHallHoming(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_resumeProgram(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_resetNode(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_notifyPositionEnable(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_notifyPositionDisable(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_moveAndWait(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, long long param1);
	EXPORTED void MonoScan2000_moveAndWait_1(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_move(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_loadRelativePosition(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, int param1);
	EXPORTED void MonoScan2000_loadAbsolutePosition(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, int param1);
	EXPORTED void MonoScan2000_getVersion(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, JSTRING_T retval);
	EXPORTED int MonoScan2000_getVelocity(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED int MonoScan2000_getTemperature(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED int MonoScan2000_getTargetPosition(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED int MonoScan2000_getSpeed(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_getStatus(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, GETSTATUS$STATUS_T retval);
	EXPORTED void MonoScan2000_getProgramSequence(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, JSTRINGARRAY_T retval);
	EXPORTED int MonoScan2000_getPositiveLimit(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED int MonoScan2000_getPosition(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_getOperationStatus(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, GETOPERATIONSTATUS$OPERATIONSTATUS_T retval);
	EXPORTED int MonoScan2000_getNodeNumber(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED int MonoScan2000_getNegativeLimit(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED int MonoScan2000_getMaximumSpeed(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_getFaultStatus(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, GETFAULTSTATUS$FAULTSTATUS_T retval);
	EXPORTED int MonoScan2000_getCurrentActualVelocity(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_getControllerType(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, JSTRING_T retval);
	EXPORTED void MonoScan2000_getControllerSerialNumber(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, JSTRING_T retval);
	EXPORTED void MonoScan2000_getActualStatus(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, GETACTUALSTATUS$ACTUALSTATUS_T retval);
	EXPORTED void MonoScan2000_getActualHomingStatus(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, GETACTUALHOMINGSTATUS$ACTUALHOMINGSTATUS_T retval);
	EXPORTED void MonoScan2000_endProgramSequence(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_enableProgram(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_enableDrive(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_disableProgram(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_disableDrive(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_clearDigitalOutput(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_beginProgrammingSequence(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void MonoScan2000_getSerialPort(MONOSCAN2000_T c_mono_scan2000, UNIRS232_T retval);
	EXPORTED void MonoScan2000_setSerialPort(MONOSCAN2000_T c_mono_scan2000, UNIRS232_T param0);
	EXPORTED void MonoScan2000_Destroy(MONOSCAN2000_T mono_scan2000);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED MONOSCAN2000_T STDCALL MonoScan2000_Create_stdcall_1(UNIRS232_T serPort);
	EXPORTED int STDCALL MonoScan2000_getSerialNumber_stdcall(MONOSCAN2000_T c_mono_scan2000);
	EXPORTED void STDCALL MonoScan2000_goToWavelength_stdcall(MONOSCAN2000_T c_mono_scan2000, double nm);
	EXPORTED void STDCALL MonoScan2000_shiftWavelength_stdcall(MONOSCAN2000_T c_mono_scan2000, double shift);
	EXPORTED double STDCALL MonoScan2000_getCurrentWavelength_stdcall(MONOSCAN2000_T c_mono_scan2000);
	EXPORTED void STDCALL MonoScan2000_printEEPROM_stdcall(MONOSCAN2000_T c_mono_scan2000, JSTRINGARRAY_T param0, PRINTSTREAM_T param1);
	EXPORTED void STDCALL MonoScan2000_setResponseMode_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, int param1);
	EXPORTED void STDCALL MonoScan2000_toggleDigitalOutput_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_setVelocity_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, int param1);
	EXPORTED void STDCALL MonoScan2000_setSpeed_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, int param1);
	EXPORTED void STDCALL MonoScan2000_setOutputError_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_setOutputDigital_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_setHomePosition_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_setDigitalOutput_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_saveToEEPROM_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_runHomingSequence_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_runHallHoming_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_resumeProgram_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_resetNode_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_notifyPositionEnable_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_notifyPositionDisable_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_moveAndWait_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, long long param1);
	EXPORTED void STDCALL MonoScan2000_moveAndWait_stdcall_1(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_move_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_loadRelativePosition_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, int param1);
	EXPORTED void STDCALL MonoScan2000_loadAbsolutePosition_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, int param1);
	EXPORTED void STDCALL MonoScan2000_getVersion_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, JSTRING_T retval);
	EXPORTED int STDCALL MonoScan2000_getVelocity_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED int STDCALL MonoScan2000_getTemperature_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED int STDCALL MonoScan2000_getTargetPosition_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED int STDCALL MonoScan2000_getSpeed_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_getStatus_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, GETSTATUS$STATUS_T retval);
	EXPORTED void STDCALL MonoScan2000_getProgramSequence_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, JSTRINGARRAY_T retval);
	EXPORTED int STDCALL MonoScan2000_getPositiveLimit_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED int STDCALL MonoScan2000_getPosition_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_getOperationStatus_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, GETOPERATIONSTATUS$OPERATIONSTATUS_T retval);
	EXPORTED int STDCALL MonoScan2000_getNodeNumber_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED int STDCALL MonoScan2000_getNegativeLimit_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED int STDCALL MonoScan2000_getMaximumSpeed_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_getFaultStatus_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, GETFAULTSTATUS$FAULTSTATUS_T retval);
	EXPORTED int STDCALL MonoScan2000_getCurrentActualVelocity_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_getControllerType_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, JSTRING_T retval);
	EXPORTED void STDCALL MonoScan2000_getControllerSerialNumber_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, JSTRING_T retval);
	EXPORTED void STDCALL MonoScan2000_getActualStatus_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, GETACTUALSTATUS$ACTUALSTATUS_T retval);
	EXPORTED void STDCALL MonoScan2000_getActualHomingStatus_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0, GETACTUALHOMINGSTATUS$ACTUALHOMINGSTATUS_T retval);
	EXPORTED void STDCALL MonoScan2000_endProgramSequence_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_enableProgram_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_enableDrive_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_disableProgram_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_disableDrive_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_clearDigitalOutput_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_beginProgrammingSequence_stdcall(MONOSCAN2000_T c_mono_scan2000, NODE_T param0);
	EXPORTED void STDCALL MonoScan2000_getSerialPort_stdcall(MONOSCAN2000_T c_mono_scan2000, UNIRS232_T retval);
	EXPORTED void STDCALL MonoScan2000_setSerialPort_stdcall(MONOSCAN2000_T c_mono_scan2000, UNIRS232_T param0);
	EXPORTED void STDCALL MonoScan2000_Destroy_stdcall(MONOSCAN2000_T mono_scan2000);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* MONOSCAN2000_H */
