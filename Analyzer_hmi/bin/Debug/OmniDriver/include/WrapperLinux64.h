/**
 * File: WrapperLinux64.h
 * Autogenerated on Fri Mar 23 13:38:28 EDT 2018 based on
 * WrapperLinux64.java
 * for the Java class
 * com/oceanoptics/omnidriver/api/wrapper/WrapperLinux64
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef WRAPPERLINUX64_H
#define WRAPPERLINUX64_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED WrapperLinux64 : public BaseJavaClass // CPPClass.tag001
{
public: 
	WrapperLinux64();
	void test1();
	void test2(int var);
	void test3(JString& mystr);
	JString test4();
	int test5();
	void test6();
	void test7();
	void test8();
	int openAllSpectrometers();
	JString getSerialNumber(int spectrometerIndex);
	void setIntegrationTime(int spectrometerIndex, int usec);
	void setIntegrationTime(int spectrometerIndex, int channelIndex, int usec);
	DoubleArray getSpectrum(int spectrometerIndex);
	DoubleArray getSpectrum(int spectrometerIndex, int channelIndex);
	~WrapperLinux64();
	// No public Java copy constructor; creating one:
	WrapperLinux64(const WrapperLinux64 &that);
	// Creating assignment operator declaration:
	WrapperLinux64 &operator=(const WrapperLinux64 &that);

private:
	jmethodID mid_WrapperLinux64641;
	jmethodID mid_test1642;
	jmethodID mid_test2643;
	jmethodID mid_test3644;
	jmethodID mid_test4645;
	jmethodID mid_test5646;
	jmethodID mid_test6647;
	jmethodID mid_test7648;
	jmethodID mid_test8649;
	jmethodID mid_openAllSpectrometers650;
	jmethodID mid_getSerialNumber651;
	jmethodID mid_setIntegrationTime652;
	jmethodID mid_setIntegrationTime653;
	jmethodID mid_getSpectrum654;
	jmethodID mid_getSpectrum655;
	jfieldID fid_lastException;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_WRAPPERLINUX64_T
#define EXTERN_TYPEDEF_WRAPPERLINUX64_T
	typedef void* WRAPPERLINUX64_T;
#endif /* EXTERN_TYPEDEF_WRAPPERLINUX64_T */

	EXPORTED WRAPPERLINUX64_T WrapperLinux64_Create();
	EXPORTED void WrapperLinux64_test1(WRAPPERLINUX64_T c_wrapper_linux64);
	EXPORTED void WrapperLinux64_test2(WRAPPERLINUX64_T c_wrapper_linux64, int var);
	EXPORTED void WrapperLinux64_test3(WRAPPERLINUX64_T c_wrapper_linux64, JSTRING_T mystr);
	EXPORTED void WrapperLinux64_test4(WRAPPERLINUX64_T c_wrapper_linux64, JSTRING_T retval);
	EXPORTED int WrapperLinux64_test5(WRAPPERLINUX64_T c_wrapper_linux64);
	EXPORTED void WrapperLinux64_test6(WRAPPERLINUX64_T c_wrapper_linux64);
	EXPORTED void WrapperLinux64_test7(WRAPPERLINUX64_T c_wrapper_linux64);
	EXPORTED void WrapperLinux64_test8(WRAPPERLINUX64_T c_wrapper_linux64);
	EXPORTED int WrapperLinux64_openAllSpectrometers(WRAPPERLINUX64_T c_wrapper_linux64);
	EXPORTED void WrapperLinux64_getSerialNumber(WRAPPERLINUX64_T c_wrapper_linux64, int spectrometerIndex, JSTRING_T retval);
	EXPORTED void WrapperLinux64_setIntegrationTime(WRAPPERLINUX64_T c_wrapper_linux64, int spectrometerIndex, int usec);
	EXPORTED void WrapperLinux64_setIntegrationTime_1(WRAPPERLINUX64_T c_wrapper_linux64, int spectrometerIndex, int channelIndex, int usec);
	EXPORTED void WrapperLinux64_getSpectrum(WRAPPERLINUX64_T c_wrapper_linux64, int spectrometerIndex, DOUBLEARRAY_T retval);
	EXPORTED void WrapperLinux64_getSpectrum_1(WRAPPERLINUX64_T c_wrapper_linux64, int spectrometerIndex, int channelIndex, DOUBLEARRAY_T retval);
	EXPORTED void WrapperLinux64_Destroy(WRAPPERLINUX64_T wrapper_linux64);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED WRAPPERLINUX64_T STDCALL WrapperLinux64_Create_stdcall();
	EXPORTED void STDCALL WrapperLinux64_test1_stdcall(WRAPPERLINUX64_T c_wrapper_linux64);
	EXPORTED void STDCALL WrapperLinux64_test2_stdcall(WRAPPERLINUX64_T c_wrapper_linux64, int var);
	EXPORTED void STDCALL WrapperLinux64_test3_stdcall(WRAPPERLINUX64_T c_wrapper_linux64, JSTRING_T mystr);
	EXPORTED void STDCALL WrapperLinux64_test4_stdcall(WRAPPERLINUX64_T c_wrapper_linux64, JSTRING_T retval);
	EXPORTED int STDCALL WrapperLinux64_test5_stdcall(WRAPPERLINUX64_T c_wrapper_linux64);
	EXPORTED void STDCALL WrapperLinux64_test6_stdcall(WRAPPERLINUX64_T c_wrapper_linux64);
	EXPORTED void STDCALL WrapperLinux64_test7_stdcall(WRAPPERLINUX64_T c_wrapper_linux64);
	EXPORTED void STDCALL WrapperLinux64_test8_stdcall(WRAPPERLINUX64_T c_wrapper_linux64);
	EXPORTED int STDCALL WrapperLinux64_openAllSpectrometers_stdcall(WRAPPERLINUX64_T c_wrapper_linux64);
	EXPORTED void STDCALL WrapperLinux64_getSerialNumber_stdcall(WRAPPERLINUX64_T c_wrapper_linux64, int spectrometerIndex, JSTRING_T retval);
	EXPORTED void STDCALL WrapperLinux64_setIntegrationTime_stdcall(WRAPPERLINUX64_T c_wrapper_linux64, int spectrometerIndex, int usec);
	EXPORTED void STDCALL WrapperLinux64_setIntegrationTime_stdcall_1(WRAPPERLINUX64_T c_wrapper_linux64, int spectrometerIndex, int channelIndex, int usec);
	EXPORTED void STDCALL WrapperLinux64_getSpectrum_stdcall(WRAPPERLINUX64_T c_wrapper_linux64, int spectrometerIndex, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL WrapperLinux64_getSpectrum_stdcall_1(WRAPPERLINUX64_T c_wrapper_linux64, int spectrometerIndex, int channelIndex, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL WrapperLinux64_Destroy_stdcall(WRAPPERLINUX64_T wrapper_linux64);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* WRAPPERLINUX64_H */
