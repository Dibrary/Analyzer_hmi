/**
 * File: MultiChannelProvider.h
 * Autogenerated on Fri Mar 23 13:38:38 EDT 2018 based on
 * MultiChannelProvider.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/multichannelprovider/MultiChannelProvider
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef MULTICHANNELPROVIDER_H
#define MULTICHANNELPROVIDER_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "SpectrometerChannelArray.h"
#include "MultiChannelListener.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class SpectrometerChannelArray;
class MultiChannelListener;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED MultiChannelProvider : public BaseJavaClass // CPPClass.tag001
{
public: 
	int getNumberOfChannels();
	ShortArray getChannelsPresent();
	short isChannelPresent(int param0);
	int getNumberOfEnabledChannels();
	void setChannels(SpectrometerChannelArray& param0);
	IntArray getChannelIndices();
	void setChannelMux(int param0);
	void setChannelStatus(int param0, short param1);
	void setDeepWellStatus(short param0);
	void setChannelPresent(int param0, short param1);
	short isRotatorEnabled();
	short isDeepWell();
	void setRotatorEnabled(short param0);
	short isInterpolationEnabled();
	void setInterpolationEnabled(short param0);
	void addChannelListener(MultiChannelListener& param0);
	void removeChannelListener(MultiChannelListener& param0);
	~MultiChannelProvider();
	// No public default Java constructor; creating one:
	MultiChannelProvider();
	// No public Java copy constructor; creating one:
	MultiChannelProvider(const MultiChannelProvider &that);
	// Creating assignment operator declaration:
	MultiChannelProvider &operator=(const MultiChannelProvider &that);

private:
	jmethodID mid_getNumberOfChannels1761;
	jmethodID mid_getChannelsPresent1762;
	jmethodID mid_isChannelPresent1763;
	jmethodID mid_getNumberOfEnabledChannels1764;
	jmethodID mid_setChannels1765;
	jmethodID mid_getChannelIndices1766;
	jmethodID mid_setChannelMux1767;
	jmethodID mid_setChannelStatus1768;
	jmethodID mid_setDeepWellStatus1769;
	jmethodID mid_setChannelPresent1770;
	jmethodID mid_isRotatorEnabled1771;
	jmethodID mid_isDeepWell1772;
	jmethodID mid_setRotatorEnabled1773;
	jmethodID mid_isInterpolationEnabled1774;
	jmethodID mid_setInterpolationEnabled1775;
	jmethodID mid_addChannelListener1776;
	jmethodID mid_removeChannelListener1777;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_SPECTROMETERCHANNELARRAY_T
#define EXTERN_TYPEDEF_SPECTROMETERCHANNELARRAY_T
	typedef void* SPECTROMETERCHANNELARRAY_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERCHANNELARRAY_T */
#ifndef EXTERN_TYPEDEF_MULTICHANNELLISTENER_T
#define EXTERN_TYPEDEF_MULTICHANNELLISTENER_T
	typedef void* MULTICHANNELLISTENER_T;
#endif /* EXTERN_TYPEDEF_MULTICHANNELLISTENER_T */
#ifndef EXTERN_TYPEDEF_MULTICHANNELPROVIDER_T
#define EXTERN_TYPEDEF_MULTICHANNELPROVIDER_T
	typedef void* MULTICHANNELPROVIDER_T;
#endif /* EXTERN_TYPEDEF_MULTICHANNELPROVIDER_T */

	// No public default Java constructor; creating one:
	EXPORTED MULTICHANNELPROVIDER_T MultiChannelProvider_Create();
	EXPORTED int MultiChannelProvider_getNumberOfChannels(MULTICHANNELPROVIDER_T c_multi_channel_provider);
	EXPORTED void MultiChannelProvider_getChannelsPresent(MULTICHANNELPROVIDER_T c_multi_channel_provider, SHORTARRAY_T retval);
	EXPORTED short MultiChannelProvider_isChannelPresent(MULTICHANNELPROVIDER_T c_multi_channel_provider, int param0);
	EXPORTED int MultiChannelProvider_getNumberOfEnabledChannels(MULTICHANNELPROVIDER_T c_multi_channel_provider);
	EXPORTED void MultiChannelProvider_setChannels(MULTICHANNELPROVIDER_T c_multi_channel_provider, SPECTROMETERCHANNELARRAY_T param0);
	EXPORTED void MultiChannelProvider_getChannelIndices(MULTICHANNELPROVIDER_T c_multi_channel_provider, INTARRAY_T retval);
	EXPORTED void MultiChannelProvider_setChannelMux(MULTICHANNELPROVIDER_T c_multi_channel_provider, int param0);
	EXPORTED void MultiChannelProvider_setChannelStatus(MULTICHANNELPROVIDER_T c_multi_channel_provider, int param0, short param1);
	EXPORTED void MultiChannelProvider_setDeepWellStatus(MULTICHANNELPROVIDER_T c_multi_channel_provider, short param0);
	EXPORTED void MultiChannelProvider_setChannelPresent(MULTICHANNELPROVIDER_T c_multi_channel_provider, int param0, short param1);
	EXPORTED short MultiChannelProvider_isRotatorEnabled(MULTICHANNELPROVIDER_T c_multi_channel_provider);
	EXPORTED short MultiChannelProvider_isDeepWell(MULTICHANNELPROVIDER_T c_multi_channel_provider);
	EXPORTED void MultiChannelProvider_setRotatorEnabled(MULTICHANNELPROVIDER_T c_multi_channel_provider, short param0);
	EXPORTED short MultiChannelProvider_isInterpolationEnabled(MULTICHANNELPROVIDER_T c_multi_channel_provider);
	EXPORTED void MultiChannelProvider_setInterpolationEnabled(MULTICHANNELPROVIDER_T c_multi_channel_provider, short param0);
	EXPORTED void MultiChannelProvider_addChannelListener(MULTICHANNELPROVIDER_T c_multi_channel_provider, MULTICHANNELLISTENER_T param0);
	EXPORTED void MultiChannelProvider_removeChannelListener(MULTICHANNELPROVIDER_T c_multi_channel_provider, MULTICHANNELLISTENER_T param0);
	EXPORTED void MultiChannelProvider_Destroy(MULTICHANNELPROVIDER_T multi_channel_provider);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED int STDCALL MultiChannelProvider_getNumberOfChannels_stdcall(MULTICHANNELPROVIDER_T c_multi_channel_provider);
	EXPORTED void STDCALL MultiChannelProvider_getChannelsPresent_stdcall(MULTICHANNELPROVIDER_T c_multi_channel_provider, SHORTARRAY_T retval);
	EXPORTED short STDCALL MultiChannelProvider_isChannelPresent_stdcall(MULTICHANNELPROVIDER_T c_multi_channel_provider, int param0);
	EXPORTED int STDCALL MultiChannelProvider_getNumberOfEnabledChannels_stdcall(MULTICHANNELPROVIDER_T c_multi_channel_provider);
	EXPORTED void STDCALL MultiChannelProvider_setChannels_stdcall(MULTICHANNELPROVIDER_T c_multi_channel_provider, SPECTROMETERCHANNELARRAY_T param0);
	EXPORTED void STDCALL MultiChannelProvider_getChannelIndices_stdcall(MULTICHANNELPROVIDER_T c_multi_channel_provider, INTARRAY_T retval);
	EXPORTED void STDCALL MultiChannelProvider_setChannelMux_stdcall(MULTICHANNELPROVIDER_T c_multi_channel_provider, int param0);
	EXPORTED void STDCALL MultiChannelProvider_setChannelStatus_stdcall(MULTICHANNELPROVIDER_T c_multi_channel_provider, int param0, short param1);
	EXPORTED void STDCALL MultiChannelProvider_setDeepWellStatus_stdcall(MULTICHANNELPROVIDER_T c_multi_channel_provider, short param0);
	EXPORTED void STDCALL MultiChannelProvider_setChannelPresent_stdcall(MULTICHANNELPROVIDER_T c_multi_channel_provider, int param0, short param1);
	EXPORTED short STDCALL MultiChannelProvider_isRotatorEnabled_stdcall(MULTICHANNELPROVIDER_T c_multi_channel_provider);
	EXPORTED short STDCALL MultiChannelProvider_isDeepWell_stdcall(MULTICHANNELPROVIDER_T c_multi_channel_provider);
	EXPORTED void STDCALL MultiChannelProvider_setRotatorEnabled_stdcall(MULTICHANNELPROVIDER_T c_multi_channel_provider, short param0);
	EXPORTED short STDCALL MultiChannelProvider_isInterpolationEnabled_stdcall(MULTICHANNELPROVIDER_T c_multi_channel_provider);
	EXPORTED void STDCALL MultiChannelProvider_setInterpolationEnabled_stdcall(MULTICHANNELPROVIDER_T c_multi_channel_provider, short param0);
	EXPORTED void STDCALL MultiChannelProvider_addChannelListener_stdcall(MULTICHANNELPROVIDER_T c_multi_channel_provider, MULTICHANNELLISTENER_T param0);
	EXPORTED void STDCALL MultiChannelProvider_removeChannelListener_stdcall(MULTICHANNELPROVIDER_T c_multi_channel_provider, MULTICHANNELLISTENER_T param0);
	EXPORTED void STDCALL MultiChannelProvider_Destroy_stdcall(MULTICHANNELPROVIDER_T multi_channel_provider);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* MULTICHANNELPROVIDER_H */
