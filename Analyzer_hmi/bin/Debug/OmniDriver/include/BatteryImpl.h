/**
 * File: BatteryImpl.h
 * Autogenerated on Fri Mar 23 13:38:30 EDT 2018 based on
 * BatteryImpl.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/battery/BatteryImpl
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef BATTERYIMPL_H
#define BATTERYIMPL_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBFeature.h"
#include "OceanBinaryProtocolProvider.h"
#include "USBInterface.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBFeature;
class OceanBinaryProtocolProvider;
class USBInterface;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED BatteryImpl : public USBFeature // CPPClass.tag001
{
public: 
	BatteryImpl(OceanBinaryProtocolProvider& device, USBInterface& usbInt);
	short hasBattery();
	int getChargeLevel();
	short isCharging();
	double getBatteryTemperature();
	void chargeAccumulator();
	~BatteryImpl();
	// No public default Java constructor; creating one:
	BatteryImpl();
	// No public Java copy constructor; creating one:
	BatteryImpl(const BatteryImpl &that);
	// Creating assignment operator declaration:
	BatteryImpl &operator=(const BatteryImpl &that);

private:
	jmethodID mid_BatteryImpl898;
	jmethodID mid_hasBattery899;
	jmethodID mid_getChargeLevel900;
	jmethodID mid_isCharging901;
	jmethodID mid_getBatteryTemperature902;
	jmethodID mid_chargeAccumulator903;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBFEATURE_T
#define EXTERN_TYPEDEF_USBFEATURE_T
	typedef void* USBFEATURE_T;
#endif /* EXTERN_TYPEDEF_USBFEATURE_T */
#ifndef EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T
#define EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T
	typedef void* OCEANBINARYPROTOCOLPROVIDER_T;
#endif /* EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_BATTERYIMPL_T
#define EXTERN_TYPEDEF_BATTERYIMPL_T
	typedef void* BATTERYIMPL_T;
#endif /* EXTERN_TYPEDEF_BATTERYIMPL_T */

	// No public default Java constructor; creating one:
	EXPORTED BATTERYIMPL_T BatteryImpl_Create();
	EXPORTED BATTERYIMPL_T BatteryImpl_Create_1(OCEANBINARYPROTOCOLPROVIDER_T device, USBINTERFACE_T usbInt);
	EXPORTED short BatteryImpl_hasBattery(BATTERYIMPL_T c_battery_impl);
	EXPORTED int BatteryImpl_getChargeLevel(BATTERYIMPL_T c_battery_impl);
	EXPORTED short BatteryImpl_isCharging(BATTERYIMPL_T c_battery_impl);
	EXPORTED double BatteryImpl_getBatteryTemperature(BATTERYIMPL_T c_battery_impl);
	EXPORTED void BatteryImpl_chargeAccumulator(BATTERYIMPL_T c_battery_impl);
	EXPORTED void BatteryImpl_Destroy(BATTERYIMPL_T battery_impl);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED BATTERYIMPL_T STDCALL BatteryImpl_Create_stdcall_1(OCEANBINARYPROTOCOLPROVIDER_T device, USBINTERFACE_T usbInt);
	EXPORTED short STDCALL BatteryImpl_hasBattery_stdcall(BATTERYIMPL_T c_battery_impl);
	EXPORTED int STDCALL BatteryImpl_getChargeLevel_stdcall(BATTERYIMPL_T c_battery_impl);
	EXPORTED short STDCALL BatteryImpl_isCharging_stdcall(BATTERYIMPL_T c_battery_impl);
	EXPORTED double STDCALL BatteryImpl_getBatteryTemperature_stdcall(BATTERYIMPL_T c_battery_impl);
	EXPORTED void STDCALL BatteryImpl_chargeAccumulator_stdcall(BATTERYIMPL_T c_battery_impl);
	EXPORTED void STDCALL BatteryImpl_Destroy_stdcall(BATTERYIMPL_T battery_impl);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* BATTERYIMPL_H */
