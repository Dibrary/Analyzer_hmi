/**
 * File: NIR.h
 * Autogenerated on Fri Mar 23 13:39:01 EDT 2018 based on
 * NIR.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/nir/NIR
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef NIR_H
#define NIR_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBSpectrometer.h"
#include "JString.h"
#include "USBEndpointDescriptor.h"
#include "GUIProviderArray.h"
#include "SpectrometerStatus.h"
#include "ExternalTriggerModeArray.h"
#include "CoefficientsArray.h"
#include "Spectrum.h"
#include "AcquisitionListener.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBSpectrometer;
class JString;
class USBEndpointDescriptor;
class GUIProviderArray;
class SpectrometerStatus;
class ExternalTriggerModeArray;
class CoefficientsArray;
class Spectrum;
class AcquisitionListener;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED NIR : public USBSpectrometer // CPPClass.tag001
{
public: 
	int getSaturationIntensity();
	short setSaturationIntensity(int saturationIntensity, JString& key);
	void setEndpoints();
	USBEndpointDescriptor getEndpoint(int endPoint);
	NIR();
	GUIProviderArray getGUIFeatures();
	SpectrometerStatus readStatus();
	int readIntegrationTime();
	void setIntegrationTime(int intTime);
	JString toString();
	void setHighGain(short gain);
	void setHighGainDefault(short gain);
	short getHighGainDefault();
	short hasHighGainDefault();
	void setExternalTriggerMode(int mode);
	ExternalTriggerModeArray getExternalTriggerModes();
	void setTECEnable(short enable);
	void setFanEnable(short enable);
	double getDetectorTemperatureCelsius();
	double getDetectorTemperatureSetPointCelsius();
	void setDetectorSetPointCelsius(double point);
	double getSetPointMinimumCelsius();
	double getSetPointMaximumCelsius();
	double getSetPointIncrementCelsius();
	short isSaveTECStateEnabled();
	void saveTECState();
	CoefficientsArray readNonlinearityCoefficientsFromSpectrometer();
	void writeNonlinearityCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	CoefficientsArray getNonlinearityCoefficients();
	void setNonlinearityCoefficients(CoefficientsArray& coefficients);
	DoubleArray getNonlinearityCoefficientsSingleChannel(int index);
	void setNonlinearityCoefficientsSingleChannel(DoubleArray& nl, int index);
	CoefficientsArray readWavelengthCalibrationCoefficientsFromSpectrometer();
	void writeWavelengthCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	CoefficientsArray getWavelengthCalibrationCoefficients();
	void setWavelengthCalibrationCoefficients(CoefficientsArray& coefficients);
	DoubleArray getWavelengths(int index);
	void setWavelengths(DoubleArray& wl, int index);
	CoefficientsArray readStrayLightCorrectionCoefficientFromSpectrometer();
	void writeStrayLightCoefficientToSpectrometer(CoefficientsArray& coefficients);
	void setStrayLightCorrectionCoefficient(CoefficientsArray& coefficients);
	CoefficientsArray getStrayLightCorrectionCoefficient();
	void setStrayLight(double strayLight, int index);
	double getStrayLight(int index);
	IntArray getBadPixels();
	void setBadPixels(IntArray& pixels);
	Spectrum removeBadPixels(Spectrum& spectrum);
	int getNumberOfBadPixels();
	int getMaximumBadPixels();
	IntArray getAllPixels();
	void setBadPixelsToSpectrometer();
	IntArray getBadPixelsFromSpectrometer();
	short isAdvancedVersion();
	void addAcquisitionListener(AcquisitionListener& listener);
	void removeAcquisitionListener(AcquisitionListener& listener);
	~NIR();
	// No public Java copy constructor; creating one:
	NIR(const NIR &that);
	// Creating assignment operator declaration:
	NIR &operator=(const NIR &that);

private:
	jmethodID mid_getSaturationIntensity4870;
	jmethodID mid_setSaturationIntensity4871;
	jmethodID mid_setEndpoints4872;
	jmethodID mid_getEndpoint4873;
	jmethodID mid_NIR4874;
	jmethodID mid_getGUIFeatures4875;
	jmethodID mid_readStatus4876;
	jmethodID mid_readIntegrationTime4877;
	jmethodID mid_setIntegrationTime4878;
	jmethodID mid_toString4879;
	jmethodID mid_setHighGain4880;
	jmethodID mid_setHighGainDefault4881;
	jmethodID mid_getHighGainDefault4882;
	jmethodID mid_hasHighGainDefault4883;
	jmethodID mid_setExternalTriggerMode4884;
	jmethodID mid_getExternalTriggerModes4885;
	jmethodID mid_setTECEnable4886;
	jmethodID mid_setFanEnable4887;
	jmethodID mid_getDetectorTemperatureCelsius4888;
	jmethodID mid_getDetectorTemperatureSetPointCelsius4889;
	jmethodID mid_setDetectorSetPointCelsius4890;
	jmethodID mid_getSetPointMinimumCelsius4891;
	jmethodID mid_getSetPointMaximumCelsius4892;
	jmethodID mid_getSetPointIncrementCelsius4893;
	jmethodID mid_isSaveTECStateEnabled4894;
	jmethodID mid_saveTECState4895;
	jmethodID mid_readNonlinearityCoefficientsFromSpectrometer4896;
	jmethodID mid_writeNonlinearityCoefficientsToSpectrometer4897;
	jmethodID mid_getNonlinearityCoefficients4898;
	jmethodID mid_setNonlinearityCoefficients4899;
	jmethodID mid_getNonlinearityCoefficientsSingleChannel4900;
	jmethodID mid_setNonlinearityCoefficientsSingleChannel4901;
	jmethodID mid_readWavelengthCalibrationCoefficientsFromSpectrometer4902;
	jmethodID mid_writeWavelengthCoefficientsToSpectrometer4903;
	jmethodID mid_getWavelengthCalibrationCoefficients4904;
	jmethodID mid_setWavelengthCalibrationCoefficients4905;
	jmethodID mid_getWavelengths4906;
	jmethodID mid_setWavelengths4907;
	jmethodID mid_readStrayLightCorrectionCoefficientFromSpectrometer4908;
	jmethodID mid_writeStrayLightCoefficientToSpectrometer4909;
	jmethodID mid_setStrayLightCorrectionCoefficient4910;
	jmethodID mid_getStrayLightCorrectionCoefficient4911;
	jmethodID mid_setStrayLight4912;
	jmethodID mid_getStrayLight4913;
	jmethodID mid_getBadPixels4914;
	jmethodID mid_setBadPixels4915;
	jmethodID mid_removeBadPixels4916;
	jmethodID mid_getNumberOfBadPixels4917;
	jmethodID mid_getMaximumBadPixels4918;
	jmethodID mid_getAllPixels4919;
	jmethodID mid_setBadPixelsToSpectrometer4920;
	jmethodID mid_getBadPixelsFromSpectrometer4921;
	jmethodID mid_isAdvancedVersion4922;
	jmethodID mid_addAcquisitionListener4923;
	jmethodID mid_removeAcquisitionListener4924;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBSPECTROMETER_T
#define EXTERN_TYPEDEF_USBSPECTROMETER_T
	typedef void* USBSPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_USBSPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_USBENDPOINTDESCRIPTOR_T
#define EXTERN_TYPEDEF_USBENDPOINTDESCRIPTOR_T
	typedef void* USBENDPOINTDESCRIPTOR_T;
#endif /* EXTERN_TYPEDEF_USBENDPOINTDESCRIPTOR_T */
#ifndef EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
#define EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
	typedef void* GUIPROVIDERARRAY_T;
#endif /* EXTERN_TYPEDEF_GUIPROVIDERARRAY_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETERSTATUS_T
#define EXTERN_TYPEDEF_SPECTROMETERSTATUS_T
	typedef void* SPECTROMETERSTATUS_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERSTATUS_T */
#ifndef EXTERN_TYPEDEF_EXTERNALTRIGGERMODEARRAY_T
#define EXTERN_TYPEDEF_EXTERNALTRIGGERMODEARRAY_T
	typedef void* EXTERNALTRIGGERMODEARRAY_T;
#endif /* EXTERN_TYPEDEF_EXTERNALTRIGGERMODEARRAY_T */
#ifndef EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
#define EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
	typedef void* COEFFICIENTSARRAY_T;
#endif /* EXTERN_TYPEDEF_COEFFICIENTSARRAY_T */
#ifndef EXTERN_TYPEDEF_SPECTRUM_T
#define EXTERN_TYPEDEF_SPECTRUM_T
	typedef void* SPECTRUM_T;
#endif /* EXTERN_TYPEDEF_SPECTRUM_T */
#ifndef EXTERN_TYPEDEF_ACQUISITIONLISTENER_T
#define EXTERN_TYPEDEF_ACQUISITIONLISTENER_T
	typedef void* ACQUISITIONLISTENER_T;
#endif /* EXTERN_TYPEDEF_ACQUISITIONLISTENER_T */
#ifndef EXTERN_TYPEDEF_NIR_T
#define EXTERN_TYPEDEF_NIR_T
	typedef void* NIR_T;
#endif /* EXTERN_TYPEDEF_NIR_T */

	EXPORTED int NIR_getSaturationIntensity(NIR_T c_nir);
	EXPORTED short NIR_setSaturationIntensity(NIR_T c_nir, int saturationIntensity, JSTRING_T key);
	EXPORTED void NIR_setEndpoints(NIR_T c_nir);
	EXPORTED void NIR_getEndpoint(NIR_T c_nir, int endPoint, USBENDPOINTDESCRIPTOR_T retval);
	EXPORTED NIR_T NIR_Create();
	EXPORTED void NIR_getGUIFeatures(NIR_T c_nir, GUIPROVIDERARRAY_T retval);
	EXPORTED void NIR_readStatus(NIR_T c_nir, SPECTROMETERSTATUS_T retval);
	EXPORTED int NIR_readIntegrationTime(NIR_T c_nir);
	EXPORTED void NIR_setIntegrationTime(NIR_T c_nir, int intTime);
	EXPORTED void NIR_toString(NIR_T c_nir, JSTRING_T retval);
	EXPORTED void NIR_setHighGain(NIR_T c_nir, short gain);
	EXPORTED void NIR_setHighGainDefault(NIR_T c_nir, short gain);
	EXPORTED short NIR_getHighGainDefault(NIR_T c_nir);
	EXPORTED short NIR_hasHighGainDefault(NIR_T c_nir);
	EXPORTED void NIR_setExternalTriggerMode(NIR_T c_nir, int mode);
	EXPORTED void NIR_getExternalTriggerModes(NIR_T c_nir, EXTERNALTRIGGERMODEARRAY_T retval);
	EXPORTED void NIR_setTECEnable(NIR_T c_nir, short enable);
	EXPORTED void NIR_setFanEnable(NIR_T c_nir, short enable);
	EXPORTED double NIR_getDetectorTemperatureCelsius(NIR_T c_nir);
	EXPORTED double NIR_getDetectorTemperatureSetPointCelsius(NIR_T c_nir);
	EXPORTED void NIR_setDetectorSetPointCelsius(NIR_T c_nir, double point);
	EXPORTED double NIR_getSetPointMinimumCelsius(NIR_T c_nir);
	EXPORTED double NIR_getSetPointMaximumCelsius(NIR_T c_nir);
	EXPORTED double NIR_getSetPointIncrementCelsius(NIR_T c_nir);
	EXPORTED short NIR_isSaveTECStateEnabled(NIR_T c_nir);
	EXPORTED void NIR_saveTECState(NIR_T c_nir);
	EXPORTED void NIR_readNonlinearityCoefficientsFromSpectrometer(NIR_T c_nir, COEFFICIENTSARRAY_T retval);
	EXPORTED void NIR_writeNonlinearityCoefficientsToSpectrometer(NIR_T c_nir, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void NIR_getNonlinearityCoefficients(NIR_T c_nir, COEFFICIENTSARRAY_T retval);
	EXPORTED void NIR_setNonlinearityCoefficients(NIR_T c_nir, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void NIR_getNonlinearityCoefficientsSingleChannel(NIR_T c_nir, int index, DOUBLEARRAY_T retval);
	EXPORTED void NIR_setNonlinearityCoefficientsSingleChannel(NIR_T c_nir, DOUBLEARRAY_T nl, int index);
	EXPORTED void NIR_readWavelengthCalibrationCoefficientsFromSpectrometer(NIR_T c_nir, COEFFICIENTSARRAY_T retval);
	EXPORTED void NIR_writeWavelengthCoefficientsToSpectrometer(NIR_T c_nir, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void NIR_getWavelengthCalibrationCoefficients(NIR_T c_nir, COEFFICIENTSARRAY_T retval);
	EXPORTED void NIR_setWavelengthCalibrationCoefficients(NIR_T c_nir, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void NIR_getWavelengths(NIR_T c_nir, int index, DOUBLEARRAY_T retval);
	EXPORTED void NIR_setWavelengths(NIR_T c_nir, DOUBLEARRAY_T wl, int index);
	EXPORTED void NIR_readStrayLightCorrectionCoefficientFromSpectrometer(NIR_T c_nir, COEFFICIENTSARRAY_T retval);
	EXPORTED void NIR_writeStrayLightCoefficientToSpectrometer(NIR_T c_nir, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void NIR_setStrayLightCorrectionCoefficient(NIR_T c_nir, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void NIR_getStrayLightCorrectionCoefficient(NIR_T c_nir, COEFFICIENTSARRAY_T retval);
	EXPORTED void NIR_setStrayLight(NIR_T c_nir, double strayLight, int index);
	EXPORTED double NIR_getStrayLight(NIR_T c_nir, int index);
	EXPORTED void NIR_getBadPixels(NIR_T c_nir, INTARRAY_T retval);
	EXPORTED void NIR_setBadPixels(NIR_T c_nir, INTARRAY_T pixels);
	EXPORTED void NIR_removeBadPixels(NIR_T c_nir, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED int NIR_getNumberOfBadPixels(NIR_T c_nir);
	EXPORTED int NIR_getMaximumBadPixels(NIR_T c_nir);
	EXPORTED void NIR_getAllPixels(NIR_T c_nir, INTARRAY_T retval);
	EXPORTED void NIR_setBadPixelsToSpectrometer(NIR_T c_nir);
	EXPORTED void NIR_getBadPixelsFromSpectrometer(NIR_T c_nir, INTARRAY_T retval);
	EXPORTED short NIR_isAdvancedVersion(NIR_T c_nir);
	EXPORTED void NIR_addAcquisitionListener(NIR_T c_nir, ACQUISITIONLISTENER_T listener);
	EXPORTED void NIR_removeAcquisitionListener(NIR_T c_nir, ACQUISITIONLISTENER_T listener);
	EXPORTED void NIR_Destroy(NIR_T nir);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED int STDCALL NIR_getSaturationIntensity_stdcall(NIR_T c_nir);
	EXPORTED short STDCALL NIR_setSaturationIntensity_stdcall(NIR_T c_nir, int saturationIntensity, JSTRING_T key);
	EXPORTED void STDCALL NIR_setEndpoints_stdcall(NIR_T c_nir);
	EXPORTED void STDCALL NIR_getEndpoint_stdcall(NIR_T c_nir, int endPoint, USBENDPOINTDESCRIPTOR_T retval);
	EXPORTED NIR_T STDCALL NIR_Create_stdcall();
	EXPORTED void STDCALL NIR_getGUIFeatures_stdcall(NIR_T c_nir, GUIPROVIDERARRAY_T retval);
	EXPORTED void STDCALL NIR_readStatus_stdcall(NIR_T c_nir, SPECTROMETERSTATUS_T retval);
	EXPORTED int STDCALL NIR_readIntegrationTime_stdcall(NIR_T c_nir);
	EXPORTED void STDCALL NIR_setIntegrationTime_stdcall(NIR_T c_nir, int intTime);
	EXPORTED void STDCALL NIR_toString_stdcall(NIR_T c_nir, JSTRING_T retval);
	EXPORTED void STDCALL NIR_setHighGain_stdcall(NIR_T c_nir, short gain);
	EXPORTED void STDCALL NIR_setHighGainDefault_stdcall(NIR_T c_nir, short gain);
	EXPORTED short STDCALL NIR_getHighGainDefault_stdcall(NIR_T c_nir);
	EXPORTED short STDCALL NIR_hasHighGainDefault_stdcall(NIR_T c_nir);
	EXPORTED void STDCALL NIR_setExternalTriggerMode_stdcall(NIR_T c_nir, int mode);
	EXPORTED void STDCALL NIR_getExternalTriggerModes_stdcall(NIR_T c_nir, EXTERNALTRIGGERMODEARRAY_T retval);
	EXPORTED void STDCALL NIR_setTECEnable_stdcall(NIR_T c_nir, short enable);
	EXPORTED void STDCALL NIR_setFanEnable_stdcall(NIR_T c_nir, short enable);
	EXPORTED double STDCALL NIR_getDetectorTemperatureCelsius_stdcall(NIR_T c_nir);
	EXPORTED double STDCALL NIR_getDetectorTemperatureSetPointCelsius_stdcall(NIR_T c_nir);
	EXPORTED void STDCALL NIR_setDetectorSetPointCelsius_stdcall(NIR_T c_nir, double point);
	EXPORTED double STDCALL NIR_getSetPointMinimumCelsius_stdcall(NIR_T c_nir);
	EXPORTED double STDCALL NIR_getSetPointMaximumCelsius_stdcall(NIR_T c_nir);
	EXPORTED double STDCALL NIR_getSetPointIncrementCelsius_stdcall(NIR_T c_nir);
	EXPORTED short STDCALL NIR_isSaveTECStateEnabled_stdcall(NIR_T c_nir);
	EXPORTED void STDCALL NIR_saveTECState_stdcall(NIR_T c_nir);
	EXPORTED void STDCALL NIR_readNonlinearityCoefficientsFromSpectrometer_stdcall(NIR_T c_nir, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL NIR_writeNonlinearityCoefficientsToSpectrometer_stdcall(NIR_T c_nir, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL NIR_getNonlinearityCoefficients_stdcall(NIR_T c_nir, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL NIR_setNonlinearityCoefficients_stdcall(NIR_T c_nir, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL NIR_getNonlinearityCoefficientsSingleChannel_stdcall(NIR_T c_nir, int index, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL NIR_setNonlinearityCoefficientsSingleChannel_stdcall(NIR_T c_nir, DOUBLEARRAY_T nl, int index);
	EXPORTED void STDCALL NIR_readWavelengthCalibrationCoefficientsFromSpectrometer_stdcall(NIR_T c_nir, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL NIR_writeWavelengthCoefficientsToSpectrometer_stdcall(NIR_T c_nir, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL NIR_getWavelengthCalibrationCoefficients_stdcall(NIR_T c_nir, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL NIR_setWavelengthCalibrationCoefficients_stdcall(NIR_T c_nir, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL NIR_getWavelengths_stdcall(NIR_T c_nir, int index, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL NIR_setWavelengths_stdcall(NIR_T c_nir, DOUBLEARRAY_T wl, int index);
	EXPORTED void STDCALL NIR_readStrayLightCorrectionCoefficientFromSpectrometer_stdcall(NIR_T c_nir, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL NIR_writeStrayLightCoefficientToSpectrometer_stdcall(NIR_T c_nir, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL NIR_setStrayLightCorrectionCoefficient_stdcall(NIR_T c_nir, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL NIR_getStrayLightCorrectionCoefficient_stdcall(NIR_T c_nir, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL NIR_setStrayLight_stdcall(NIR_T c_nir, double strayLight, int index);
	EXPORTED double STDCALL NIR_getStrayLight_stdcall(NIR_T c_nir, int index);
	EXPORTED void STDCALL NIR_getBadPixels_stdcall(NIR_T c_nir, INTARRAY_T retval);
	EXPORTED void STDCALL NIR_setBadPixels_stdcall(NIR_T c_nir, INTARRAY_T pixels);
	EXPORTED void STDCALL NIR_removeBadPixels_stdcall(NIR_T c_nir, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED int STDCALL NIR_getNumberOfBadPixels_stdcall(NIR_T c_nir);
	EXPORTED int STDCALL NIR_getMaximumBadPixels_stdcall(NIR_T c_nir);
	EXPORTED void STDCALL NIR_getAllPixels_stdcall(NIR_T c_nir, INTARRAY_T retval);
	EXPORTED void STDCALL NIR_setBadPixelsToSpectrometer_stdcall(NIR_T c_nir);
	EXPORTED void STDCALL NIR_getBadPixelsFromSpectrometer_stdcall(NIR_T c_nir, INTARRAY_T retval);
	EXPORTED short STDCALL NIR_isAdvancedVersion_stdcall(NIR_T c_nir);
	EXPORTED void STDCALL NIR_addAcquisitionListener_stdcall(NIR_T c_nir, ACQUISITIONLISTENER_T listener);
	EXPORTED void STDCALL NIR_removeAcquisitionListener_stdcall(NIR_T c_nir, ACQUISITIONLISTENER_T listener);
	EXPORTED void STDCALL NIR_Destroy_stdcall(NIR_T nir);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* NIR_H */
