/**
 * File: SingleStrobeImpl_STSBase.h
 * Autogenerated on Fri Mar 23 13:38:40 EDT 2018 based on
 * SingleStrobeImpl_STSBase.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/singlestrobe/SingleStrobeImpl_STSBase
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef SINGLESTROBEIMPL_STSBASE_H
#define SINGLESTROBEIMPL_STSBASE_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "SingleStrobeImpl.h"
#include "STSBase.h"
#include "USBInterface.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class SingleStrobeImpl;
class STSBase;
class USBInterface;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED SingleStrobeImpl_STSBase : public SingleStrobeImpl // CPPClass.tag001
{
public: 
	SingleStrobeImpl_STSBase(STSBase& sts, USBInterface& usbInt);
	int getSingleStrobeHigh();
	void setSingleStrobeHigh(int counts);
	int getSingleStrobeLow();
	void setSingleStrobeLow(int counts);
	int getSingleStrobeMinimum();
	int getSingleStrobeMaximum();
	int getSingleStrobeIncrement();
	double getSingleStrobeCountsToMicros(int counts);
	~SingleStrobeImpl_STSBase();
	// No public default Java constructor; creating one:
	SingleStrobeImpl_STSBase();
	// No public Java copy constructor; creating one:
	SingleStrobeImpl_STSBase(const SingleStrobeImpl_STSBase &that);
	// Creating assignment operator declaration:
	SingleStrobeImpl_STSBase &operator=(const SingleStrobeImpl_STSBase &that);

private:
	jmethodID mid_SingleStrobeImpl_STSBase2038;
	jmethodID mid_getSingleStrobeHigh2039;
	jmethodID mid_setSingleStrobeHigh2040;
	jmethodID mid_getSingleStrobeLow2041;
	jmethodID mid_setSingleStrobeLow2042;
	jmethodID mid_getSingleStrobeMinimum2043;
	jmethodID mid_getSingleStrobeMaximum2044;
	jmethodID mid_getSingleStrobeIncrement2045;
	jmethodID mid_getSingleStrobeCountsToMicros2046;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_SINGLESTROBEIMPL_T
#define EXTERN_TYPEDEF_SINGLESTROBEIMPL_T
	typedef void* SINGLESTROBEIMPL_T;
#endif /* EXTERN_TYPEDEF_SINGLESTROBEIMPL_T */
#ifndef EXTERN_TYPEDEF_STSBASE_T
#define EXTERN_TYPEDEF_STSBASE_T
	typedef void* STSBASE_T;
#endif /* EXTERN_TYPEDEF_STSBASE_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_SINGLESTROBEIMPL_STSBASE_T
#define EXTERN_TYPEDEF_SINGLESTROBEIMPL_STSBASE_T
	typedef void* SINGLESTROBEIMPL_STSBASE_T;
#endif /* EXTERN_TYPEDEF_SINGLESTROBEIMPL_STSBASE_T */

	// No public default Java constructor; creating one:
	EXPORTED SINGLESTROBEIMPL_STSBASE_T SingleStrobeImpl_STSBase_Create();
	EXPORTED SINGLESTROBEIMPL_STSBASE_T SingleStrobeImpl_STSBase_Create_1(STSBASE_T sts, USBINTERFACE_T usbInt);
	EXPORTED int SingleStrobeImpl_STSBase_getSingleStrobeHigh(SINGLESTROBEIMPL_STSBASE_T c_single_strobe_impl_s_t_s_base);
	EXPORTED void SingleStrobeImpl_STSBase_setSingleStrobeHigh(SINGLESTROBEIMPL_STSBASE_T c_single_strobe_impl_s_t_s_base, int counts);
	EXPORTED int SingleStrobeImpl_STSBase_getSingleStrobeLow(SINGLESTROBEIMPL_STSBASE_T c_single_strobe_impl_s_t_s_base);
	EXPORTED void SingleStrobeImpl_STSBase_setSingleStrobeLow(SINGLESTROBEIMPL_STSBASE_T c_single_strobe_impl_s_t_s_base, int counts);
	EXPORTED int SingleStrobeImpl_STSBase_getSingleStrobeMinimum(SINGLESTROBEIMPL_STSBASE_T c_single_strobe_impl_s_t_s_base);
	EXPORTED int SingleStrobeImpl_STSBase_getSingleStrobeMaximum(SINGLESTROBEIMPL_STSBASE_T c_single_strobe_impl_s_t_s_base);
	EXPORTED int SingleStrobeImpl_STSBase_getSingleStrobeIncrement(SINGLESTROBEIMPL_STSBASE_T c_single_strobe_impl_s_t_s_base);
	EXPORTED double SingleStrobeImpl_STSBase_getSingleStrobeCountsToMicros(SINGLESTROBEIMPL_STSBASE_T c_single_strobe_impl_s_t_s_base, int counts);
	EXPORTED void SingleStrobeImpl_STSBase_Destroy(SINGLESTROBEIMPL_STSBASE_T single_strobe_impl_s_t_s_base);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED SINGLESTROBEIMPL_STSBASE_T STDCALL SingleStrobeImpl_STSBase_Create_stdcall_1(STSBASE_T sts, USBINTERFACE_T usbInt);
	EXPORTED int STDCALL SingleStrobeImpl_STSBase_getSingleStrobeHigh_stdcall(SINGLESTROBEIMPL_STSBASE_T c_single_strobe_impl_s_t_s_base);
	EXPORTED void STDCALL SingleStrobeImpl_STSBase_setSingleStrobeHigh_stdcall(SINGLESTROBEIMPL_STSBASE_T c_single_strobe_impl_s_t_s_base, int counts);
	EXPORTED int STDCALL SingleStrobeImpl_STSBase_getSingleStrobeLow_stdcall(SINGLESTROBEIMPL_STSBASE_T c_single_strobe_impl_s_t_s_base);
	EXPORTED void STDCALL SingleStrobeImpl_STSBase_setSingleStrobeLow_stdcall(SINGLESTROBEIMPL_STSBASE_T c_single_strobe_impl_s_t_s_base, int counts);
	EXPORTED int STDCALL SingleStrobeImpl_STSBase_getSingleStrobeMinimum_stdcall(SINGLESTROBEIMPL_STSBASE_T c_single_strobe_impl_s_t_s_base);
	EXPORTED int STDCALL SingleStrobeImpl_STSBase_getSingleStrobeMaximum_stdcall(SINGLESTROBEIMPL_STSBASE_T c_single_strobe_impl_s_t_s_base);
	EXPORTED int STDCALL SingleStrobeImpl_STSBase_getSingleStrobeIncrement_stdcall(SINGLESTROBEIMPL_STSBASE_T c_single_strobe_impl_s_t_s_base);
	EXPORTED double STDCALL SingleStrobeImpl_STSBase_getSingleStrobeCountsToMicros_stdcall(SINGLESTROBEIMPL_STSBASE_T c_single_strobe_impl_s_t_s_base, int counts);
	EXPORTED void STDCALL SingleStrobeImpl_STSBase_Destroy_stdcall(SINGLESTROBEIMPL_STSBASE_T single_strobe_impl_s_t_s_base);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* SINGLESTROBEIMPL_STSBASE_H */
