/**
 * File: MasterClockRateImpl_MMSRaman.h
 * Autogenerated on Fri Mar 23 13:38:57 EDT 2018 based on
 * MasterClockRateImpl_MMSRaman.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/mmsraman/features/masterclockrate/MasterClockRateImpl_MMSRaman
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef MASTERCLOCKRATEIMPL_MMSRAMAN_H
#define MASTERCLOCKRATEIMPL_MMSRAMAN_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "MasterClockRateImpl.h"
#include "USBInterface.h"
#include "MMSRaman.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class MasterClockRateImpl;
class USBInterface;
class MMSRaman;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED MasterClockRateImpl_MMSRaman : public MasterClockRateImpl // CPPClass.tag001
{
public: 
	MasterClockRateImpl_MMSRaman(USBInterface& usbInt, MMSRaman& spec);
	void setMasterClock(int rate);
	~MasterClockRateImpl_MMSRaman();
	// No public default Java constructor; creating one:
	MasterClockRateImpl_MMSRaman();
	// No public Java copy constructor; creating one:
	MasterClockRateImpl_MMSRaman(const MasterClockRateImpl_MMSRaman &that);
	// Creating assignment operator declaration:
	MasterClockRateImpl_MMSRaman &operator=(const MasterClockRateImpl_MMSRaman &that);

private:
	jmethodID mid_MasterClockRateImpl_MMSRaman4296;
	jmethodID mid_setMasterClock4297;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_MASTERCLOCKRATEIMPL_T
#define EXTERN_TYPEDEF_MASTERCLOCKRATEIMPL_T
	typedef void* MASTERCLOCKRATEIMPL_T;
#endif /* EXTERN_TYPEDEF_MASTERCLOCKRATEIMPL_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_MMSRAMAN_T
#define EXTERN_TYPEDEF_MMSRAMAN_T
	typedef void* MMSRAMAN_T;
#endif /* EXTERN_TYPEDEF_MMSRAMAN_T */
#ifndef EXTERN_TYPEDEF_MASTERCLOCKRATEIMPL_MMSRAMAN_T
#define EXTERN_TYPEDEF_MASTERCLOCKRATEIMPL_MMSRAMAN_T
	typedef void* MASTERCLOCKRATEIMPL_MMSRAMAN_T;
#endif /* EXTERN_TYPEDEF_MASTERCLOCKRATEIMPL_MMSRAMAN_T */

	// No public default Java constructor; creating one:
	EXPORTED MASTERCLOCKRATEIMPL_MMSRAMAN_T MasterClockRateImpl_MMSRaman_Create();
	EXPORTED MASTERCLOCKRATEIMPL_MMSRAMAN_T MasterClockRateImpl_MMSRaman_Create_1(USBINTERFACE_T usbInt, MMSRAMAN_T spec);
	EXPORTED void MasterClockRateImpl_MMSRaman_setMasterClock(MASTERCLOCKRATEIMPL_MMSRAMAN_T c_master_clock_rate_impl_m_m_s_raman, int rate);
	EXPORTED void MasterClockRateImpl_MMSRaman_Destroy(MASTERCLOCKRATEIMPL_MMSRAMAN_T master_clock_rate_impl_m_m_s_raman);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED MASTERCLOCKRATEIMPL_MMSRAMAN_T STDCALL MasterClockRateImpl_MMSRaman_Create_stdcall_1(USBINTERFACE_T usbInt, MMSRAMAN_T spec);
	EXPORTED void STDCALL MasterClockRateImpl_MMSRaman_setMasterClock_stdcall(MASTERCLOCKRATEIMPL_MMSRAMAN_T c_master_clock_rate_impl_m_m_s_raman, int rate);
	EXPORTED void STDCALL MasterClockRateImpl_MMSRaman_Destroy_stdcall(MASTERCLOCKRATEIMPL_MMSRAMAN_T master_clock_rate_impl_m_m_s_raman);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* MASTERCLOCKRATEIMPL_MMSRAMAN_H */
