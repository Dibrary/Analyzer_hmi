/**
 * File: AbstractList.h
 * Autogenerated on Mon Aug 04 16:04:22 EDT 2008 based on
 * AbstractList.java
 * for the Java class
 * java/util/AbstractList
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef ABSTRACTLIST_H
#define ABSTRACTLIST_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "AbstractCollection.h"
#include "Collection.h"
#include "Iterator.h"
#include "List.h"
#include "ListIterator.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class AbstractCollection;
class Collection;
class Iterator;
class List;
class ListIterator;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED AbstractList : public AbstractCollection // CPPClass.getClassDeclaration
{
public: 
	int hashCode();
	void clear();
	unsigned char addAll(int param0, Collection& param1);
	Iterator iterator();
	List subList(int param0, int param1);
	ListIterator listIterator();
	ListIterator listIterator(int param0);
	~AbstractList();
	// No public default Java constructor; creating one:
	AbstractList();
	// No public Java copy constructor; creating one:
	AbstractList(const AbstractList &that);
	// Creating assignment operator declaration:
	AbstractList &operator=(const AbstractList &that);

private:
	jmethodID mid_hashCode17;
	jmethodID mid_clear18;
	jmethodID mid_addAll19;
	jmethodID mid_iterator20;
	jmethodID mid_subList21;
	jmethodID mid_listIterator22;
	jmethodID mid_listIterator23;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_ABSTRACTCOLLECTION_T
#define EXTERN_TYPEDEF_ABSTRACTCOLLECTION_T
	typedef void* ABSTRACTCOLLECTION_T;
#endif /* EXTERN_TYPEDEF_ABSTRACTCOLLECTION_T */
#ifndef EXTERN_TYPEDEF_COLLECTION_T
#define EXTERN_TYPEDEF_COLLECTION_T
	typedef void* COLLECTION_T;
#endif /* EXTERN_TYPEDEF_COLLECTION_T */
#ifndef EXTERN_TYPEDEF_ITERATOR_T
#define EXTERN_TYPEDEF_ITERATOR_T
	typedef void* ITERATOR_T;
#endif /* EXTERN_TYPEDEF_ITERATOR_T */
#ifndef EXTERN_TYPEDEF_LIST_T
#define EXTERN_TYPEDEF_LIST_T
	typedef void* LIST_T;
#endif /* EXTERN_TYPEDEF_LIST_T */
#ifndef EXTERN_TYPEDEF_LISTITERATOR_T
#define EXTERN_TYPEDEF_LISTITERATOR_T
	typedef void* LISTITERATOR_T;
#endif /* EXTERN_TYPEDEF_LISTITERATOR_T */
#ifndef EXTERN_TYPEDEF_ABSTRACTLIST_T
#define EXTERN_TYPEDEF_ABSTRACTLIST_T
	typedef void* ABSTRACTLIST_T;
#endif /* EXTERN_TYPEDEF_ABSTRACTLIST_T */

	// No public default Java constructor; creating one:
	EXPORTED ABSTRACTLIST_T AbstractList_Create();
	EXPORTED int AbstractList_hashCode(ABSTRACTLIST_T c_abstract_list);
	EXPORTED void AbstractList_clear(ABSTRACTLIST_T c_abstract_list);
	EXPORTED unsigned char AbstractList_addAll(ABSTRACTLIST_T c_abstract_list, int param0, COLLECTION_T param1);
	EXPORTED void AbstractList_iterator(ABSTRACTLIST_T c_abstract_list, ITERATOR_T retval);
	EXPORTED void AbstractList_subList(ABSTRACTLIST_T c_abstract_list, int param0, int param1, LIST_T retval);
	EXPORTED void AbstractList_listIterator(ABSTRACTLIST_T c_abstract_list, LISTITERATOR_T retval);
	EXPORTED void AbstractList_listIterator_1(ABSTRACTLIST_T c_abstract_list, int param0, LISTITERATOR_T retval);
	EXPORTED void AbstractList_Destroy(ABSTRACTLIST_T abstract_list);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED int STDCALL AbstractList_hashCode_stdcall(ABSTRACTLIST_T c_abstract_list);
	EXPORTED void STDCALL AbstractList_clear_stdcall(ABSTRACTLIST_T c_abstract_list);
	EXPORTED unsigned char STDCALL AbstractList_addAll_stdcall(ABSTRACTLIST_T c_abstract_list, int param0, COLLECTION_T param1);
	EXPORTED void STDCALL AbstractList_iterator_stdcall(ABSTRACTLIST_T c_abstract_list, ITERATOR_T retval);
	EXPORTED void STDCALL AbstractList_subList_stdcall(ABSTRACTLIST_T c_abstract_list, int param0, int param1, LIST_T retval);
	EXPORTED void STDCALL AbstractList_listIterator_stdcall(ABSTRACTLIST_T c_abstract_list, LISTITERATOR_T retval);
	EXPORTED void STDCALL AbstractList_listIterator_stdcall_1(ABSTRACTLIST_T c_abstract_list, int param0, LISTITERATOR_T retval);
	EXPORTED void STDCALL AbstractList_Destroy_stdcall(ABSTRACTLIST_T abstract_list);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* ABSTRACTLIST_H */
