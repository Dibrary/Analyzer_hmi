/**
 * File: SpectrometerChannel.h
 * Autogenerated on Fri Mar 23 13:38:47 EDT 2018 based on
 * SpectrometerChannel.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/SpectrometerChannel
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef SPECTROMETERCHANNEL_H
#define SPECTROMETERCHANNEL_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "SpectrumHandler.h"
#include "Spectrometer.h"
#include "Coefficients.h"
#include "SpectrometerInfo.h"
#include "Spectrum.h"
#include "SpectrometerChannelInfo.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class SpectrumHandler;
class Spectrometer;
class Coefficients;
class SpectrometerInfo;
class Spectrum;
class SpectrometerChannelInfo;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED SpectrometerChannel : public SpectrumHandler // CPPClass.tag001
{
public: 
	SpectrometerChannel(Spectrometer& spectrometer, Coefficients& coefficients, int index);
	void generateMetadata(SpectrometerInfo& sb, int index);
	Coefficients getCoefficients();
	void setCoefficients(Coefficients& c);
	int getChannelIndex();
	void forceCoefficientsForArcoptix();
	void getCoefficientsFromSpectrometer();
	void setCoefficients();
	void setWavelengthCalibration();
	void setStrayLightCorrection();
	void setNonlinearityCoefficients();
	double getWavelength(int pixel);
	DoubleArray getAllWavelengths();
	DoubleArray getAllStoredWavelengths();
	int getNumberOfRawPixels();
	int getPixel(double wl);
	double getStartingWavelength();
	double getEndingWavelength();
	Spectrometer getSpectrometer();
	Spectrum getSpectrum();
	Spectrum getSpectrumRaw();
	Spectrum getSpectrum(Spectrum& spectrum);
	Spectrum getSpectrumRaw(Spectrum& spectrum);
	int getMaxIntensity();
	double getLaserWavelength();
	void setLaserWavelength(double laserWavelength);
	short isInterlock();
	void setInterlock(short interlock);
	void newSpectrum(Spectrum& spectrum);
	SpectrometerChannelInfo getSpectrometerChannelInfo();
	void setSpectrometerChannelInfoCoefficients(Coefficients& coefficients);
	long long getPollingInterval();
	void setPollingInterval(long long pollingInterval);
	short isPolling();
	void setPolling(short polling);
	~SpectrometerChannel();
	// No public default Java constructor; creating one:
	SpectrometerChannel();
	// No public Java copy constructor; creating one:
	SpectrometerChannel(const SpectrometerChannel &that);
	// Creating assignment operator declaration:
	SpectrometerChannel &operator=(const SpectrometerChannel &that);

private:
	jmethodID mid_SpectrometerChannel2981;
	jmethodID mid_generateMetadata2982;
	jmethodID mid_getCoefficients2983;
	jmethodID mid_setCoefficients2984;
	jmethodID mid_getChannelIndex2985;
	jmethodID mid_forceCoefficientsForArcoptix2986;
	jmethodID mid_getCoefficientsFromSpectrometer2987;
	jmethodID mid_setCoefficients2988;
	jmethodID mid_setWavelengthCalibration2989;
	jmethodID mid_setStrayLightCorrection2990;
	jmethodID mid_setNonlinearityCoefficients2991;
	jmethodID mid_getWavelength2992;
	jmethodID mid_getAllWavelengths2993;
	jmethodID mid_getAllStoredWavelengths2994;
	jmethodID mid_getNumberOfRawPixels2995;
	jmethodID mid_getPixel2996;
	jmethodID mid_getStartingWavelength2997;
	jmethodID mid_getEndingWavelength2998;
	jmethodID mid_getSpectrometer2999;
	jmethodID mid_getSpectrum3000;
	jmethodID mid_getSpectrumRaw3001;
	jmethodID mid_getSpectrum3002;
	jmethodID mid_getSpectrumRaw3003;
	jmethodID mid_getMaxIntensity3004;
	jmethodID mid_getLaserWavelength3005;
	jmethodID mid_setLaserWavelength3006;
	jmethodID mid_isInterlock3007;
	jmethodID mid_setInterlock3008;
	jmethodID mid_newSpectrum3009;
	jmethodID mid_getSpectrometerChannelInfo3010;
	jmethodID mid_setSpectrometerChannelInfoCoefficients3011;
	jmethodID mid_getPollingInterval3012;
	jmethodID mid_setPollingInterval3013;
	jmethodID mid_isPolling3014;
	jmethodID mid_setPolling3015;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_SPECTRUMHANDLER_T
#define EXTERN_TYPEDEF_SPECTRUMHANDLER_T
	typedef void* SPECTRUMHANDLER_T;
#endif /* EXTERN_TYPEDEF_SPECTRUMHANDLER_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETER_T
#define EXTERN_TYPEDEF_SPECTROMETER_T
	typedef void* SPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_COEFFICIENTS_T
#define EXTERN_TYPEDEF_COEFFICIENTS_T
	typedef void* COEFFICIENTS_T;
#endif /* EXTERN_TYPEDEF_COEFFICIENTS_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETERINFO_T
#define EXTERN_TYPEDEF_SPECTROMETERINFO_T
	typedef void* SPECTROMETERINFO_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERINFO_T */
#ifndef EXTERN_TYPEDEF_SPECTRUM_T
#define EXTERN_TYPEDEF_SPECTRUM_T
	typedef void* SPECTRUM_T;
#endif /* EXTERN_TYPEDEF_SPECTRUM_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETERCHANNELINFO_T
#define EXTERN_TYPEDEF_SPECTROMETERCHANNELINFO_T
	typedef void* SPECTROMETERCHANNELINFO_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERCHANNELINFO_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETERCHANNEL_T
#define EXTERN_TYPEDEF_SPECTROMETERCHANNEL_T
	typedef void* SPECTROMETERCHANNEL_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERCHANNEL_T */

	// No public default Java constructor; creating one:
	EXPORTED SPECTROMETERCHANNEL_T SpectrometerChannel_Create();
	EXPORTED SPECTROMETERCHANNEL_T SpectrometerChannel_Create_1(SPECTROMETER_T spectrometer, COEFFICIENTS_T coefficients, int index);
	EXPORTED void SpectrometerChannel_generateMetadata(SPECTROMETERCHANNEL_T c_spectrometer_channel, SPECTROMETERINFO_T sb, int index);
	EXPORTED void SpectrometerChannel_getCoefficients(SPECTROMETERCHANNEL_T c_spectrometer_channel, COEFFICIENTS_T retval);
	EXPORTED void SpectrometerChannel_setCoefficients(SPECTROMETERCHANNEL_T c_spectrometer_channel, COEFFICIENTS_T c);
	EXPORTED int SpectrometerChannel_getChannelIndex(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void SpectrometerChannel_forceCoefficientsForArcoptix(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void SpectrometerChannel_getCoefficientsFromSpectrometer(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void SpectrometerChannel_setCoefficients_1(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void SpectrometerChannel_setWavelengthCalibration(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void SpectrometerChannel_setStrayLightCorrection(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void SpectrometerChannel_setNonlinearityCoefficients(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED double SpectrometerChannel_getWavelength(SPECTROMETERCHANNEL_T c_spectrometer_channel, int pixel);
	EXPORTED void SpectrometerChannel_getAllWavelengths(SPECTROMETERCHANNEL_T c_spectrometer_channel, DOUBLEARRAY_T retval);
	EXPORTED void SpectrometerChannel_getAllStoredWavelengths(SPECTROMETERCHANNEL_T c_spectrometer_channel, DOUBLEARRAY_T retval);
	EXPORTED int SpectrometerChannel_getNumberOfRawPixels(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED int SpectrometerChannel_getPixel(SPECTROMETERCHANNEL_T c_spectrometer_channel, double wl);
	EXPORTED double SpectrometerChannel_getStartingWavelength(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED double SpectrometerChannel_getEndingWavelength(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void SpectrometerChannel_getSpectrometer(SPECTROMETERCHANNEL_T c_spectrometer_channel, SPECTROMETER_T retval);
	EXPORTED void SpectrometerChannel_getSpectrum(SPECTROMETERCHANNEL_T c_spectrometer_channel, SPECTRUM_T retval);
	EXPORTED void SpectrometerChannel_getSpectrumRaw(SPECTROMETERCHANNEL_T c_spectrometer_channel, SPECTRUM_T retval);
	EXPORTED void SpectrometerChannel_getSpectrum_1(SPECTROMETERCHANNEL_T c_spectrometer_channel, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void SpectrometerChannel_getSpectrumRaw_1(SPECTROMETERCHANNEL_T c_spectrometer_channel, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED int SpectrometerChannel_getMaxIntensity(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED double SpectrometerChannel_getLaserWavelength(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void SpectrometerChannel_setLaserWavelength(SPECTROMETERCHANNEL_T c_spectrometer_channel, double laserWavelength);
	EXPORTED short SpectrometerChannel_isInterlock(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void SpectrometerChannel_setInterlock(SPECTROMETERCHANNEL_T c_spectrometer_channel, short interlock);
	EXPORTED void SpectrometerChannel_newSpectrum(SPECTROMETERCHANNEL_T c_spectrometer_channel, SPECTRUM_T spectrum);
	EXPORTED void SpectrometerChannel_getSpectrometerChannelInfo(SPECTROMETERCHANNEL_T c_spectrometer_channel, SPECTROMETERCHANNELINFO_T retval);
	EXPORTED void SpectrometerChannel_setSpectrometerChannelInfoCoefficients(SPECTROMETERCHANNEL_T c_spectrometer_channel, COEFFICIENTS_T coefficients);
	EXPORTED long long SpectrometerChannel_getPollingInterval(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void SpectrometerChannel_setPollingInterval(SPECTROMETERCHANNEL_T c_spectrometer_channel, long long pollingInterval);
	EXPORTED short SpectrometerChannel_isPolling(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void SpectrometerChannel_setPolling(SPECTROMETERCHANNEL_T c_spectrometer_channel, short polling);
	EXPORTED void SpectrometerChannel_Destroy(SPECTROMETERCHANNEL_T spectrometer_channel);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED SPECTROMETERCHANNEL_T STDCALL SpectrometerChannel_Create_stdcall_1(SPECTROMETER_T spectrometer, COEFFICIENTS_T coefficients, int index);
	EXPORTED void STDCALL SpectrometerChannel_generateMetadata_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel, SPECTROMETERINFO_T sb, int index);
	EXPORTED void STDCALL SpectrometerChannel_getCoefficients_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel, COEFFICIENTS_T retval);
	EXPORTED void STDCALL SpectrometerChannel_setCoefficients_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel, COEFFICIENTS_T c);
	EXPORTED int STDCALL SpectrometerChannel_getChannelIndex_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void STDCALL SpectrometerChannel_forceCoefficientsForArcoptix_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void STDCALL SpectrometerChannel_getCoefficientsFromSpectrometer_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void STDCALL SpectrometerChannel_setCoefficients_stdcall_1(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void STDCALL SpectrometerChannel_setWavelengthCalibration_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void STDCALL SpectrometerChannel_setStrayLightCorrection_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void STDCALL SpectrometerChannel_setNonlinearityCoefficients_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED double STDCALL SpectrometerChannel_getWavelength_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel, int pixel);
	EXPORTED void STDCALL SpectrometerChannel_getAllWavelengths_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL SpectrometerChannel_getAllStoredWavelengths_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel, DOUBLEARRAY_T retval);
	EXPORTED int STDCALL SpectrometerChannel_getNumberOfRawPixels_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED int STDCALL SpectrometerChannel_getPixel_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel, double wl);
	EXPORTED double STDCALL SpectrometerChannel_getStartingWavelength_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED double STDCALL SpectrometerChannel_getEndingWavelength_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void STDCALL SpectrometerChannel_getSpectrometer_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel, SPECTROMETER_T retval);
	EXPORTED void STDCALL SpectrometerChannel_getSpectrum_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel, SPECTRUM_T retval);
	EXPORTED void STDCALL SpectrometerChannel_getSpectrumRaw_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel, SPECTRUM_T retval);
	EXPORTED void STDCALL SpectrometerChannel_getSpectrum_stdcall_1(SPECTROMETERCHANNEL_T c_spectrometer_channel, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void STDCALL SpectrometerChannel_getSpectrumRaw_stdcall_1(SPECTROMETERCHANNEL_T c_spectrometer_channel, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED int STDCALL SpectrometerChannel_getMaxIntensity_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED double STDCALL SpectrometerChannel_getLaserWavelength_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void STDCALL SpectrometerChannel_setLaserWavelength_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel, double laserWavelength);
	EXPORTED short STDCALL SpectrometerChannel_isInterlock_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void STDCALL SpectrometerChannel_setInterlock_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel, short interlock);
	EXPORTED void STDCALL SpectrometerChannel_newSpectrum_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel, SPECTRUM_T spectrum);
	EXPORTED void STDCALL SpectrometerChannel_getSpectrometerChannelInfo_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel, SPECTROMETERCHANNELINFO_T retval);
	EXPORTED void STDCALL SpectrometerChannel_setSpectrometerChannelInfoCoefficients_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel, COEFFICIENTS_T coefficients);
	EXPORTED long long STDCALL SpectrometerChannel_getPollingInterval_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void STDCALL SpectrometerChannel_setPollingInterval_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel, long long pollingInterval);
	EXPORTED short STDCALL SpectrometerChannel_isPolling_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel);
	EXPORTED void STDCALL SpectrometerChannel_setPolling_stdcall(SPECTROMETERCHANNEL_T c_spectrometer_channel, short polling);
	EXPORTED void STDCALL SpectrometerChannel_Destroy_stdcall(SPECTROMETERCHANNEL_T spectrometer_channel);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* SPECTROMETERCHANNEL_H */
