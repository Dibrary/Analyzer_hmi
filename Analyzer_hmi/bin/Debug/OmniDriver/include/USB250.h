/**
 * File: USB250.h
 * Autogenerated on Fri Mar 23 13:39:15 EDT 2018 based on
 * USB250.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/usb250/USB250
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef USB250_H
#define USB250_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBSpectrometer.h"
#include "USBEndpointDescriptor.h"
#include "SpectrometerChannelArray.h"
#include "GUIProviderArray.h"
#include "SpectrometerStatus.h"
#include "JString.h"
#include "ExternalTriggerModeArray.h"
#include "SpectrometerPlugInArray.h"
#include "CoefficientsArray.h"
#include "AcquisitionListener.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBSpectrometer;
class USBEndpointDescriptor;
class SpectrometerChannelArray;
class GUIProviderArray;
class SpectrometerStatus;
class JString;
class ExternalTriggerModeArray;
class SpectrometerPlugInArray;
class CoefficientsArray;
class AcquisitionListener;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED USB250 : public USBSpectrometer // CPPClass.tag001
{
public: 
	USB250();
	USB250(int i);
	int getNumberOfPixels();
	int getNumberOfDarkPixels();
	void setEndpoints();
	USBEndpointDescriptor getEndpoint(int endPoint);
	void openSpectrometer(int index);
	SpectrometerChannelArray getChannels();
	GUIProviderArray getGUIFeatures();
	SpectrometerStatus getStatus();
	int readIntegrationTime();
	void setMasterClock(int freq);
	DoubleArray getIrradianceCalibrationFactors();
	void setIrradianceCalibrationFactors(DoubleArray& data);
	double getCollectionArea();
	short hasCollectionArea();
	void setCollectionArea(double area);
	JString toString();
	int getActualIntegrationTime();
	CharArray getSPIBytes(CharArray& message, int length);
	void setExternalTriggerMode(int mode);
	ExternalTriggerModeArray getExternalTriggerModes();
	short isPlugInDetected(int id);
	SpectrometerPlugInArray getPlugIns();
	int getNumberOfPlugIns();
	CharArray initializePlugIns();
	void detectPlugIns();
	CoefficientsArray readNonlinearityCoefficientsFromSpectrometer();
	void writeNonlinearityCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	CoefficientsArray getNonlinearityCoefficients();
	void setNonlinearityCoefficients(CoefficientsArray& coefficients);
	DoubleArray getNonlinearityCoefficientsSingleChannel(int index);
	void setNonlinearityCoefficientsSingleChannel(DoubleArray& nl, int index);
	CoefficientsArray readWavelengthCalibrationCoefficientsFromSpectrometer();
	void writeWavelengthCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	CoefficientsArray getWavelengthCalibrationCoefficients();
	void setWavelengthCalibrationCoefficients(CoefficientsArray& coefficients);
	DoubleArray getWavelengths(int index);
	void setWavelengths(DoubleArray& wl, int index);
	CoefficientsArray readStrayLightCorrectionCoefficientFromSpectrometer();
	void writeStrayLightCoefficientToSpectrometer(CoefficientsArray& coefficients);
	void setStrayLightCorrectionCoefficient(CoefficientsArray& coefficients);
	CoefficientsArray getStrayLightCorrectionCoefficient();
	void setStrayLight(double strayLight, int index);
	double getStrayLight(int index);
	int getDarkValue();
	void setDarkValue(int value);
	double getSaturationValue();
	void setSaturationValue(double value);
	void recordSettings();
	short isAdvancedVersion();
	void addAcquisitionListener(AcquisitionListener& listener);
	void removeAcquisitionListener(AcquisitionListener& listener);
	~USB250();
	// No public Java copy constructor; creating one:
	USB250(const USB250 &that);
	// Creating assignment operator declaration:
	USB250 &operator=(const USB250 &that);

private:
	jmethodID mid_USB2505893;
	jmethodID mid_USB2505894;
	jmethodID mid_getNumberOfPixels5895;
	jmethodID mid_getNumberOfDarkPixels5896;
	jmethodID mid_setEndpoints5897;
	jmethodID mid_getEndpoint5898;
	jmethodID mid_openSpectrometer5899;
	jmethodID mid_getChannels5900;
	jmethodID mid_getGUIFeatures5901;
	jmethodID mid_getStatus5902;
	jmethodID mid_readIntegrationTime5903;
	jmethodID mid_setMasterClock5904;
	jmethodID mid_getIrradianceCalibrationFactors5905;
	jmethodID mid_setIrradianceCalibrationFactors5906;
	jmethodID mid_getCollectionArea5907;
	jmethodID mid_hasCollectionArea5908;
	jmethodID mid_setCollectionArea5909;
	jmethodID mid_toString5910;
	jmethodID mid_getActualIntegrationTime5911;
	jmethodID mid_getSPIBytes5912;
	jmethodID mid_setExternalTriggerMode5913;
	jmethodID mid_getExternalTriggerModes5914;
	jmethodID mid_isPlugInDetected5915;
	jmethodID mid_getPlugIns5916;
	jmethodID mid_getNumberOfPlugIns5917;
	jmethodID mid_initializePlugIns5918;
	jmethodID mid_detectPlugIns5919;
	jmethodID mid_readNonlinearityCoefficientsFromSpectrometer5920;
	jmethodID mid_writeNonlinearityCoefficientsToSpectrometer5921;
	jmethodID mid_getNonlinearityCoefficients5922;
	jmethodID mid_setNonlinearityCoefficients5923;
	jmethodID mid_getNonlinearityCoefficientsSingleChannel5924;
	jmethodID mid_setNonlinearityCoefficientsSingleChannel5925;
	jmethodID mid_readWavelengthCalibrationCoefficientsFromSpectrometer5926;
	jmethodID mid_writeWavelengthCoefficientsToSpectrometer5927;
	jmethodID mid_getWavelengthCalibrationCoefficients5928;
	jmethodID mid_setWavelengthCalibrationCoefficients5929;
	jmethodID mid_getWavelengths5930;
	jmethodID mid_setWavelengths5931;
	jmethodID mid_readStrayLightCorrectionCoefficientFromSpectrometer5932;
	jmethodID mid_writeStrayLightCoefficientToSpectrometer5933;
	jmethodID mid_setStrayLightCorrectionCoefficient5934;
	jmethodID mid_getStrayLightCorrectionCoefficient5935;
	jmethodID mid_setStrayLight5936;
	jmethodID mid_getStrayLight5937;
	jmethodID mid_getDarkValue5938;
	jmethodID mid_setDarkValue5939;
	jmethodID mid_getSaturationValue5940;
	jmethodID mid_setSaturationValue5941;
	jmethodID mid_recordSettings5942;
	jmethodID mid_isAdvancedVersion5943;
	jmethodID mid_addAcquisitionListener5944;
	jmethodID mid_removeAcquisitionListener5945;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBSPECTROMETER_T
#define EXTERN_TYPEDEF_USBSPECTROMETER_T
	typedef void* USBSPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_USBSPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_USBENDPOINTDESCRIPTOR_T
#define EXTERN_TYPEDEF_USBENDPOINTDESCRIPTOR_T
	typedef void* USBENDPOINTDESCRIPTOR_T;
#endif /* EXTERN_TYPEDEF_USBENDPOINTDESCRIPTOR_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETERCHANNELARRAY_T
#define EXTERN_TYPEDEF_SPECTROMETERCHANNELARRAY_T
	typedef void* SPECTROMETERCHANNELARRAY_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERCHANNELARRAY_T */
#ifndef EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
#define EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
	typedef void* GUIPROVIDERARRAY_T;
#endif /* EXTERN_TYPEDEF_GUIPROVIDERARRAY_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETERSTATUS_T
#define EXTERN_TYPEDEF_SPECTROMETERSTATUS_T
	typedef void* SPECTROMETERSTATUS_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERSTATUS_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_EXTERNALTRIGGERMODEARRAY_T
#define EXTERN_TYPEDEF_EXTERNALTRIGGERMODEARRAY_T
	typedef void* EXTERNALTRIGGERMODEARRAY_T;
#endif /* EXTERN_TYPEDEF_EXTERNALTRIGGERMODEARRAY_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETERPLUGINARRAY_T
#define EXTERN_TYPEDEF_SPECTROMETERPLUGINARRAY_T
	typedef void* SPECTROMETERPLUGINARRAY_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERPLUGINARRAY_T */
#ifndef EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
#define EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
	typedef void* COEFFICIENTSARRAY_T;
#endif /* EXTERN_TYPEDEF_COEFFICIENTSARRAY_T */
#ifndef EXTERN_TYPEDEF_ACQUISITIONLISTENER_T
#define EXTERN_TYPEDEF_ACQUISITIONLISTENER_T
	typedef void* ACQUISITIONLISTENER_T;
#endif /* EXTERN_TYPEDEF_ACQUISITIONLISTENER_T */
#ifndef EXTERN_TYPEDEF_USB250_T
#define EXTERN_TYPEDEF_USB250_T
	typedef void* USB250_T;
#endif /* EXTERN_TYPEDEF_USB250_T */

	EXPORTED USB250_T USB250_Create();
	EXPORTED USB250_T USB250_Create_1(int i);
	EXPORTED int USB250_getNumberOfPixels(USB250_T c_usb250);
	EXPORTED int USB250_getNumberOfDarkPixels(USB250_T c_usb250);
	EXPORTED void USB250_setEndpoints(USB250_T c_usb250);
	EXPORTED void USB250_getEndpoint(USB250_T c_usb250, int endPoint, USBENDPOINTDESCRIPTOR_T retval);
	EXPORTED void USB250_openSpectrometer(USB250_T c_usb250, int index);
	EXPORTED void USB250_getChannels(USB250_T c_usb250, SPECTROMETERCHANNELARRAY_T retval);
	EXPORTED void USB250_getGUIFeatures(USB250_T c_usb250, GUIPROVIDERARRAY_T retval);
	EXPORTED void USB250_getStatus(USB250_T c_usb250, SPECTROMETERSTATUS_T retval);
	EXPORTED int USB250_readIntegrationTime(USB250_T c_usb250);
	EXPORTED void USB250_setMasterClock(USB250_T c_usb250, int freq);
	EXPORTED void USB250_getIrradianceCalibrationFactors(USB250_T c_usb250, DOUBLEARRAY_T retval);
	EXPORTED void USB250_setIrradianceCalibrationFactors(USB250_T c_usb250, DOUBLEARRAY_T data);
	EXPORTED double USB250_getCollectionArea(USB250_T c_usb250);
	EXPORTED short USB250_hasCollectionArea(USB250_T c_usb250);
	EXPORTED void USB250_setCollectionArea(USB250_T c_usb250, double area);
	EXPORTED void USB250_toString(USB250_T c_usb250, JSTRING_T retval);
	EXPORTED int USB250_getActualIntegrationTime(USB250_T c_usb250);
	EXPORTED void USB250_getSPIBytes(USB250_T c_usb250, CHARARRAY_T message, int length, CHARARRAY_T retval);
	EXPORTED void USB250_setExternalTriggerMode(USB250_T c_usb250, int mode);
	EXPORTED void USB250_getExternalTriggerModes(USB250_T c_usb250, EXTERNALTRIGGERMODEARRAY_T retval);
	EXPORTED short USB250_isPlugInDetected(USB250_T c_usb250, int id);
	EXPORTED void USB250_getPlugIns(USB250_T c_usb250, SPECTROMETERPLUGINARRAY_T retval);
	EXPORTED int USB250_getNumberOfPlugIns(USB250_T c_usb250);
	EXPORTED void USB250_initializePlugIns(USB250_T c_usb250, CHARARRAY_T retval);
	EXPORTED void USB250_detectPlugIns(USB250_T c_usb250);
	EXPORTED void USB250_readNonlinearityCoefficientsFromSpectrometer(USB250_T c_usb250, COEFFICIENTSARRAY_T retval);
	EXPORTED void USB250_writeNonlinearityCoefficientsToSpectrometer(USB250_T c_usb250, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void USB250_getNonlinearityCoefficients(USB250_T c_usb250, COEFFICIENTSARRAY_T retval);
	EXPORTED void USB250_setNonlinearityCoefficients(USB250_T c_usb250, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void USB250_getNonlinearityCoefficientsSingleChannel(USB250_T c_usb250, int index, DOUBLEARRAY_T retval);
	EXPORTED void USB250_setNonlinearityCoefficientsSingleChannel(USB250_T c_usb250, DOUBLEARRAY_T nl, int index);
	EXPORTED void USB250_readWavelengthCalibrationCoefficientsFromSpectrometer(USB250_T c_usb250, COEFFICIENTSARRAY_T retval);
	EXPORTED void USB250_writeWavelengthCoefficientsToSpectrometer(USB250_T c_usb250, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void USB250_getWavelengthCalibrationCoefficients(USB250_T c_usb250, COEFFICIENTSARRAY_T retval);
	EXPORTED void USB250_setWavelengthCalibrationCoefficients(USB250_T c_usb250, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void USB250_getWavelengths(USB250_T c_usb250, int index, DOUBLEARRAY_T retval);
	EXPORTED void USB250_setWavelengths(USB250_T c_usb250, DOUBLEARRAY_T wl, int index);
	EXPORTED void USB250_readStrayLightCorrectionCoefficientFromSpectrometer(USB250_T c_usb250, COEFFICIENTSARRAY_T retval);
	EXPORTED void USB250_writeStrayLightCoefficientToSpectrometer(USB250_T c_usb250, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void USB250_setStrayLightCorrectionCoefficient(USB250_T c_usb250, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void USB250_getStrayLightCorrectionCoefficient(USB250_T c_usb250, COEFFICIENTSARRAY_T retval);
	EXPORTED void USB250_setStrayLight(USB250_T c_usb250, double strayLight, int index);
	EXPORTED double USB250_getStrayLight(USB250_T c_usb250, int index);
	EXPORTED int USB250_getDarkValue(USB250_T c_usb250);
	EXPORTED void USB250_setDarkValue(USB250_T c_usb250, int value);
	EXPORTED double USB250_getSaturationValue(USB250_T c_usb250);
	EXPORTED void USB250_setSaturationValue(USB250_T c_usb250, double value);
	EXPORTED void USB250_recordSettings(USB250_T c_usb250);
	EXPORTED short USB250_isAdvancedVersion(USB250_T c_usb250);
	EXPORTED void USB250_addAcquisitionListener(USB250_T c_usb250, ACQUISITIONLISTENER_T listener);
	EXPORTED void USB250_removeAcquisitionListener(USB250_T c_usb250, ACQUISITIONLISTENER_T listener);
	EXPORTED void USB250_Destroy(USB250_T usb250);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED USB250_T STDCALL USB250_Create_stdcall();
	EXPORTED USB250_T STDCALL USB250_Create_stdcall_1(int i);
	EXPORTED int STDCALL USB250_getNumberOfPixels_stdcall(USB250_T c_usb250);
	EXPORTED int STDCALL USB250_getNumberOfDarkPixels_stdcall(USB250_T c_usb250);
	EXPORTED void STDCALL USB250_setEndpoints_stdcall(USB250_T c_usb250);
	EXPORTED void STDCALL USB250_getEndpoint_stdcall(USB250_T c_usb250, int endPoint, USBENDPOINTDESCRIPTOR_T retval);
	EXPORTED void STDCALL USB250_openSpectrometer_stdcall(USB250_T c_usb250, int index);
	EXPORTED void STDCALL USB250_getChannels_stdcall(USB250_T c_usb250, SPECTROMETERCHANNELARRAY_T retval);
	EXPORTED void STDCALL USB250_getGUIFeatures_stdcall(USB250_T c_usb250, GUIPROVIDERARRAY_T retval);
	EXPORTED void STDCALL USB250_getStatus_stdcall(USB250_T c_usb250, SPECTROMETERSTATUS_T retval);
	EXPORTED int STDCALL USB250_readIntegrationTime_stdcall(USB250_T c_usb250);
	EXPORTED void STDCALL USB250_setMasterClock_stdcall(USB250_T c_usb250, int freq);
	EXPORTED void STDCALL USB250_getIrradianceCalibrationFactors_stdcall(USB250_T c_usb250, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL USB250_setIrradianceCalibrationFactors_stdcall(USB250_T c_usb250, DOUBLEARRAY_T data);
	EXPORTED double STDCALL USB250_getCollectionArea_stdcall(USB250_T c_usb250);
	EXPORTED short STDCALL USB250_hasCollectionArea_stdcall(USB250_T c_usb250);
	EXPORTED void STDCALL USB250_setCollectionArea_stdcall(USB250_T c_usb250, double area);
	EXPORTED void STDCALL USB250_toString_stdcall(USB250_T c_usb250, JSTRING_T retval);
	EXPORTED int STDCALL USB250_getActualIntegrationTime_stdcall(USB250_T c_usb250);
	EXPORTED void STDCALL USB250_getSPIBytes_stdcall(USB250_T c_usb250, CHARARRAY_T message, int length, CHARARRAY_T retval);
	EXPORTED void STDCALL USB250_setExternalTriggerMode_stdcall(USB250_T c_usb250, int mode);
	EXPORTED void STDCALL USB250_getExternalTriggerModes_stdcall(USB250_T c_usb250, EXTERNALTRIGGERMODEARRAY_T retval);
	EXPORTED short STDCALL USB250_isPlugInDetected_stdcall(USB250_T c_usb250, int id);
	EXPORTED void STDCALL USB250_getPlugIns_stdcall(USB250_T c_usb250, SPECTROMETERPLUGINARRAY_T retval);
	EXPORTED int STDCALL USB250_getNumberOfPlugIns_stdcall(USB250_T c_usb250);
	EXPORTED void STDCALL USB250_initializePlugIns_stdcall(USB250_T c_usb250, CHARARRAY_T retval);
	EXPORTED void STDCALL USB250_detectPlugIns_stdcall(USB250_T c_usb250);
	EXPORTED void STDCALL USB250_readNonlinearityCoefficientsFromSpectrometer_stdcall(USB250_T c_usb250, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL USB250_writeNonlinearityCoefficientsToSpectrometer_stdcall(USB250_T c_usb250, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL USB250_getNonlinearityCoefficients_stdcall(USB250_T c_usb250, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL USB250_setNonlinearityCoefficients_stdcall(USB250_T c_usb250, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL USB250_getNonlinearityCoefficientsSingleChannel_stdcall(USB250_T c_usb250, int index, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL USB250_setNonlinearityCoefficientsSingleChannel_stdcall(USB250_T c_usb250, DOUBLEARRAY_T nl, int index);
	EXPORTED void STDCALL USB250_readWavelengthCalibrationCoefficientsFromSpectrometer_stdcall(USB250_T c_usb250, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL USB250_writeWavelengthCoefficientsToSpectrometer_stdcall(USB250_T c_usb250, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL USB250_getWavelengthCalibrationCoefficients_stdcall(USB250_T c_usb250, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL USB250_setWavelengthCalibrationCoefficients_stdcall(USB250_T c_usb250, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL USB250_getWavelengths_stdcall(USB250_T c_usb250, int index, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL USB250_setWavelengths_stdcall(USB250_T c_usb250, DOUBLEARRAY_T wl, int index);
	EXPORTED void STDCALL USB250_readStrayLightCorrectionCoefficientFromSpectrometer_stdcall(USB250_T c_usb250, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL USB250_writeStrayLightCoefficientToSpectrometer_stdcall(USB250_T c_usb250, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL USB250_setStrayLightCorrectionCoefficient_stdcall(USB250_T c_usb250, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL USB250_getStrayLightCorrectionCoefficient_stdcall(USB250_T c_usb250, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL USB250_setStrayLight_stdcall(USB250_T c_usb250, double strayLight, int index);
	EXPORTED double STDCALL USB250_getStrayLight_stdcall(USB250_T c_usb250, int index);
	EXPORTED int STDCALL USB250_getDarkValue_stdcall(USB250_T c_usb250);
	EXPORTED void STDCALL USB250_setDarkValue_stdcall(USB250_T c_usb250, int value);
	EXPORTED double STDCALL USB250_getSaturationValue_stdcall(USB250_T c_usb250);
	EXPORTED void STDCALL USB250_setSaturationValue_stdcall(USB250_T c_usb250, double value);
	EXPORTED void STDCALL USB250_recordSettings_stdcall(USB250_T c_usb250);
	EXPORTED short STDCALL USB250_isAdvancedVersion_stdcall(USB250_T c_usb250);
	EXPORTED void STDCALL USB250_addAcquisitionListener_stdcall(USB250_T c_usb250, ACQUISITIONLISTENER_T listener);
	EXPORTED void STDCALL USB250_removeAcquisitionListener_stdcall(USB250_T c_usb250, ACQUISITIONLISTENER_T listener);
	EXPORTED void STDCALL USB250_Destroy_stdcall(USB250_T usb250);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* USB250_H */
