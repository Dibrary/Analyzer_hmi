/**
 * File: NetworkConfigureImpl.h
 * Autogenerated on Fri Mar 23 13:38:38 EDT 2018 based on
 * NetworkConfigureImpl.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/networkconfigure/NetworkConfigureImpl
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef NETWORKCONFIGUREIMPL_H
#define NETWORKCONFIGUREIMPL_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBFeature.h"
#include "OceanBinaryProtocolProvider.h"
#include "USBInterface.h"
#include "JString.h"
#include "WiFiSSID.h"
#include "WiFiPassphrase.h"
#include "IPv4SubnetAddress.h"
#include "IPv4Address.h"
#include "JStringArray.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBFeature;
class OceanBinaryProtocolProvider;
class USBInterface;
class JString;
class WiFiSSID;
class WiFiPassphrase;
class IPv4SubnetAddress;
class IPv4Address;
class JStringArray;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED NetworkConfigureImpl : public USBFeature // CPPClass.tag001
{
public: 
	NetworkConfigureImpl(OceanBinaryProtocolProvider& bn, USBInterface& usbInt);
	void writeMACAddress(int iface, JString& address);
	JString readMACAddress(int iface);
	short runSelfTest(int iface);
	int getNumberOfInterfaces();
	short isInterfaceEnabled(int iface);
	void setInterfaceEnable(int iface, short enable);
	void saveSettings();
	short hasGigabitEnable();
	short isGigabitEnabled();
	void setGigabitEnable(short enable);
	WiFiSSID getSSID();
	void setSSID(WiFiSSID& id);
	JString getWiFiMode();
	void setWiFiMode(JString& mode);
	JString getWiFiSecurity();
	void setWiFiSecurity(JString& mode);
	void setWiFiPassphrase(WiFiPassphrase& passPhrase);
	short isDhcpServer();
	void setDhcpServer(short enable);
	IPv4SubnetAddress getDhcpBaseAddress();
	void setDhcpBaseAddress(IPv4SubnetAddress& address);
	short isDHCPEnabled(int iface);
	void setDHCPEnable(int iface, short enable);
	IPv4SubnetAddress getIPv4Address(int iface, int addrIndex);
	void addIPv4Address(int iface, IPv4SubnetAddress& address);
	void removeIPv4Address(int iface, int addrIndex);
	IPv4Address getIPv4Gateway(int iface);
	void setIPv4Gateway(int iface, IPv4Address& address);
	short supportsMulticast();
	JStringArray getFeatureGUIClassnames();
	~NetworkConfigureImpl();
	// No public default Java constructor; creating one:
	NetworkConfigureImpl();
	// No public Java copy constructor; creating one:
	NetworkConfigureImpl(const NetworkConfigureImpl &that);
	// Creating assignment operator declaration:
	NetworkConfigureImpl &operator=(const NetworkConfigureImpl &that);

private:
	jmethodID mid_NetworkConfigureImpl1819;
	jmethodID mid_writeMACAddress1820;
	jmethodID mid_readMACAddress1821;
	jmethodID mid_runSelfTest1822;
	jmethodID mid_getNumberOfInterfaces1823;
	jmethodID mid_isInterfaceEnabled1824;
	jmethodID mid_setInterfaceEnable1825;
	jmethodID mid_saveSettings1826;
	jmethodID mid_hasGigabitEnable1827;
	jmethodID mid_isGigabitEnabled1828;
	jmethodID mid_setGigabitEnable1829;
	jmethodID mid_getSSID1830;
	jmethodID mid_setSSID1831;
	jmethodID mid_getWiFiMode1832;
	jmethodID mid_setWiFiMode1833;
	jmethodID mid_getWiFiSecurity1834;
	jmethodID mid_setWiFiSecurity1835;
	jmethodID mid_setWiFiPassphrase1836;
	jmethodID mid_isDhcpServer1837;
	jmethodID mid_setDhcpServer1838;
	jmethodID mid_getDhcpBaseAddress1839;
	jmethodID mid_setDhcpBaseAddress1840;
	jmethodID mid_isDHCPEnabled1841;
	jmethodID mid_setDHCPEnable1842;
	jmethodID mid_getIPv4Address1843;
	jmethodID mid_addIPv4Address1844;
	jmethodID mid_removeIPv4Address1845;
	jmethodID mid_getIPv4Gateway1846;
	jmethodID mid_setIPv4Gateway1847;
	jmethodID mid_supportsMulticast1848;
	jmethodID mid_getFeatureGUIClassnames1849;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBFEATURE_T
#define EXTERN_TYPEDEF_USBFEATURE_T
	typedef void* USBFEATURE_T;
#endif /* EXTERN_TYPEDEF_USBFEATURE_T */
#ifndef EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T
#define EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T
	typedef void* OCEANBINARYPROTOCOLPROVIDER_T;
#endif /* EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_WIFISSID_T
#define EXTERN_TYPEDEF_WIFISSID_T
	typedef void* WIFISSID_T;
#endif /* EXTERN_TYPEDEF_WIFISSID_T */
#ifndef EXTERN_TYPEDEF_WIFIPASSPHRASE_T
#define EXTERN_TYPEDEF_WIFIPASSPHRASE_T
	typedef void* WIFIPASSPHRASE_T;
#endif /* EXTERN_TYPEDEF_WIFIPASSPHRASE_T */
#ifndef EXTERN_TYPEDEF_IPV4SUBNETADDRESS_T
#define EXTERN_TYPEDEF_IPV4SUBNETADDRESS_T
	typedef void* IPV4SUBNETADDRESS_T;
#endif /* EXTERN_TYPEDEF_IPV4SUBNETADDRESS_T */
#ifndef EXTERN_TYPEDEF_IPV4ADDRESS_T
#define EXTERN_TYPEDEF_IPV4ADDRESS_T
	typedef void* IPV4ADDRESS_T;
#endif /* EXTERN_TYPEDEF_IPV4ADDRESS_T */
#ifndef EXTERN_TYPEDEF_JSTRINGARRAY_T
#define EXTERN_TYPEDEF_JSTRINGARRAY_T
	typedef void* JSTRINGARRAY_T;
#endif /* EXTERN_TYPEDEF_JSTRINGARRAY_T */
#ifndef EXTERN_TYPEDEF_NETWORKCONFIGUREIMPL_T
#define EXTERN_TYPEDEF_NETWORKCONFIGUREIMPL_T
	typedef void* NETWORKCONFIGUREIMPL_T;
#endif /* EXTERN_TYPEDEF_NETWORKCONFIGUREIMPL_T */

	// No public default Java constructor; creating one:
	EXPORTED NETWORKCONFIGUREIMPL_T NetworkConfigureImpl_Create();
	EXPORTED NETWORKCONFIGUREIMPL_T NetworkConfigureImpl_Create_1(OCEANBINARYPROTOCOLPROVIDER_T bn, USBINTERFACE_T usbInt);
	EXPORTED void NetworkConfigureImpl_writeMACAddress(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface, JSTRING_T address);
	EXPORTED void NetworkConfigureImpl_readMACAddress(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface, JSTRING_T retval);
	EXPORTED short NetworkConfigureImpl_runSelfTest(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface);
	EXPORTED int NetworkConfigureImpl_getNumberOfInterfaces(NETWORKCONFIGUREIMPL_T c_network_configure_impl);
	EXPORTED short NetworkConfigureImpl_isInterfaceEnabled(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface);
	EXPORTED void NetworkConfigureImpl_setInterfaceEnable(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface, short enable);
	EXPORTED void NetworkConfigureImpl_saveSettings(NETWORKCONFIGUREIMPL_T c_network_configure_impl);
	EXPORTED short NetworkConfigureImpl_hasGigabitEnable(NETWORKCONFIGUREIMPL_T c_network_configure_impl);
	EXPORTED short NetworkConfigureImpl_isGigabitEnabled(NETWORKCONFIGUREIMPL_T c_network_configure_impl);
	EXPORTED void NetworkConfigureImpl_setGigabitEnable(NETWORKCONFIGUREIMPL_T c_network_configure_impl, short enable);
	EXPORTED void NetworkConfigureImpl_getSSID(NETWORKCONFIGUREIMPL_T c_network_configure_impl, WIFISSID_T retval);
	EXPORTED void NetworkConfigureImpl_setSSID(NETWORKCONFIGUREIMPL_T c_network_configure_impl, WIFISSID_T id);
	EXPORTED void NetworkConfigureImpl_getWiFiMode(NETWORKCONFIGUREIMPL_T c_network_configure_impl, JSTRING_T retval);
	EXPORTED void NetworkConfigureImpl_setWiFiMode(NETWORKCONFIGUREIMPL_T c_network_configure_impl, JSTRING_T mode);
	EXPORTED void NetworkConfigureImpl_getWiFiSecurity(NETWORKCONFIGUREIMPL_T c_network_configure_impl, JSTRING_T retval);
	EXPORTED void NetworkConfigureImpl_setWiFiSecurity(NETWORKCONFIGUREIMPL_T c_network_configure_impl, JSTRING_T mode);
	EXPORTED void NetworkConfigureImpl_setWiFiPassphrase(NETWORKCONFIGUREIMPL_T c_network_configure_impl, WIFIPASSPHRASE_T passPhrase);
	EXPORTED short NetworkConfigureImpl_isDhcpServer(NETWORKCONFIGUREIMPL_T c_network_configure_impl);
	EXPORTED void NetworkConfigureImpl_setDhcpServer(NETWORKCONFIGUREIMPL_T c_network_configure_impl, short enable);
	EXPORTED void NetworkConfigureImpl_getDhcpBaseAddress(NETWORKCONFIGUREIMPL_T c_network_configure_impl, IPV4SUBNETADDRESS_T retval);
	EXPORTED void NetworkConfigureImpl_setDhcpBaseAddress(NETWORKCONFIGUREIMPL_T c_network_configure_impl, IPV4SUBNETADDRESS_T address);
	EXPORTED short NetworkConfigureImpl_isDHCPEnabled(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface);
	EXPORTED void NetworkConfigureImpl_setDHCPEnable(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface, short enable);
	EXPORTED void NetworkConfigureImpl_getIPv4Address(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface, int addrIndex, IPV4SUBNETADDRESS_T retval);
	EXPORTED void NetworkConfigureImpl_addIPv4Address(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface, IPV4SUBNETADDRESS_T address);
	EXPORTED void NetworkConfigureImpl_removeIPv4Address(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface, int addrIndex);
	EXPORTED void NetworkConfigureImpl_getIPv4Gateway(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface, IPV4ADDRESS_T retval);
	EXPORTED void NetworkConfigureImpl_setIPv4Gateway(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface, IPV4ADDRESS_T address);
	EXPORTED short NetworkConfigureImpl_supportsMulticast(NETWORKCONFIGUREIMPL_T c_network_configure_impl);
	EXPORTED void NetworkConfigureImpl_getFeatureGUIClassnames(NETWORKCONFIGUREIMPL_T c_network_configure_impl, JSTRINGARRAY_T retval);
	EXPORTED void NetworkConfigureImpl_Destroy(NETWORKCONFIGUREIMPL_T network_configure_impl);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED NETWORKCONFIGUREIMPL_T STDCALL NetworkConfigureImpl_Create_stdcall_1(OCEANBINARYPROTOCOLPROVIDER_T bn, USBINTERFACE_T usbInt);
	EXPORTED void STDCALL NetworkConfigureImpl_writeMACAddress_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface, JSTRING_T address);
	EXPORTED void STDCALL NetworkConfigureImpl_readMACAddress_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface, JSTRING_T retval);
	EXPORTED short STDCALL NetworkConfigureImpl_runSelfTest_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface);
	EXPORTED int STDCALL NetworkConfigureImpl_getNumberOfInterfaces_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl);
	EXPORTED short STDCALL NetworkConfigureImpl_isInterfaceEnabled_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface);
	EXPORTED void STDCALL NetworkConfigureImpl_setInterfaceEnable_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface, short enable);
	EXPORTED void STDCALL NetworkConfigureImpl_saveSettings_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl);
	EXPORTED short STDCALL NetworkConfigureImpl_hasGigabitEnable_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl);
	EXPORTED short STDCALL NetworkConfigureImpl_isGigabitEnabled_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl);
	EXPORTED void STDCALL NetworkConfigureImpl_setGigabitEnable_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, short enable);
	EXPORTED void STDCALL NetworkConfigureImpl_getSSID_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, WIFISSID_T retval);
	EXPORTED void STDCALL NetworkConfigureImpl_setSSID_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, WIFISSID_T id);
	EXPORTED void STDCALL NetworkConfigureImpl_getWiFiMode_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, JSTRING_T retval);
	EXPORTED void STDCALL NetworkConfigureImpl_setWiFiMode_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, JSTRING_T mode);
	EXPORTED void STDCALL NetworkConfigureImpl_getWiFiSecurity_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, JSTRING_T retval);
	EXPORTED void STDCALL NetworkConfigureImpl_setWiFiSecurity_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, JSTRING_T mode);
	EXPORTED void STDCALL NetworkConfigureImpl_setWiFiPassphrase_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, WIFIPASSPHRASE_T passPhrase);
	EXPORTED short STDCALL NetworkConfigureImpl_isDhcpServer_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl);
	EXPORTED void STDCALL NetworkConfigureImpl_setDhcpServer_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, short enable);
	EXPORTED void STDCALL NetworkConfigureImpl_getDhcpBaseAddress_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, IPV4SUBNETADDRESS_T retval);
	EXPORTED void STDCALL NetworkConfigureImpl_setDhcpBaseAddress_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, IPV4SUBNETADDRESS_T address);
	EXPORTED short STDCALL NetworkConfigureImpl_isDHCPEnabled_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface);
	EXPORTED void STDCALL NetworkConfigureImpl_setDHCPEnable_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface, short enable);
	EXPORTED void STDCALL NetworkConfigureImpl_getIPv4Address_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface, int addrIndex, IPV4SUBNETADDRESS_T retval);
	EXPORTED void STDCALL NetworkConfigureImpl_addIPv4Address_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface, IPV4SUBNETADDRESS_T address);
	EXPORTED void STDCALL NetworkConfigureImpl_removeIPv4Address_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface, int addrIndex);
	EXPORTED void STDCALL NetworkConfigureImpl_getIPv4Gateway_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface, IPV4ADDRESS_T retval);
	EXPORTED void STDCALL NetworkConfigureImpl_setIPv4Gateway_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, int iface, IPV4ADDRESS_T address);
	EXPORTED short STDCALL NetworkConfigureImpl_supportsMulticast_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl);
	EXPORTED void STDCALL NetworkConfigureImpl_getFeatureGUIClassnames_stdcall(NETWORKCONFIGUREIMPL_T c_network_configure_impl, JSTRINGARRAY_T retval);
	EXPORTED void STDCALL NetworkConfigureImpl_Destroy_stdcall(NETWORKCONFIGUREIMPL_T network_configure_impl);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* NETWORKCONFIGUREIMPL_H */
