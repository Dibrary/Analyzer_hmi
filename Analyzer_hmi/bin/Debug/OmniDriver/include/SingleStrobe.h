/**
 * File: SingleStrobe.h
 * Autogenerated on Fri Mar 23 13:38:39 EDT 2018 based on
 * SingleStrobe.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/singlestrobe/SingleStrobe
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef SINGLESTROBE_H
#define SINGLESTROBE_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#endif /* INCLUDES_IN_HEADER */


CLASS_TOKEN EXPORTED SingleStrobe : public BaseJavaClass // CPPClass.tag001
{
public: 
	int getSingleStrobeHigh();
	void setSingleStrobeHigh(int param0);
	int getSingleStrobeLow();
	void setSingleStrobeLow(int param0);
	int getSingleStrobeMinimum();
	int getSingleStrobeMaximum();
	int getSingleStrobeIncrement();
	double getSingleStrobeCountsToMicros(int param0);
	~SingleStrobe();
	// No public default Java constructor; creating one:
	SingleStrobe();
	// No public Java copy constructor; creating one:
	SingleStrobe(const SingleStrobe &that);
	// Creating assignment operator declaration:
	SingleStrobe &operator=(const SingleStrobe &that);

private:
	jmethodID mid_getSingleStrobeHigh1995;
	jmethodID mid_setSingleStrobeHigh1996;
	jmethodID mid_getSingleStrobeLow1997;
	jmethodID mid_setSingleStrobeLow1998;
	jmethodID mid_getSingleStrobeMinimum1999;
	jmethodID mid_getSingleStrobeMaximum2000;
	jmethodID mid_getSingleStrobeIncrement2001;
	jmethodID mid_getSingleStrobeCountsToMicros2002;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_SINGLESTROBE_T
#define EXTERN_TYPEDEF_SINGLESTROBE_T
	typedef void* SINGLESTROBE_T;
#endif /* EXTERN_TYPEDEF_SINGLESTROBE_T */

	// No public default Java constructor; creating one:
	EXPORTED SINGLESTROBE_T SingleStrobe_Create();
	EXPORTED int SingleStrobe_getSingleStrobeHigh(SINGLESTROBE_T c_single_strobe);
	EXPORTED void SingleStrobe_setSingleStrobeHigh(SINGLESTROBE_T c_single_strobe, int param0);
	EXPORTED int SingleStrobe_getSingleStrobeLow(SINGLESTROBE_T c_single_strobe);
	EXPORTED void SingleStrobe_setSingleStrobeLow(SINGLESTROBE_T c_single_strobe, int param0);
	EXPORTED int SingleStrobe_getSingleStrobeMinimum(SINGLESTROBE_T c_single_strobe);
	EXPORTED int SingleStrobe_getSingleStrobeMaximum(SINGLESTROBE_T c_single_strobe);
	EXPORTED int SingleStrobe_getSingleStrobeIncrement(SINGLESTROBE_T c_single_strobe);
	EXPORTED double SingleStrobe_getSingleStrobeCountsToMicros(SINGLESTROBE_T c_single_strobe, int param0);
	EXPORTED void SingleStrobe_Destroy(SINGLESTROBE_T single_strobe);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED int STDCALL SingleStrobe_getSingleStrobeHigh_stdcall(SINGLESTROBE_T c_single_strobe);
	EXPORTED void STDCALL SingleStrobe_setSingleStrobeHigh_stdcall(SINGLESTROBE_T c_single_strobe, int param0);
	EXPORTED int STDCALL SingleStrobe_getSingleStrobeLow_stdcall(SINGLESTROBE_T c_single_strobe);
	EXPORTED void STDCALL SingleStrobe_setSingleStrobeLow_stdcall(SINGLESTROBE_T c_single_strobe, int param0);
	EXPORTED int STDCALL SingleStrobe_getSingleStrobeMinimum_stdcall(SINGLESTROBE_T c_single_strobe);
	EXPORTED int STDCALL SingleStrobe_getSingleStrobeMaximum_stdcall(SINGLESTROBE_T c_single_strobe);
	EXPORTED int STDCALL SingleStrobe_getSingleStrobeIncrement_stdcall(SINGLESTROBE_T c_single_strobe);
	EXPORTED double STDCALL SingleStrobe_getSingleStrobeCountsToMicros_stdcall(SINGLESTROBE_T c_single_strobe, int param0);
	EXPORTED void STDCALL SingleStrobe_Destroy_stdcall(SINGLESTROBE_T single_strobe);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* SINGLESTROBE_H */
