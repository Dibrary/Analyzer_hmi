/**
 * File: FaulhaberCommandBase.h
 * Autogenerated on Fri Mar 23 13:38:21 EDT 2018 based on
 * FaulhaberCommandBase.java
 * for the Java class
 * com/oceanoptics/omnidriver/accessories/mikropack/commands/FaulhaberCommandBase
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef FAULHABERCOMMANDBASE_H
#define FAULHABERCOMMANDBASE_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "JStringArray.h"
#include "UniRS232.h"
#include "Node.h"
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class JStringArray;
class UniRS232;
class Node;
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED FaulhaberCommandBase : public BaseJavaClass // CPPClass.tag001
{
public: 
	JStringArray getFeatureGUIClassnames();
	FaulhaberCommandBase(UniRS232& serPort);
	Node getNode();
	void setNode(Node& n);
	JString getNodeString();
	void setSerialPort(UniRS232& port);
	JString getCommandBuffer();
	void setInputBufferSize(int size);
	int sendCommand(JString& command);
	int sendCommandSlow(JString& command, int msecDelay);
	int sendCommand(CharArray& command);
	int sendCommandSlow(CharArray& command, int msecDelay);
	~FaulhaberCommandBase();
	// No public default Java constructor; creating one:
	FaulhaberCommandBase();
	// No public Java copy constructor; creating one:
	FaulhaberCommandBase(const FaulhaberCommandBase &that);
	// Creating assignment operator declaration:
	FaulhaberCommandBase &operator=(const FaulhaberCommandBase &that);

private:
	jmethodID mid_getFeatureGUIClassnames0;
	jmethodID mid_FaulhaberCommandBase1;
	jmethodID mid_getNode2;
	jmethodID mid_setNode3;
	jmethodID mid_getNodeString4;
	jmethodID mid_setSerialPort5;
	jmethodID mid_getCommandBuffer6;
	jmethodID mid_setInputBufferSize7;
	jmethodID mid_sendCommand8;
	jmethodID mid_sendCommandSlow9;
	jmethodID mid_sendCommand10;
	jmethodID mid_sendCommandSlow11;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_JSTRINGARRAY_T
#define EXTERN_TYPEDEF_JSTRINGARRAY_T
	typedef void* JSTRINGARRAY_T;
#endif /* EXTERN_TYPEDEF_JSTRINGARRAY_T */
#ifndef EXTERN_TYPEDEF_UNIRS232_T
#define EXTERN_TYPEDEF_UNIRS232_T
	typedef void* UNIRS232_T;
#endif /* EXTERN_TYPEDEF_UNIRS232_T */
#ifndef EXTERN_TYPEDEF_NODE_T
#define EXTERN_TYPEDEF_NODE_T
	typedef void* NODE_T;
#endif /* EXTERN_TYPEDEF_NODE_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_FAULHABERCOMMANDBASE_T
#define EXTERN_TYPEDEF_FAULHABERCOMMANDBASE_T
	typedef void* FAULHABERCOMMANDBASE_T;
#endif /* EXTERN_TYPEDEF_FAULHABERCOMMANDBASE_T */

	// No public default Java constructor; creating one:
	EXPORTED FAULHABERCOMMANDBASE_T FaulhaberCommandBase_Create();
	EXPORTED void FaulhaberCommandBase_getFeatureGUIClassnames(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, JSTRINGARRAY_T retval);
	EXPORTED FAULHABERCOMMANDBASE_T FaulhaberCommandBase_Create_1(UNIRS232_T serPort);
	EXPORTED void FaulhaberCommandBase_getNode(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, NODE_T retval);
	EXPORTED void FaulhaberCommandBase_setNode(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, NODE_T n);
	EXPORTED void FaulhaberCommandBase_getNodeString(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, JSTRING_T retval);
	EXPORTED void FaulhaberCommandBase_setSerialPort(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, UNIRS232_T port);
	EXPORTED void FaulhaberCommandBase_getCommandBuffer(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, JSTRING_T retval);
	EXPORTED void FaulhaberCommandBase_setInputBufferSize(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, int size);
	EXPORTED int FaulhaberCommandBase_sendCommand(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, JSTRING_T command);
	EXPORTED int FaulhaberCommandBase_sendCommandSlow(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, JSTRING_T command, int msecDelay);
	EXPORTED int FaulhaberCommandBase_sendCommand_1(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, CHARARRAY_T command);
	EXPORTED int FaulhaberCommandBase_sendCommandSlow_1(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, CHARARRAY_T command, int msecDelay);
	EXPORTED void FaulhaberCommandBase_Destroy(FAULHABERCOMMANDBASE_T faulhaber_command_base);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED void STDCALL FaulhaberCommandBase_getFeatureGUIClassnames_stdcall(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, JSTRINGARRAY_T retval);
	EXPORTED FAULHABERCOMMANDBASE_T STDCALL FaulhaberCommandBase_Create_stdcall_1(UNIRS232_T serPort);
	EXPORTED void STDCALL FaulhaberCommandBase_getNode_stdcall(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, NODE_T retval);
	EXPORTED void STDCALL FaulhaberCommandBase_setNode_stdcall(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, NODE_T n);
	EXPORTED void STDCALL FaulhaberCommandBase_getNodeString_stdcall(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, JSTRING_T retval);
	EXPORTED void STDCALL FaulhaberCommandBase_setSerialPort_stdcall(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, UNIRS232_T port);
	EXPORTED void STDCALL FaulhaberCommandBase_getCommandBuffer_stdcall(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, JSTRING_T retval);
	EXPORTED void STDCALL FaulhaberCommandBase_setInputBufferSize_stdcall(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, int size);
	EXPORTED int STDCALL FaulhaberCommandBase_sendCommand_stdcall(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, JSTRING_T command);
	EXPORTED int STDCALL FaulhaberCommandBase_sendCommandSlow_stdcall(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, JSTRING_T command, int msecDelay);
	EXPORTED int STDCALL FaulhaberCommandBase_sendCommand_stdcall_1(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, CHARARRAY_T command);
	EXPORTED int STDCALL FaulhaberCommandBase_sendCommandSlow_stdcall_1(FAULHABERCOMMANDBASE_T c_faulhaber_command_base, CHARARRAY_T command, int msecDelay);
	EXPORTED void STDCALL FaulhaberCommandBase_Destroy_stdcall(FAULHABERCOMMANDBASE_T faulhaber_command_base);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* FAULHABERCOMMANDBASE_H */
