/**
 * File: NetworkSourceImpl.h
 * Autogenerated on Fri Mar 23 13:38:39 EDT 2018 based on
 * NetworkSourceImpl.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/networksource/NetworkSourceImpl
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef NETWORKSOURCEIMPL_H
#define NETWORKSOURCEIMPL_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBFeature.h"
#include "USBInterface.h"
#include "NetworkSpectrometer.h"
#include "JString.h"
#include "JStringArray.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBFeature;
class USBInterface;
class NetworkSpectrometer;
class JString;
class JStringArray;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED NetworkSourceImpl : public USBFeature // CPPClass.tag001
{
public: 
	NetworkSourceImpl(USBInterface& usb, NetworkSpectrometer& spec);
	void connectToSource(JString& address, int port);
	short isConnected();
	JStringArray getFeatureGUIClassnames();
	void disconnect();
	void reconnect();
	JString getAddress();
	int getPort();
	~NetworkSourceImpl();
	// No public default Java constructor; creating one:
	NetworkSourceImpl();
	// No public Java copy constructor; creating one:
	NetworkSourceImpl(const NetworkSourceImpl &that);
	// Creating assignment operator declaration:
	NetworkSourceImpl &operator=(const NetworkSourceImpl &that);

private:
	jmethodID mid_NetworkSourceImpl1875;
	jmethodID mid_connectToSource1876;
	jmethodID mid_isConnected1877;
	jmethodID mid_getFeatureGUIClassnames1878;
	jmethodID mid_disconnect1879;
	jmethodID mid_reconnect1880;
	jmethodID mid_getAddress1881;
	jmethodID mid_getPort1882;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBFEATURE_T
#define EXTERN_TYPEDEF_USBFEATURE_T
	typedef void* USBFEATURE_T;
#endif /* EXTERN_TYPEDEF_USBFEATURE_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_NETWORKSPECTROMETER_T
#define EXTERN_TYPEDEF_NETWORKSPECTROMETER_T
	typedef void* NETWORKSPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_NETWORKSPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_JSTRINGARRAY_T
#define EXTERN_TYPEDEF_JSTRINGARRAY_T
	typedef void* JSTRINGARRAY_T;
#endif /* EXTERN_TYPEDEF_JSTRINGARRAY_T */
#ifndef EXTERN_TYPEDEF_NETWORKSOURCEIMPL_T
#define EXTERN_TYPEDEF_NETWORKSOURCEIMPL_T
	typedef void* NETWORKSOURCEIMPL_T;
#endif /* EXTERN_TYPEDEF_NETWORKSOURCEIMPL_T */

	// No public default Java constructor; creating one:
	EXPORTED NETWORKSOURCEIMPL_T NetworkSourceImpl_Create();
	EXPORTED NETWORKSOURCEIMPL_T NetworkSourceImpl_Create_1(USBINTERFACE_T usb, NETWORKSPECTROMETER_T spec);
	EXPORTED void NetworkSourceImpl_connectToSource(NETWORKSOURCEIMPL_T c_network_source_impl, JSTRING_T address, int port);
	EXPORTED short NetworkSourceImpl_isConnected(NETWORKSOURCEIMPL_T c_network_source_impl);
	EXPORTED void NetworkSourceImpl_getFeatureGUIClassnames(NETWORKSOURCEIMPL_T c_network_source_impl, JSTRINGARRAY_T retval);
	EXPORTED void NetworkSourceImpl_disconnect(NETWORKSOURCEIMPL_T c_network_source_impl);
	EXPORTED void NetworkSourceImpl_reconnect(NETWORKSOURCEIMPL_T c_network_source_impl);
	EXPORTED void NetworkSourceImpl_getAddress(NETWORKSOURCEIMPL_T c_network_source_impl, JSTRING_T retval);
	EXPORTED int NetworkSourceImpl_getPort(NETWORKSOURCEIMPL_T c_network_source_impl);
	EXPORTED void NetworkSourceImpl_Destroy(NETWORKSOURCEIMPL_T network_source_impl);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED NETWORKSOURCEIMPL_T STDCALL NetworkSourceImpl_Create_stdcall_1(USBINTERFACE_T usb, NETWORKSPECTROMETER_T spec);
	EXPORTED void STDCALL NetworkSourceImpl_connectToSource_stdcall(NETWORKSOURCEIMPL_T c_network_source_impl, JSTRING_T address, int port);
	EXPORTED short STDCALL NetworkSourceImpl_isConnected_stdcall(NETWORKSOURCEIMPL_T c_network_source_impl);
	EXPORTED void STDCALL NetworkSourceImpl_getFeatureGUIClassnames_stdcall(NETWORKSOURCEIMPL_T c_network_source_impl, JSTRINGARRAY_T retval);
	EXPORTED void STDCALL NetworkSourceImpl_disconnect_stdcall(NETWORKSOURCEIMPL_T c_network_source_impl);
	EXPORTED void STDCALL NetworkSourceImpl_reconnect_stdcall(NETWORKSOURCEIMPL_T c_network_source_impl);
	EXPORTED void STDCALL NetworkSourceImpl_getAddress_stdcall(NETWORKSOURCEIMPL_T c_network_source_impl, JSTRING_T retval);
	EXPORTED int STDCALL NetworkSourceImpl_getPort_stdcall(NETWORKSOURCEIMPL_T c_network_source_impl);
	EXPORTED void STDCALL NetworkSourceImpl_Destroy_stdcall(NETWORKSOURCEIMPL_T network_source_impl);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* NETWORKSOURCEIMPL_H */
