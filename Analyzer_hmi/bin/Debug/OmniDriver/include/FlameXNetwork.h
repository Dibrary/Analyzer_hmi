/**
 * File: FlameXNetwork.h
 * Autogenerated on Mon Jun 19 10:50:34 EDT 2017 based on
 * FlameXNetwork.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/flamex/FlameXNetwork
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef FLAMEXNETWORK_H
#define FLAMEXNETWORK_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "NetworkSpectrometer.h"
#include "JSocket.h"
#include "JString.h"
#include "CoefficientsArray.h"
#include "GUIProviderArray.h"
#include "BitSet.h"
#include "ExternalTriggerModeArray.h"
#include "OffsetConstraints.h"
#include "ReferenceConstraints.h"
#include "IPv4SubnetAddress.h"
#include "IPv4Address.h"
#include "WiFiSSID.h"
#include "WiFiPassphrase.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class NetworkSpectrometer;
class JSocket;
class JString;
class CoefficientsArray;
class GUIProviderArray;
class BitSet;
class ExternalTriggerModeArray;
class OffsetConstraints;
class ReferenceConstraints;
class IPv4SubnetAddress;
class IPv4Address;
class WiFiSSID;
class WiFiPassphrase;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED FlameXNetwork : public NetworkSpectrometer // CPPClass.tag001
{
public: 
	FlameXNetwork(int i);
	FlameXNetwork(JSocket& jSocket);
	void openSpectrometer(int index);
	DoubleArray getDarkArray();
	JString getFirmwareVersion();
	JString getInfo(int slot);
	CharArray getInfoBytes(int slot);
	CharArray getStatusArray();
	void initialize();
	void setInfo(int slot, JString& str);
	void setInfoBytes(int slot, CharArray& byteArray);
	void setIntegrationTime(int intTime);
	DoubleArray getIrradianceCalibrationFactors();
	void setIrradianceCalibrationFactors(DoubleArray& data);
	double getCollectionArea();
	short hasCollectionArea();
	void setCollectionArea(double area);
	void writeNonlinearityCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	CoefficientsArray readNonlinearityCoefficientsFromSpectrometer();
	void setNonlinearityCoefficients(CoefficientsArray& coefficients);
	CoefficientsArray getNonlinearityCoefficients();
	DoubleArray getNonlinearityCoefficientsSingleChannel(int channelIndex);
	void setNonlinearityCoefficientsSingleChannel(DoubleArray& nonlinearities, int channelIndex);
	void setStrobeEnable(short enable);
	int getSpectrumReadThrottleMilliseconds();
	void setSpectrumReadThrottleMilliseconds(int value);
	int getSocketTimeoutMilliseconds();
	void setSocketTimeoutMilliseconds(int value);
	short isCheckForBytesAvailableEnabled();
	void setCheckForBytesAvailable(short value);
	int getReadSpectrumRetryLimit();
	void setReadSpectrumRetryLimit(int value);
	CharArray readBenchID();
	void writeBenchID(CharArray& id);
	CharArray readBenchSerialNumber();
	void writeBenchSerialNumber(CharArray& sn);
	CharArray readDetectorSerialNumber();
	void writeDetectorSerialNumber(CharArray& sn);
	void writeSlitWidthMicrons(short microns);
	void writeFiberDiameterMicrons(short microns);
	CharArray readGrating();
	void writeGrating(CharArray& grating);
	CharArray readCoating();
	void writeCoating(CharArray& coating);
	CharArray readFilter();
	void writeFilter(CharArray& filter);
	GUIProviderArray getGUIFeatures();
	void connectToSource(JString& address, int port);
	short isConnected();
	void disconnect();
	void reconnect();
	CharArray queryDevice(int messageType, CharArray& payload);
	short sendCommandToDevice(int messageType, CharArray& payload);
	int getDarkValue();
	void setDarkValue(int value);
	double getSaturationValue();
	void setSaturationValue(double value);
	void recordSettings();
	CoefficientsArray getWavelengthCalibrationCoefficients();
	DoubleArray getWavelengths(int index);
	CoefficientsArray readWavelengthCalibrationCoefficientsFromSpectrometer();
	void setWavelengthCalibrationCoefficients(CoefficientsArray& coefficients);
	void setWavelengths(DoubleArray& wavelengths, int index);
	void writeWavelengthCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	double getSingleStrobeCountsToMicros(int counts);
	int getSingleStrobeHigh();
	int getSingleStrobeIncrement();
	int getSingleStrobeLow();
	int getSingleStrobeMaximum();
	int getSingleStrobeMinimum();
	void setSingleStrobeHigh(int counts);
	void setSingleStrobeLow(int counts);
	double continuousStrobeCountsToMicros(int counts);
	int getContinuousStrobeDelayIncrement(int magnitude);
	int getContinuousStrobeDelayMaximum();
	int getContinuousStrobeDelayMinimum();
	void setContinuousStrobeDelay(int durationOfPhase);
	void setContinuousModeType(short mode);
	void setDelayAfterIntegration(int delay);
	short getContinuousModeType();
	int getDelayAfterIntegration();
	void setContinuousEnable(short value);
	short getContinuousEnable();
	BitSet getDirectionBits();
	BitSet getMuxBits();
	int getNumberOfPins();
	int getTotalGPIOBits();
	int getValueBit(int bitNumber);
	BitSet getValueBits();
	void setDirectionAllBits(BitSet& bitSet);
	void setDirectionBit(int bit, short value);
	void setDirectionBitmask(short bitmask);
	void setMuxAllBits(BitSet& bitSet);
	void setMuxBit(int bit, short value);
	void setMuxBitmask(short bitmask);
	void setValueAllBits(BitSet& bitSet);
	void setValueBit(int bit, short value);
	void setValueBitmask(short bitmask);
	void setExternalTriggerDelay(int counts);
	double triggerDelayCountsToMicroseconds(int counts);
	int getExternalTriggerDelayMinimum();
	int getExternalTriggerDelayMaximum();
	int getExternalTriggerDelayIncrement();
	void setExternalTriggerMode(int mode);
	ExternalTriggerModeArray getExternalTriggerModes();
	double getBoardTemperatureCelsius();
	double getDetectorTemperatureCelsius();
	void setOffsetCount(int baselineOffset);
	void setReferenceCount(int referenceCnt);
	int getReferenceCount();
	int getOffsetCount();
	OffsetConstraints getOffsetConstraints();
	ReferenceConstraints getReferenceConstraints();
	long long readClock();
	void writeClock(long long value);
	void setCurrentTime();
	int setI2CBytes(signed char address, signed char numBytes, CharArray& i2C);
	CharArray getI2CBytes(signed char address, signed char numBytes);
	CharArray getSPIBytes(CharArray& message, int length);
	void writeMACAddress(int iface, JString& address);
	JString readMACAddress(int iface);
	short runSelfTest(int iface);
	short isDHCPEnabled(int iface);
	void setDHCPEnable(int iface, short enable);
	IPv4SubnetAddress getIPv4Address(int iface, int addrIndex);
	void addIPv4Address(int iface, IPv4SubnetAddress& address);
	void removeIPv4Address(int iface, int addrIndex);
	IPv4Address getIPv4Gateway(int iface);
	void setIPv4Gateway(int iface, IPv4Address& address);
	short supportsMulticast();
	int getNumberOfInterfaces();
	short isInterfaceEnabled(int iface);
	void setInterfaceEnable(int iface, short enable);
	void saveSettings();
	short hasGigabitEnable();
	short isGigabitEnabled();
	void setGigabitEnable(short enable);
	WiFiSSID getSSID();
	void setSSID(WiFiSSID& id);
	JString getWiFiMode();
	void setWiFiMode(JString& mode);
	JString getWiFiSecurity();
	void setWiFiSecurity(JString& mode);
	void setWiFiPassphrase(WiFiPassphrase& passPhrase);
	short isDhcpServer();
	void setDhcpServer(short enable);
	IPv4SubnetAddress getDhcpBaseAddress();
	void setDhcpBaseAddress(IPv4SubnetAddress& address);
	void setSpectraCount(int value);
	short getBufferEnable();
	void setBufferEnable(short enable);
	void setB2BCapacity(int bufferSize);
	void clearBuffer();
	~FlameXNetwork();
	// No public default Java constructor; creating one:
	FlameXNetwork();
	// No public Java copy constructor; creating one:
	FlameXNetwork(const FlameXNetwork &that);
	// Creating assignment operator declaration:
	FlameXNetwork &operator=(const FlameXNetwork &that);

private:
	jmethodID mid_FlameXNetwork3129;
	jmethodID mid_FlameXNetwork3130;
	jmethodID mid_openSpectrometer3131;
	jmethodID mid_getDarkArray3132;
	jmethodID mid_getFirmwareVersion3133;
	jmethodID mid_getInfo3134;
	jmethodID mid_getInfoBytes3135;
	jmethodID mid_getStatusArray3136;
	jmethodID mid_initialize3137;
	jmethodID mid_setInfo3138;
	jmethodID mid_setInfoBytes3139;
	jmethodID mid_setIntegrationTime3140;
	jmethodID mid_getIrradianceCalibrationFactors3141;
	jmethodID mid_setIrradianceCalibrationFactors3142;
	jmethodID mid_getCollectionArea3143;
	jmethodID mid_hasCollectionArea3144;
	jmethodID mid_setCollectionArea3145;
	jmethodID mid_writeNonlinearityCoefficientsToSpectrometer3146;
	jmethodID mid_readNonlinearityCoefficientsFromSpectrometer3147;
	jmethodID mid_setNonlinearityCoefficients3148;
	jmethodID mid_getNonlinearityCoefficients3149;
	jmethodID mid_getNonlinearityCoefficientsSingleChannel3150;
	jmethodID mid_setNonlinearityCoefficientsSingleChannel3151;
	jmethodID mid_setStrobeEnable3152;
	jmethodID mid_getSpectrumReadThrottleMilliseconds3153;
	jmethodID mid_setSpectrumReadThrottleMilliseconds3154;
	jmethodID mid_getSocketTimeoutMilliseconds3155;
	jmethodID mid_setSocketTimeoutMilliseconds3156;
	jmethodID mid_isCheckForBytesAvailableEnabled3157;
	jmethodID mid_setCheckForBytesAvailable3158;
	jmethodID mid_getReadSpectrumRetryLimit3159;
	jmethodID mid_setReadSpectrumRetryLimit3160;
	jmethodID mid_readBenchID3161;
	jmethodID mid_writeBenchID3162;
	jmethodID mid_readBenchSerialNumber3163;
	jmethodID mid_writeBenchSerialNumber3164;
	jmethodID mid_readDetectorSerialNumber3165;
	jmethodID mid_writeDetectorSerialNumber3166;
	jmethodID mid_writeSlitWidthMicrons3167;
	jmethodID mid_writeFiberDiameterMicrons3168;
	jmethodID mid_readGrating3169;
	jmethodID mid_writeGrating3170;
	jmethodID mid_readCoating3171;
	jmethodID mid_writeCoating3172;
	jmethodID mid_readFilter3173;
	jmethodID mid_writeFilter3174;
	jmethodID mid_getGUIFeatures3175;
	jmethodID mid_connectToSource3176;
	jmethodID mid_isConnected3177;
	jmethodID mid_disconnect3178;
	jmethodID mid_reconnect3179;
	jmethodID mid_queryDevice3180;
	jmethodID mid_sendCommandToDevice3181;
	jmethodID mid_getDarkValue3182;
	jmethodID mid_setDarkValue3183;
	jmethodID mid_getSaturationValue3184;
	jmethodID mid_setSaturationValue3185;
	jmethodID mid_recordSettings3186;
	jmethodID mid_getWavelengthCalibrationCoefficients3187;
	jmethodID mid_getWavelengths3188;
	jmethodID mid_readWavelengthCalibrationCoefficientsFromSpectrometer3189;
	jmethodID mid_setWavelengthCalibrationCoefficients3190;
	jmethodID mid_setWavelengths3191;
	jmethodID mid_writeWavelengthCoefficientsToSpectrometer3192;
	jmethodID mid_getSingleStrobeCountsToMicros3193;
	jmethodID mid_getSingleStrobeHigh3194;
	jmethodID mid_getSingleStrobeIncrement3195;
	jmethodID mid_getSingleStrobeLow3196;
	jmethodID mid_getSingleStrobeMaximum3197;
	jmethodID mid_getSingleStrobeMinimum3198;
	jmethodID mid_setSingleStrobeHigh3199;
	jmethodID mid_setSingleStrobeLow3200;
	jmethodID mid_continuousStrobeCountsToMicros3201;
	jmethodID mid_getContinuousStrobeDelayIncrement3202;
	jmethodID mid_getContinuousStrobeDelayMaximum3203;
	jmethodID mid_getContinuousStrobeDelayMinimum3204;
	jmethodID mid_setContinuousStrobeDelay3205;
	jmethodID mid_setContinuousModeType3206;
	jmethodID mid_setDelayAfterIntegration3207;
	jmethodID mid_getContinuousModeType3208;
	jmethodID mid_getDelayAfterIntegration3209;
	jmethodID mid_setContinuousEnable3210;
	jmethodID mid_getContinuousEnable3211;
	jmethodID mid_getDirectionBits3212;
	jmethodID mid_getMuxBits3213;
	jmethodID mid_getNumberOfPins3214;
	jmethodID mid_getTotalGPIOBits3215;
	jmethodID mid_getValueBit3216;
	jmethodID mid_getValueBits3217;
	jmethodID mid_setDirectionAllBits3218;
	jmethodID mid_setDirectionBit3219;
	jmethodID mid_setDirectionBitmask3220;
	jmethodID mid_setMuxAllBits3221;
	jmethodID mid_setMuxBit3222;
	jmethodID mid_setMuxBitmask3223;
	jmethodID mid_setValueAllBits3224;
	jmethodID mid_setValueBit3225;
	jmethodID mid_setValueBitmask3226;
	jmethodID mid_setExternalTriggerDelay3227;
	jmethodID mid_triggerDelayCountsToMicroseconds3228;
	jmethodID mid_getExternalTriggerDelayMinimum3229;
	jmethodID mid_getExternalTriggerDelayMaximum3230;
	jmethodID mid_getExternalTriggerDelayIncrement3231;
	jmethodID mid_setExternalTriggerMode3232;
	jmethodID mid_getExternalTriggerModes3233;
	jmethodID mid_getBoardTemperatureCelsius3234;
	jmethodID mid_getDetectorTemperatureCelsius3235;
	jmethodID mid_setOffsetCount3236;
	jmethodID mid_setReferenceCount3237;
	jmethodID mid_getReferenceCount3238;
	jmethodID mid_getOffsetCount3239;
	jmethodID mid_getOffsetConstraints3240;
	jmethodID mid_getReferenceConstraints3241;
	jmethodID mid_readClock3242;
	jmethodID mid_writeClock3243;
	jmethodID mid_setCurrentTime3244;
	jmethodID mid_setI2CBytes3245;
	jmethodID mid_getI2CBytes3246;
	jmethodID mid_getSPIBytes3247;
	jmethodID mid_writeMACAddress3248;
	jmethodID mid_readMACAddress3249;
	jmethodID mid_runSelfTest3250;
	jmethodID mid_isDHCPEnabled3251;
	jmethodID mid_setDHCPEnable3252;
	jmethodID mid_getIPv4Address3253;
	jmethodID mid_addIPv4Address3254;
	jmethodID mid_removeIPv4Address3255;
	jmethodID mid_getIPv4Gateway3256;
	jmethodID mid_setIPv4Gateway3257;
	jmethodID mid_supportsMulticast3258;
	jmethodID mid_getNumberOfInterfaces3259;
	jmethodID mid_isInterfaceEnabled3260;
	jmethodID mid_setInterfaceEnable3261;
	jmethodID mid_saveSettings3262;
	jmethodID mid_hasGigabitEnable3263;
	jmethodID mid_isGigabitEnabled3264;
	jmethodID mid_setGigabitEnable3265;
	jmethodID mid_getSSID3266;
	jmethodID mid_setSSID3267;
	jmethodID mid_getWiFiMode3268;
	jmethodID mid_setWiFiMode3269;
	jmethodID mid_getWiFiSecurity3270;
	jmethodID mid_setWiFiSecurity3271;
	jmethodID mid_setWiFiPassphrase3272;
	jmethodID mid_isDhcpServer3273;
	jmethodID mid_setDhcpServer3274;
	jmethodID mid_getDhcpBaseAddress3275;
	jmethodID mid_setDhcpBaseAddress3276;
	jmethodID mid_setSpectraCount3277;
	jmethodID mid_getBufferEnable3278;
	jmethodID mid_setBufferEnable3279;
	jmethodID mid_setB2BCapacity3280;
	jmethodID mid_clearBuffer3281;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_NETWORKSPECTROMETER_T
#define EXTERN_TYPEDEF_NETWORKSPECTROMETER_T
	typedef void* NETWORKSPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_NETWORKSPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_JSOCKET_T
#define EXTERN_TYPEDEF_JSOCKET_T
	typedef void* JSOCKET_T;
#endif /* EXTERN_TYPEDEF_JSOCKET_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
#define EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
	typedef void* COEFFICIENTSARRAY_T;
#endif /* EXTERN_TYPEDEF_COEFFICIENTSARRAY_T */
#ifndef EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
#define EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
	typedef void* GUIPROVIDERARRAY_T;
#endif /* EXTERN_TYPEDEF_GUIPROVIDERARRAY_T */
#ifndef EXTERN_TYPEDEF_BITSET_T
#define EXTERN_TYPEDEF_BITSET_T
	typedef void* BITSET_T;
#endif /* EXTERN_TYPEDEF_BITSET_T */
#ifndef EXTERN_TYPEDEF_EXTERNALTRIGGERMODEARRAY_T
#define EXTERN_TYPEDEF_EXTERNALTRIGGERMODEARRAY_T
	typedef void* EXTERNALTRIGGERMODEARRAY_T;
#endif /* EXTERN_TYPEDEF_EXTERNALTRIGGERMODEARRAY_T */
#ifndef EXTERN_TYPEDEF_OFFSETCONSTRAINTS_T
#define EXTERN_TYPEDEF_OFFSETCONSTRAINTS_T
	typedef void* OFFSETCONSTRAINTS_T;
#endif /* EXTERN_TYPEDEF_OFFSETCONSTRAINTS_T */
#ifndef EXTERN_TYPEDEF_REFERENCECONSTRAINTS_T
#define EXTERN_TYPEDEF_REFERENCECONSTRAINTS_T
	typedef void* REFERENCECONSTRAINTS_T;
#endif /* EXTERN_TYPEDEF_REFERENCECONSTRAINTS_T */
#ifndef EXTERN_TYPEDEF_IPV4SUBNETADDRESS_T
#define EXTERN_TYPEDEF_IPV4SUBNETADDRESS_T
	typedef void* IPV4SUBNETADDRESS_T;
#endif /* EXTERN_TYPEDEF_IPV4SUBNETADDRESS_T */
#ifndef EXTERN_TYPEDEF_IPV4ADDRESS_T
#define EXTERN_TYPEDEF_IPV4ADDRESS_T
	typedef void* IPV4ADDRESS_T;
#endif /* EXTERN_TYPEDEF_IPV4ADDRESS_T */
#ifndef EXTERN_TYPEDEF_WIFISSID_T
#define EXTERN_TYPEDEF_WIFISSID_T
	typedef void* WIFISSID_T;
#endif /* EXTERN_TYPEDEF_WIFISSID_T */
#ifndef EXTERN_TYPEDEF_WIFIPASSPHRASE_T
#define EXTERN_TYPEDEF_WIFIPASSPHRASE_T
	typedef void* WIFIPASSPHRASE_T;
#endif /* EXTERN_TYPEDEF_WIFIPASSPHRASE_T */
#ifndef EXTERN_TYPEDEF_FLAMEXNETWORK_T
#define EXTERN_TYPEDEF_FLAMEXNETWORK_T
	typedef void* FLAMEXNETWORK_T;
#endif /* EXTERN_TYPEDEF_FLAMEXNETWORK_T */

	// No public default Java constructor; creating one:
	EXPORTED FLAMEXNETWORK_T FlameXNetwork_Create();
	EXPORTED FLAMEXNETWORK_T FlameXNetwork_Create_1(int i);
	EXPORTED FLAMEXNETWORK_T FlameXNetwork_Create_3(JSOCKET_T jSocket);
	EXPORTED void FlameXNetwork_openSpectrometer(FLAMEXNETWORK_T c_flame_x_network, int index);
	EXPORTED void FlameXNetwork_getDarkArray(FLAMEXNETWORK_T c_flame_x_network, DOUBLEARRAY_T retval);
	EXPORTED void FlameXNetwork_getFirmwareVersion(FLAMEXNETWORK_T c_flame_x_network, JSTRING_T retval);
	EXPORTED void FlameXNetwork_getInfo(FLAMEXNETWORK_T c_flame_x_network, int slot, JSTRING_T retval);
	EXPORTED void FlameXNetwork_getInfoBytes(FLAMEXNETWORK_T c_flame_x_network, int slot, CHARARRAY_T retval);
	EXPORTED void FlameXNetwork_getStatusArray(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T retval);
	EXPORTED void FlameXNetwork_initialize(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_setInfo(FLAMEXNETWORK_T c_flame_x_network, int slot, JSTRING_T str);
	EXPORTED void FlameXNetwork_setInfoBytes(FLAMEXNETWORK_T c_flame_x_network, int slot, CHARARRAY_T byteArray);
	EXPORTED void FlameXNetwork_setIntegrationTime(FLAMEXNETWORK_T c_flame_x_network, int intTime);
	EXPORTED void FlameXNetwork_getIrradianceCalibrationFactors(FLAMEXNETWORK_T c_flame_x_network, DOUBLEARRAY_T retval);
	EXPORTED void FlameXNetwork_setIrradianceCalibrationFactors(FLAMEXNETWORK_T c_flame_x_network, DOUBLEARRAY_T data);
	EXPORTED double FlameXNetwork_getCollectionArea(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED short FlameXNetwork_hasCollectionArea(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_setCollectionArea(FLAMEXNETWORK_T c_flame_x_network, double area);
	EXPORTED void FlameXNetwork_writeNonlinearityCoefficientsToSpectrometer(FLAMEXNETWORK_T c_flame_x_network, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void FlameXNetwork_readNonlinearityCoefficientsFromSpectrometer(FLAMEXNETWORK_T c_flame_x_network, COEFFICIENTSARRAY_T retval);
	EXPORTED void FlameXNetwork_setNonlinearityCoefficients(FLAMEXNETWORK_T c_flame_x_network, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void FlameXNetwork_getNonlinearityCoefficients(FLAMEXNETWORK_T c_flame_x_network, COEFFICIENTSARRAY_T retval);
	EXPORTED void FlameXNetwork_getNonlinearityCoefficientsSingleChannel(FLAMEXNETWORK_T c_flame_x_network, int channelIndex, DOUBLEARRAY_T retval);
	EXPORTED void FlameXNetwork_setNonlinearityCoefficientsSingleChannel(FLAMEXNETWORK_T c_flame_x_network, DOUBLEARRAY_T nonlinearities, int channelIndex);
	EXPORTED void FlameXNetwork_setStrobeEnable(FLAMEXNETWORK_T c_flame_x_network, short enable);
	EXPORTED int FlameXNetwork_getSpectrumReadThrottleMilliseconds(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_setSpectrumReadThrottleMilliseconds(FLAMEXNETWORK_T c_flame_x_network, int value);
	EXPORTED int FlameXNetwork_getSocketTimeoutMilliseconds(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_setSocketTimeoutMilliseconds(FLAMEXNETWORK_T c_flame_x_network, int value);
	EXPORTED short FlameXNetwork_isCheckForBytesAvailableEnabled(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_setCheckForBytesAvailable(FLAMEXNETWORK_T c_flame_x_network, short value);
	EXPORTED int FlameXNetwork_getReadSpectrumRetryLimit(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_setReadSpectrumRetryLimit(FLAMEXNETWORK_T c_flame_x_network, int value);
	EXPORTED void FlameXNetwork_readBenchID(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T retval);
	EXPORTED void FlameXNetwork_writeBenchID(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T id);
	EXPORTED void FlameXNetwork_readBenchSerialNumber(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T retval);
	EXPORTED void FlameXNetwork_writeBenchSerialNumber(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T sn);
	EXPORTED void FlameXNetwork_readDetectorSerialNumber(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T retval);
	EXPORTED void FlameXNetwork_writeDetectorSerialNumber(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T sn);
	EXPORTED void FlameXNetwork_writeSlitWidthMicrons(FLAMEXNETWORK_T c_flame_x_network, short microns);
	EXPORTED void FlameXNetwork_writeFiberDiameterMicrons(FLAMEXNETWORK_T c_flame_x_network, short microns);
	EXPORTED void FlameXNetwork_readGrating(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T retval);
	EXPORTED void FlameXNetwork_writeGrating(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T grating);
	EXPORTED void FlameXNetwork_readCoating(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T retval);
	EXPORTED void FlameXNetwork_writeCoating(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T coating);
	EXPORTED void FlameXNetwork_readFilter(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T retval);
	EXPORTED void FlameXNetwork_writeFilter(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T filter);
	EXPORTED void FlameXNetwork_getGUIFeatures(FLAMEXNETWORK_T c_flame_x_network, GUIPROVIDERARRAY_T retval);
	EXPORTED void FlameXNetwork_connectToSource(FLAMEXNETWORK_T c_flame_x_network, JSTRING_T address, int port);
	EXPORTED short FlameXNetwork_isConnected(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_disconnect(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_reconnect(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_queryDevice(FLAMEXNETWORK_T c_flame_x_network, int messageType, CHARARRAY_T payload, CHARARRAY_T retval);
	EXPORTED short FlameXNetwork_sendCommandToDevice(FLAMEXNETWORK_T c_flame_x_network, int messageType, CHARARRAY_T payload);
	EXPORTED int FlameXNetwork_getDarkValue(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_setDarkValue(FLAMEXNETWORK_T c_flame_x_network, int value);
	EXPORTED double FlameXNetwork_getSaturationValue(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_setSaturationValue(FLAMEXNETWORK_T c_flame_x_network, double value);
	EXPORTED void FlameXNetwork_recordSettings(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_getWavelengthCalibrationCoefficients(FLAMEXNETWORK_T c_flame_x_network, COEFFICIENTSARRAY_T retval);
	EXPORTED void FlameXNetwork_getWavelengths(FLAMEXNETWORK_T c_flame_x_network, int index, DOUBLEARRAY_T retval);
	EXPORTED void FlameXNetwork_readWavelengthCalibrationCoefficientsFromSpectrometer(FLAMEXNETWORK_T c_flame_x_network, COEFFICIENTSARRAY_T retval);
	EXPORTED void FlameXNetwork_setWavelengthCalibrationCoefficients(FLAMEXNETWORK_T c_flame_x_network, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void FlameXNetwork_setWavelengths(FLAMEXNETWORK_T c_flame_x_network, DOUBLEARRAY_T wavelengths, int index);
	EXPORTED void FlameXNetwork_writeWavelengthCoefficientsToSpectrometer(FLAMEXNETWORK_T c_flame_x_network, COEFFICIENTSARRAY_T coefficients);
	EXPORTED double FlameXNetwork_getSingleStrobeCountsToMicros(FLAMEXNETWORK_T c_flame_x_network, int counts);
	EXPORTED int FlameXNetwork_getSingleStrobeHigh(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int FlameXNetwork_getSingleStrobeIncrement(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int FlameXNetwork_getSingleStrobeLow(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int FlameXNetwork_getSingleStrobeMaximum(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int FlameXNetwork_getSingleStrobeMinimum(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_setSingleStrobeHigh(FLAMEXNETWORK_T c_flame_x_network, int counts);
	EXPORTED void FlameXNetwork_setSingleStrobeLow(FLAMEXNETWORK_T c_flame_x_network, int counts);
	EXPORTED double FlameXNetwork_continuousStrobeCountsToMicros(FLAMEXNETWORK_T c_flame_x_network, int counts);
	EXPORTED int FlameXNetwork_getContinuousStrobeDelayIncrement(FLAMEXNETWORK_T c_flame_x_network, int magnitude);
	EXPORTED int FlameXNetwork_getContinuousStrobeDelayMaximum(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int FlameXNetwork_getContinuousStrobeDelayMinimum(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_setContinuousStrobeDelay(FLAMEXNETWORK_T c_flame_x_network, int durationOfPhase);
	EXPORTED void FlameXNetwork_setContinuousModeType(FLAMEXNETWORK_T c_flame_x_network, short mode);
	EXPORTED void FlameXNetwork_setDelayAfterIntegration(FLAMEXNETWORK_T c_flame_x_network, int delay);
	EXPORTED short FlameXNetwork_getContinuousModeType(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int FlameXNetwork_getDelayAfterIntegration(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_setContinuousEnable(FLAMEXNETWORK_T c_flame_x_network, short value);
	EXPORTED short FlameXNetwork_getContinuousEnable(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_getDirectionBits(FLAMEXNETWORK_T c_flame_x_network, BITSET_T retval);
	EXPORTED void FlameXNetwork_getMuxBits(FLAMEXNETWORK_T c_flame_x_network, BITSET_T retval);
	EXPORTED int FlameXNetwork_getNumberOfPins(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int FlameXNetwork_getTotalGPIOBits(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int FlameXNetwork_getValueBit(FLAMEXNETWORK_T c_flame_x_network, int bitNumber);
	EXPORTED void FlameXNetwork_getValueBits(FLAMEXNETWORK_T c_flame_x_network, BITSET_T retval);
	EXPORTED void FlameXNetwork_setDirectionAllBits(FLAMEXNETWORK_T c_flame_x_network, BITSET_T bitSet);
	EXPORTED void FlameXNetwork_setDirectionBit(FLAMEXNETWORK_T c_flame_x_network, int bit, short value);
	EXPORTED void FlameXNetwork_setDirectionBitmask(FLAMEXNETWORK_T c_flame_x_network, short bitmask);
	EXPORTED void FlameXNetwork_setMuxAllBits(FLAMEXNETWORK_T c_flame_x_network, BITSET_T bitSet);
	EXPORTED void FlameXNetwork_setMuxBit(FLAMEXNETWORK_T c_flame_x_network, int bit, short value);
	EXPORTED void FlameXNetwork_setMuxBitmask(FLAMEXNETWORK_T c_flame_x_network, short bitmask);
	EXPORTED void FlameXNetwork_setValueAllBits(FLAMEXNETWORK_T c_flame_x_network, BITSET_T bitSet);
	EXPORTED void FlameXNetwork_setValueBit(FLAMEXNETWORK_T c_flame_x_network, int bit, short value);
	EXPORTED void FlameXNetwork_setValueBitmask(FLAMEXNETWORK_T c_flame_x_network, short bitmask);
	EXPORTED void FlameXNetwork_setExternalTriggerDelay(FLAMEXNETWORK_T c_flame_x_network, int counts);
	EXPORTED double FlameXNetwork_triggerDelayCountsToMicroseconds(FLAMEXNETWORK_T c_flame_x_network, int counts);
	EXPORTED int FlameXNetwork_getExternalTriggerDelayMinimum(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int FlameXNetwork_getExternalTriggerDelayMaximum(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int FlameXNetwork_getExternalTriggerDelayIncrement(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_setExternalTriggerMode(FLAMEXNETWORK_T c_flame_x_network, int mode);
	EXPORTED void FlameXNetwork_getExternalTriggerModes(FLAMEXNETWORK_T c_flame_x_network, EXTERNALTRIGGERMODEARRAY_T retval);
	EXPORTED double FlameXNetwork_getBoardTemperatureCelsius(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED double FlameXNetwork_getDetectorTemperatureCelsius(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_setOffsetCount(FLAMEXNETWORK_T c_flame_x_network, int baselineOffset);
	EXPORTED void FlameXNetwork_setReferenceCount(FLAMEXNETWORK_T c_flame_x_network, int referenceCnt);
	EXPORTED int FlameXNetwork_getReferenceCount(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int FlameXNetwork_getOffsetCount(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_getOffsetConstraints(FLAMEXNETWORK_T c_flame_x_network, OFFSETCONSTRAINTS_T retval);
	EXPORTED void FlameXNetwork_getReferenceConstraints(FLAMEXNETWORK_T c_flame_x_network, REFERENCECONSTRAINTS_T retval);
	EXPORTED long long FlameXNetwork_readClock(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_writeClock(FLAMEXNETWORK_T c_flame_x_network, long long value);
	EXPORTED void FlameXNetwork_setCurrentTime(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int FlameXNetwork_setI2CBytes(FLAMEXNETWORK_T c_flame_x_network, signed char address, signed char numBytes, CHARARRAY_T i2C);
	EXPORTED void FlameXNetwork_getI2CBytes(FLAMEXNETWORK_T c_flame_x_network, signed char address, signed char numBytes, CHARARRAY_T retval);
	EXPORTED void FlameXNetwork_getSPIBytes(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T message, int length, CHARARRAY_T retval);
	EXPORTED void FlameXNetwork_writeMACAddress(FLAMEXNETWORK_T c_flame_x_network, int iface, JSTRING_T address);
	EXPORTED void FlameXNetwork_readMACAddress(FLAMEXNETWORK_T c_flame_x_network, int iface, JSTRING_T retval);
	EXPORTED short FlameXNetwork_runSelfTest(FLAMEXNETWORK_T c_flame_x_network, int iface);
	EXPORTED short FlameXNetwork_isDHCPEnabled(FLAMEXNETWORK_T c_flame_x_network, int iface);
	EXPORTED void FlameXNetwork_setDHCPEnable(FLAMEXNETWORK_T c_flame_x_network, int iface, short enable);
	EXPORTED void FlameXNetwork_getIPv4Address(FLAMEXNETWORK_T c_flame_x_network, int iface, int addrIndex, IPV4SUBNETADDRESS_T retval);
	EXPORTED void FlameXNetwork_addIPv4Address(FLAMEXNETWORK_T c_flame_x_network, int iface, IPV4SUBNETADDRESS_T address);
	EXPORTED void FlameXNetwork_removeIPv4Address(FLAMEXNETWORK_T c_flame_x_network, int iface, int addrIndex);
	EXPORTED void FlameXNetwork_getIPv4Gateway(FLAMEXNETWORK_T c_flame_x_network, int iface, IPV4ADDRESS_T retval);
	EXPORTED void FlameXNetwork_setIPv4Gateway(FLAMEXNETWORK_T c_flame_x_network, int iface, IPV4ADDRESS_T address);
	EXPORTED short FlameXNetwork_supportsMulticast(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int FlameXNetwork_getNumberOfInterfaces(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED short FlameXNetwork_isInterfaceEnabled(FLAMEXNETWORK_T c_flame_x_network, int iface);
	EXPORTED void FlameXNetwork_setInterfaceEnable(FLAMEXNETWORK_T c_flame_x_network, int iface, short enable);
	EXPORTED void FlameXNetwork_saveSettings(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED short FlameXNetwork_hasGigabitEnable(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED short FlameXNetwork_isGigabitEnabled(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_setGigabitEnable(FLAMEXNETWORK_T c_flame_x_network, short enable);
	EXPORTED void FlameXNetwork_getSSID(FLAMEXNETWORK_T c_flame_x_network, WIFISSID_T retval);
	EXPORTED void FlameXNetwork_setSSID(FLAMEXNETWORK_T c_flame_x_network, WIFISSID_T id);
	EXPORTED void FlameXNetwork_getWiFiMode(FLAMEXNETWORK_T c_flame_x_network, JSTRING_T retval);
	EXPORTED void FlameXNetwork_setWiFiMode(FLAMEXNETWORK_T c_flame_x_network, JSTRING_T mode);
	EXPORTED void FlameXNetwork_getWiFiSecurity(FLAMEXNETWORK_T c_flame_x_network, JSTRING_T retval);
	EXPORTED void FlameXNetwork_setWiFiSecurity(FLAMEXNETWORK_T c_flame_x_network, JSTRING_T mode);
	EXPORTED void FlameXNetwork_setWiFiPassphrase(FLAMEXNETWORK_T c_flame_x_network, WIFIPASSPHRASE_T passPhrase);
	EXPORTED short FlameXNetwork_isDhcpServer(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_setDhcpServer(FLAMEXNETWORK_T c_flame_x_network, short enable);
	EXPORTED void FlameXNetwork_getDhcpBaseAddress(FLAMEXNETWORK_T c_flame_x_network, IPV4SUBNETADDRESS_T retval);
	EXPORTED void FlameXNetwork_setDhcpBaseAddress(FLAMEXNETWORK_T c_flame_x_network, IPV4SUBNETADDRESS_T address);
	EXPORTED void FlameXNetwork_setSpectraCount(FLAMEXNETWORK_T c_flame_x_network, int value);
	EXPORTED short FlameXNetwork_getBufferEnable(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_setBufferEnable(FLAMEXNETWORK_T c_flame_x_network, short enable);
	EXPORTED void FlameXNetwork_setB2BCapacity(FLAMEXNETWORK_T c_flame_x_network, int bufferSize);
	EXPORTED void FlameXNetwork_clearBuffer(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void FlameXNetwork_Destroy(FLAMEXNETWORK_T flame_x_network);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED FLAMEXNETWORK_T STDCALL FlameXNetwork_Create_stdcall_1(int i);
	EXPORTED FLAMEXNETWORK_T STDCALL FlameXNetwork_Create_stdcall_3(JSOCKET_T jSocket);
	EXPORTED void STDCALL FlameXNetwork_openSpectrometer_stdcall(FLAMEXNETWORK_T c_flame_x_network, int index);
	EXPORTED void STDCALL FlameXNetwork_getDarkArray_stdcall(FLAMEXNETWORK_T c_flame_x_network, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL FlameXNetwork_getFirmwareVersion_stdcall(FLAMEXNETWORK_T c_flame_x_network, JSTRING_T retval);
	EXPORTED void STDCALL FlameXNetwork_getInfo_stdcall(FLAMEXNETWORK_T c_flame_x_network, int slot, JSTRING_T retval);
	EXPORTED void STDCALL FlameXNetwork_getInfoBytes_stdcall(FLAMEXNETWORK_T c_flame_x_network, int slot, CHARARRAY_T retval);
	EXPORTED void STDCALL FlameXNetwork_getStatusArray_stdcall(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T retval);
	EXPORTED void STDCALL FlameXNetwork_initialize_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_setInfo_stdcall(FLAMEXNETWORK_T c_flame_x_network, int slot, JSTRING_T str);
	EXPORTED void STDCALL FlameXNetwork_setInfoBytes_stdcall(FLAMEXNETWORK_T c_flame_x_network, int slot, CHARARRAY_T byteArray);
	EXPORTED void STDCALL FlameXNetwork_setIntegrationTime_stdcall(FLAMEXNETWORK_T c_flame_x_network, int intTime);
	EXPORTED void STDCALL FlameXNetwork_getIrradianceCalibrationFactors_stdcall(FLAMEXNETWORK_T c_flame_x_network, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL FlameXNetwork_setIrradianceCalibrationFactors_stdcall(FLAMEXNETWORK_T c_flame_x_network, DOUBLEARRAY_T data);
	EXPORTED double STDCALL FlameXNetwork_getCollectionArea_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED short STDCALL FlameXNetwork_hasCollectionArea_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_setCollectionArea_stdcall(FLAMEXNETWORK_T c_flame_x_network, double area);
	EXPORTED void STDCALL FlameXNetwork_writeNonlinearityCoefficientsToSpectrometer_stdcall(FLAMEXNETWORK_T c_flame_x_network, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL FlameXNetwork_readNonlinearityCoefficientsFromSpectrometer_stdcall(FLAMEXNETWORK_T c_flame_x_network, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL FlameXNetwork_setNonlinearityCoefficients_stdcall(FLAMEXNETWORK_T c_flame_x_network, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL FlameXNetwork_getNonlinearityCoefficients_stdcall(FLAMEXNETWORK_T c_flame_x_network, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL FlameXNetwork_getNonlinearityCoefficientsSingleChannel_stdcall(FLAMEXNETWORK_T c_flame_x_network, int channelIndex, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL FlameXNetwork_setNonlinearityCoefficientsSingleChannel_stdcall(FLAMEXNETWORK_T c_flame_x_network, DOUBLEARRAY_T nonlinearities, int channelIndex);
	EXPORTED void STDCALL FlameXNetwork_setStrobeEnable_stdcall(FLAMEXNETWORK_T c_flame_x_network, short enable);
	EXPORTED int STDCALL FlameXNetwork_getSpectrumReadThrottleMilliseconds_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_setSpectrumReadThrottleMilliseconds_stdcall(FLAMEXNETWORK_T c_flame_x_network, int value);
	EXPORTED int STDCALL FlameXNetwork_getSocketTimeoutMilliseconds_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_setSocketTimeoutMilliseconds_stdcall(FLAMEXNETWORK_T c_flame_x_network, int value);
	EXPORTED short STDCALL FlameXNetwork_isCheckForBytesAvailableEnabled_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_setCheckForBytesAvailable_stdcall(FLAMEXNETWORK_T c_flame_x_network, short value);
	EXPORTED int STDCALL FlameXNetwork_getReadSpectrumRetryLimit_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_setReadSpectrumRetryLimit_stdcall(FLAMEXNETWORK_T c_flame_x_network, int value);
	EXPORTED void STDCALL FlameXNetwork_readBenchID_stdcall(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T retval);
	EXPORTED void STDCALL FlameXNetwork_writeBenchID_stdcall(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T id);
	EXPORTED void STDCALL FlameXNetwork_readBenchSerialNumber_stdcall(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T retval);
	EXPORTED void STDCALL FlameXNetwork_writeBenchSerialNumber_stdcall(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T sn);
	EXPORTED void STDCALL FlameXNetwork_readDetectorSerialNumber_stdcall(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T retval);
	EXPORTED void STDCALL FlameXNetwork_writeDetectorSerialNumber_stdcall(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T sn);
	EXPORTED void STDCALL FlameXNetwork_writeSlitWidthMicrons_stdcall(FLAMEXNETWORK_T c_flame_x_network, short microns);
	EXPORTED void STDCALL FlameXNetwork_writeFiberDiameterMicrons_stdcall(FLAMEXNETWORK_T c_flame_x_network, short microns);
	EXPORTED void STDCALL FlameXNetwork_readGrating_stdcall(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T retval);
	EXPORTED void STDCALL FlameXNetwork_writeGrating_stdcall(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T grating);
	EXPORTED void STDCALL FlameXNetwork_readCoating_stdcall(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T retval);
	EXPORTED void STDCALL FlameXNetwork_writeCoating_stdcall(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T coating);
	EXPORTED void STDCALL FlameXNetwork_readFilter_stdcall(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T retval);
	EXPORTED void STDCALL FlameXNetwork_writeFilter_stdcall(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T filter);
	EXPORTED void STDCALL FlameXNetwork_getGUIFeatures_stdcall(FLAMEXNETWORK_T c_flame_x_network, GUIPROVIDERARRAY_T retval);
	EXPORTED void STDCALL FlameXNetwork_connectToSource_stdcall(FLAMEXNETWORK_T c_flame_x_network, JSTRING_T address, int port);
	EXPORTED short STDCALL FlameXNetwork_isConnected_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_disconnect_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_reconnect_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_queryDevice_stdcall(FLAMEXNETWORK_T c_flame_x_network, int messageType, CHARARRAY_T payload, CHARARRAY_T retval);
	EXPORTED short STDCALL FlameXNetwork_sendCommandToDevice_stdcall(FLAMEXNETWORK_T c_flame_x_network, int messageType, CHARARRAY_T payload);
	EXPORTED int STDCALL FlameXNetwork_getDarkValue_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_setDarkValue_stdcall(FLAMEXNETWORK_T c_flame_x_network, int value);
	EXPORTED double STDCALL FlameXNetwork_getSaturationValue_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_setSaturationValue_stdcall(FLAMEXNETWORK_T c_flame_x_network, double value);
	EXPORTED void STDCALL FlameXNetwork_recordSettings_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_getWavelengthCalibrationCoefficients_stdcall(FLAMEXNETWORK_T c_flame_x_network, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL FlameXNetwork_getWavelengths_stdcall(FLAMEXNETWORK_T c_flame_x_network, int index, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL FlameXNetwork_readWavelengthCalibrationCoefficientsFromSpectrometer_stdcall(FLAMEXNETWORK_T c_flame_x_network, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL FlameXNetwork_setWavelengthCalibrationCoefficients_stdcall(FLAMEXNETWORK_T c_flame_x_network, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL FlameXNetwork_setWavelengths_stdcall(FLAMEXNETWORK_T c_flame_x_network, DOUBLEARRAY_T wavelengths, int index);
	EXPORTED void STDCALL FlameXNetwork_writeWavelengthCoefficientsToSpectrometer_stdcall(FLAMEXNETWORK_T c_flame_x_network, COEFFICIENTSARRAY_T coefficients);
	EXPORTED double STDCALL FlameXNetwork_getSingleStrobeCountsToMicros_stdcall(FLAMEXNETWORK_T c_flame_x_network, int counts);
	EXPORTED int STDCALL FlameXNetwork_getSingleStrobeHigh_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int STDCALL FlameXNetwork_getSingleStrobeIncrement_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int STDCALL FlameXNetwork_getSingleStrobeLow_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int STDCALL FlameXNetwork_getSingleStrobeMaximum_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int STDCALL FlameXNetwork_getSingleStrobeMinimum_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_setSingleStrobeHigh_stdcall(FLAMEXNETWORK_T c_flame_x_network, int counts);
	EXPORTED void STDCALL FlameXNetwork_setSingleStrobeLow_stdcall(FLAMEXNETWORK_T c_flame_x_network, int counts);
	EXPORTED double STDCALL FlameXNetwork_continuousStrobeCountsToMicros_stdcall(FLAMEXNETWORK_T c_flame_x_network, int counts);
	EXPORTED int STDCALL FlameXNetwork_getContinuousStrobeDelayIncrement_stdcall(FLAMEXNETWORK_T c_flame_x_network, int magnitude);
	EXPORTED int STDCALL FlameXNetwork_getContinuousStrobeDelayMaximum_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int STDCALL FlameXNetwork_getContinuousStrobeDelayMinimum_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_setContinuousStrobeDelay_stdcall(FLAMEXNETWORK_T c_flame_x_network, int durationOfPhase);
	EXPORTED void STDCALL FlameXNetwork_setContinuousModeType_stdcall(FLAMEXNETWORK_T c_flame_x_network, short mode);
	EXPORTED void STDCALL FlameXNetwork_setDelayAfterIntegration_stdcall(FLAMEXNETWORK_T c_flame_x_network, int delay);
	EXPORTED short STDCALL FlameXNetwork_getContinuousModeType_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int STDCALL FlameXNetwork_getDelayAfterIntegration_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_setContinuousEnable_stdcall(FLAMEXNETWORK_T c_flame_x_network, short value);
	EXPORTED short STDCALL FlameXNetwork_getContinuousEnable_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_getDirectionBits_stdcall(FLAMEXNETWORK_T c_flame_x_network, BITSET_T retval);
	EXPORTED void STDCALL FlameXNetwork_getMuxBits_stdcall(FLAMEXNETWORK_T c_flame_x_network, BITSET_T retval);
	EXPORTED int STDCALL FlameXNetwork_getNumberOfPins_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int STDCALL FlameXNetwork_getTotalGPIOBits_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int STDCALL FlameXNetwork_getValueBit_stdcall(FLAMEXNETWORK_T c_flame_x_network, int bitNumber);
	EXPORTED void STDCALL FlameXNetwork_getValueBits_stdcall(FLAMEXNETWORK_T c_flame_x_network, BITSET_T retval);
	EXPORTED void STDCALL FlameXNetwork_setDirectionAllBits_stdcall(FLAMEXNETWORK_T c_flame_x_network, BITSET_T bitSet);
	EXPORTED void STDCALL FlameXNetwork_setDirectionBit_stdcall(FLAMEXNETWORK_T c_flame_x_network, int bit, short value);
	EXPORTED void STDCALL FlameXNetwork_setDirectionBitmask_stdcall(FLAMEXNETWORK_T c_flame_x_network, short bitmask);
	EXPORTED void STDCALL FlameXNetwork_setMuxAllBits_stdcall(FLAMEXNETWORK_T c_flame_x_network, BITSET_T bitSet);
	EXPORTED void STDCALL FlameXNetwork_setMuxBit_stdcall(FLAMEXNETWORK_T c_flame_x_network, int bit, short value);
	EXPORTED void STDCALL FlameXNetwork_setMuxBitmask_stdcall(FLAMEXNETWORK_T c_flame_x_network, short bitmask);
	EXPORTED void STDCALL FlameXNetwork_setValueAllBits_stdcall(FLAMEXNETWORK_T c_flame_x_network, BITSET_T bitSet);
	EXPORTED void STDCALL FlameXNetwork_setValueBit_stdcall(FLAMEXNETWORK_T c_flame_x_network, int bit, short value);
	EXPORTED void STDCALL FlameXNetwork_setValueBitmask_stdcall(FLAMEXNETWORK_T c_flame_x_network, short bitmask);
	EXPORTED void STDCALL FlameXNetwork_setExternalTriggerDelay_stdcall(FLAMEXNETWORK_T c_flame_x_network, int counts);
	EXPORTED double STDCALL FlameXNetwork_triggerDelayCountsToMicroseconds_stdcall(FLAMEXNETWORK_T c_flame_x_network, int counts);
	EXPORTED int STDCALL FlameXNetwork_getExternalTriggerDelayMinimum_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int STDCALL FlameXNetwork_getExternalTriggerDelayMaximum_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int STDCALL FlameXNetwork_getExternalTriggerDelayIncrement_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_setExternalTriggerMode_stdcall(FLAMEXNETWORK_T c_flame_x_network, int mode);
	EXPORTED void STDCALL FlameXNetwork_getExternalTriggerModes_stdcall(FLAMEXNETWORK_T c_flame_x_network, EXTERNALTRIGGERMODEARRAY_T retval);
	EXPORTED double STDCALL FlameXNetwork_getBoardTemperatureCelsius_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED double STDCALL FlameXNetwork_getDetectorTemperatureCelsius_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_setOffsetCount_stdcall(FLAMEXNETWORK_T c_flame_x_network, int baselineOffset);
	EXPORTED void STDCALL FlameXNetwork_setReferenceCount_stdcall(FLAMEXNETWORK_T c_flame_x_network, int referenceCnt);
	EXPORTED int STDCALL FlameXNetwork_getReferenceCount_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int STDCALL FlameXNetwork_getOffsetCount_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_getOffsetConstraints_stdcall(FLAMEXNETWORK_T c_flame_x_network, OFFSETCONSTRAINTS_T retval);
	EXPORTED void STDCALL FlameXNetwork_getReferenceConstraints_stdcall(FLAMEXNETWORK_T c_flame_x_network, REFERENCECONSTRAINTS_T retval);
	EXPORTED long long STDCALL FlameXNetwork_readClock_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_writeClock_stdcall(FLAMEXNETWORK_T c_flame_x_network, long long value);
	EXPORTED void STDCALL FlameXNetwork_setCurrentTime_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int STDCALL FlameXNetwork_setI2CBytes_stdcall(FLAMEXNETWORK_T c_flame_x_network, signed char address, signed char numBytes, CHARARRAY_T i2C);
	EXPORTED void STDCALL FlameXNetwork_getI2CBytes_stdcall(FLAMEXNETWORK_T c_flame_x_network, signed char address, signed char numBytes, CHARARRAY_T retval);
	EXPORTED void STDCALL FlameXNetwork_getSPIBytes_stdcall(FLAMEXNETWORK_T c_flame_x_network, CHARARRAY_T message, int length, CHARARRAY_T retval);
	EXPORTED void STDCALL FlameXNetwork_writeMACAddress_stdcall(FLAMEXNETWORK_T c_flame_x_network, int iface, JSTRING_T address);
	EXPORTED void STDCALL FlameXNetwork_readMACAddress_stdcall(FLAMEXNETWORK_T c_flame_x_network, int iface, JSTRING_T retval);
	EXPORTED short STDCALL FlameXNetwork_runSelfTest_stdcall(FLAMEXNETWORK_T c_flame_x_network, int iface);
	EXPORTED short STDCALL FlameXNetwork_isDHCPEnabled_stdcall(FLAMEXNETWORK_T c_flame_x_network, int iface);
	EXPORTED void STDCALL FlameXNetwork_setDHCPEnable_stdcall(FLAMEXNETWORK_T c_flame_x_network, int iface, short enable);
	EXPORTED void STDCALL FlameXNetwork_getIPv4Address_stdcall(FLAMEXNETWORK_T c_flame_x_network, int iface, int addrIndex, IPV4SUBNETADDRESS_T retval);
	EXPORTED void STDCALL FlameXNetwork_addIPv4Address_stdcall(FLAMEXNETWORK_T c_flame_x_network, int iface, IPV4SUBNETADDRESS_T address);
	EXPORTED void STDCALL FlameXNetwork_removeIPv4Address_stdcall(FLAMEXNETWORK_T c_flame_x_network, int iface, int addrIndex);
	EXPORTED void STDCALL FlameXNetwork_getIPv4Gateway_stdcall(FLAMEXNETWORK_T c_flame_x_network, int iface, IPV4ADDRESS_T retval);
	EXPORTED void STDCALL FlameXNetwork_setIPv4Gateway_stdcall(FLAMEXNETWORK_T c_flame_x_network, int iface, IPV4ADDRESS_T address);
	EXPORTED short STDCALL FlameXNetwork_supportsMulticast_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED int STDCALL FlameXNetwork_getNumberOfInterfaces_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED short STDCALL FlameXNetwork_isInterfaceEnabled_stdcall(FLAMEXNETWORK_T c_flame_x_network, int iface);
	EXPORTED void STDCALL FlameXNetwork_setInterfaceEnable_stdcall(FLAMEXNETWORK_T c_flame_x_network, int iface, short enable);
	EXPORTED void STDCALL FlameXNetwork_saveSettings_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED short STDCALL FlameXNetwork_hasGigabitEnable_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED short STDCALL FlameXNetwork_isGigabitEnabled_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_setGigabitEnable_stdcall(FLAMEXNETWORK_T c_flame_x_network, short enable);
	EXPORTED void STDCALL FlameXNetwork_getSSID_stdcall(FLAMEXNETWORK_T c_flame_x_network, WIFISSID_T retval);
	EXPORTED void STDCALL FlameXNetwork_setSSID_stdcall(FLAMEXNETWORK_T c_flame_x_network, WIFISSID_T id);
	EXPORTED void STDCALL FlameXNetwork_getWiFiMode_stdcall(FLAMEXNETWORK_T c_flame_x_network, JSTRING_T retval);
	EXPORTED void STDCALL FlameXNetwork_setWiFiMode_stdcall(FLAMEXNETWORK_T c_flame_x_network, JSTRING_T mode);
	EXPORTED void STDCALL FlameXNetwork_getWiFiSecurity_stdcall(FLAMEXNETWORK_T c_flame_x_network, JSTRING_T retval);
	EXPORTED void STDCALL FlameXNetwork_setWiFiSecurity_stdcall(FLAMEXNETWORK_T c_flame_x_network, JSTRING_T mode);
	EXPORTED void STDCALL FlameXNetwork_setWiFiPassphrase_stdcall(FLAMEXNETWORK_T c_flame_x_network, WIFIPASSPHRASE_T passPhrase);
	EXPORTED short STDCALL FlameXNetwork_isDhcpServer_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_setDhcpServer_stdcall(FLAMEXNETWORK_T c_flame_x_network, short enable);
	EXPORTED void STDCALL FlameXNetwork_getDhcpBaseAddress_stdcall(FLAMEXNETWORK_T c_flame_x_network, IPV4SUBNETADDRESS_T retval);
	EXPORTED void STDCALL FlameXNetwork_setDhcpBaseAddress_stdcall(FLAMEXNETWORK_T c_flame_x_network, IPV4SUBNETADDRESS_T address);
	EXPORTED void STDCALL FlameXNetwork_setSpectraCount_stdcall(FLAMEXNETWORK_T c_flame_x_network, int value);
	EXPORTED short STDCALL FlameXNetwork_getBufferEnable_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_setBufferEnable_stdcall(FLAMEXNETWORK_T c_flame_x_network, short enable);
	EXPORTED void STDCALL FlameXNetwork_setB2BCapacity_stdcall(FLAMEXNETWORK_T c_flame_x_network, int bufferSize);
	EXPORTED void STDCALL FlameXNetwork_clearBuffer_stdcall(FLAMEXNETWORK_T c_flame_x_network);
	EXPORTED void STDCALL FlameXNetwork_Destroy_stdcall(FLAMEXNETWORK_T flame_x_network);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* FLAMEXNETWORK_H */
