/**
 * File: GetPositiveLimit.h
 * Autogenerated on Fri Mar 23 13:38:23 EDT 2018 based on
 * GetPositiveLimit.java
 * for the Java class
 * com/oceanoptics/omnidriver/accessories/mikropack/commands/getpositivelimit/GetPositiveLimit
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef GETPOSITIVELIMIT_H
#define GETPOSITIVELIMIT_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "Node.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class Node;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED GetPositiveLimit : public BaseJavaClass // CPPClass.tag001
{
public: 
	int getPositiveLimit(Node& param0);
	~GetPositiveLimit();
	// No public default Java constructor; creating one:
	GetPositiveLimit();
	// No public Java copy constructor; creating one:
	GetPositiveLimit(const GetPositiveLimit &that);
	// Creating assignment operator declaration:
	GetPositiveLimit &operator=(const GetPositiveLimit &that);

private:
	jmethodID mid_getPositiveLimit92;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_NODE_T
#define EXTERN_TYPEDEF_NODE_T
	typedef void* NODE_T;
#endif /* EXTERN_TYPEDEF_NODE_T */
#ifndef EXTERN_TYPEDEF_GETPOSITIVELIMIT_T
#define EXTERN_TYPEDEF_GETPOSITIVELIMIT_T
	typedef void* GETPOSITIVELIMIT_T;
#endif /* EXTERN_TYPEDEF_GETPOSITIVELIMIT_T */

	// No public default Java constructor; creating one:
	EXPORTED GETPOSITIVELIMIT_T GetPositiveLimit_Create();
	EXPORTED int GetPositiveLimit_getPositiveLimit(GETPOSITIVELIMIT_T c_get_positive_limit, NODE_T param0);
	EXPORTED void GetPositiveLimit_Destroy(GETPOSITIVELIMIT_T get_positive_limit);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED int STDCALL GetPositiveLimit_getPositiveLimit_stdcall(GETPOSITIVELIMIT_T c_get_positive_limit, NODE_T param0);
	EXPORTED void STDCALL GetPositiveLimit_Destroy_stdcall(GETPOSITIVELIMIT_T get_positive_limit);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* GETPOSITIVELIMIT_H */
