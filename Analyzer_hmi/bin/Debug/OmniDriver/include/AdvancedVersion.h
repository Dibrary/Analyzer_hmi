/**
 * File: AdvancedVersion.h
 * Autogenerated on Fri Mar 23 13:38:29 EDT 2018 based on
 * AdvancedVersion.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/advancedversion/AdvancedVersion
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef ADVANCEDVERSION_H
#define ADVANCEDVERSION_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED AdvancedVersion : public BaseJavaClass // CPPClass.tag001
{
public: 
	JString getFPGAFirmwareVersion();
	JString getPSOCVersion();
	JString getCpuVersion();
	int getDetectorType();
	void setDetectorType(int param0);
	JString getCpuSubVersion();
	void setScansToAverage(int param0);
	int getScansToAverage();
	~AdvancedVersion();
	// No public default Java constructor; creating one:
	AdvancedVersion();
	// No public Java copy constructor; creating one:
	AdvancedVersion(const AdvancedVersion &that);
	// Creating assignment operator declaration:
	AdvancedVersion &operator=(const AdvancedVersion &that);

private:
	jmethodID mid_getFPGAFirmwareVersion761;
	jmethodID mid_getPSOCVersion762;
	jmethodID mid_getCpuVersion763;
	jmethodID mid_getDetectorType764;
	jmethodID mid_setDetectorType765;
	jmethodID mid_getCpuSubVersion766;
	jmethodID mid_setScansToAverage767;
	jmethodID mid_getScansToAverage768;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_ADVANCEDVERSION_T
#define EXTERN_TYPEDEF_ADVANCEDVERSION_T
	typedef void* ADVANCEDVERSION_T;
#endif /* EXTERN_TYPEDEF_ADVANCEDVERSION_T */

	// No public default Java constructor; creating one:
	EXPORTED ADVANCEDVERSION_T AdvancedVersion_Create();
	EXPORTED void AdvancedVersion_getFPGAFirmwareVersion(ADVANCEDVERSION_T c_advanced_version, JSTRING_T retval);
	EXPORTED void AdvancedVersion_getPSOCVersion(ADVANCEDVERSION_T c_advanced_version, JSTRING_T retval);
	EXPORTED void AdvancedVersion_getCpuVersion(ADVANCEDVERSION_T c_advanced_version, JSTRING_T retval);
	EXPORTED int AdvancedVersion_getDetectorType(ADVANCEDVERSION_T c_advanced_version);
	EXPORTED void AdvancedVersion_setDetectorType(ADVANCEDVERSION_T c_advanced_version, int param0);
	EXPORTED void AdvancedVersion_getCpuSubVersion(ADVANCEDVERSION_T c_advanced_version, JSTRING_T retval);
	EXPORTED void AdvancedVersion_setScansToAverage(ADVANCEDVERSION_T c_advanced_version, int param0);
	EXPORTED int AdvancedVersion_getScansToAverage(ADVANCEDVERSION_T c_advanced_version);
	EXPORTED void AdvancedVersion_Destroy(ADVANCEDVERSION_T advanced_version);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED void STDCALL AdvancedVersion_getFPGAFirmwareVersion_stdcall(ADVANCEDVERSION_T c_advanced_version, JSTRING_T retval);
	EXPORTED void STDCALL AdvancedVersion_getPSOCVersion_stdcall(ADVANCEDVERSION_T c_advanced_version, JSTRING_T retval);
	EXPORTED void STDCALL AdvancedVersion_getCpuVersion_stdcall(ADVANCEDVERSION_T c_advanced_version, JSTRING_T retval);
	EXPORTED int STDCALL AdvancedVersion_getDetectorType_stdcall(ADVANCEDVERSION_T c_advanced_version);
	EXPORTED void STDCALL AdvancedVersion_setDetectorType_stdcall(ADVANCEDVERSION_T c_advanced_version, int param0);
	EXPORTED void STDCALL AdvancedVersion_getCpuSubVersion_stdcall(ADVANCEDVERSION_T c_advanced_version, JSTRING_T retval);
	EXPORTED void STDCALL AdvancedVersion_setScansToAverage_stdcall(ADVANCEDVERSION_T c_advanced_version, int param0);
	EXPORTED int STDCALL AdvancedVersion_getScansToAverage_stdcall(ADVANCEDVERSION_T c_advanced_version);
	EXPORTED void STDCALL AdvancedVersion_Destroy_stdcall(ADVANCEDVERSION_T advanced_version);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* ADVANCEDVERSION_H */
