/**
 * File: MPM2000.h
 * Autogenerated on Fri Mar 23 13:38:24 EDT 2018 based on
 * MPM2000.java
 * for the Java class
 * com/oceanoptics/omnidriver/accessories/mikropack/devices/MPM2000
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef MPM2000_H
#define MPM2000_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "MPDeviceBase.h"
#include "UniRS232.h"
#include "JStringArray.h"
#include "PrintStream.h"
#include "Node.h"
#include "JString.h"
#include "GetStatus$Status.h"
#include "GetOperationStatus$OperationStatus.h"
#include "GetFaultStatus$FaultStatus.h"
#include "GetActualStatus$ActualStatus.h"
#include "GetActualHomingStatus$ActualHomingStatus.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class MPDeviceBase;
class UniRS232;
class JStringArray;
class PrintStream;
class Node;
class JString;
class GetStatus$Status;
class GetOperationStatus$OperationStatus;
class GetFaultStatus$FaultStatus;
class GetActualStatus$ActualStatus;
class GetActualHomingStatus$ActualHomingStatus;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED MPM2000 : public MPDeviceBase // CPPClass.tag001
{
public: 
	MPM2000(UniRS232& serPort);
	int getSerialNumber();
	int getEEPROMVersion();
	void goToIndex(int index);
	int getCurrentIndex();
	void shiftIndex(int shiftBy);
	short is8Channel();
	void printEEPROM(JStringArray& param0, PrintStream& param1);
	void setResponseMode(Node& param0, int param1);
	void toggleDigitalOutput(Node& param0);
	void setVelocity(Node& param0, int param1);
	void setSpeed(Node& param0, int param1);
	void setOutputError(Node& param0);
	void setOutputDigital(Node& param0);
	void setHomePosition(Node& param0);
	void setDigitalOutput(Node& param0);
	void saveToEEPROM(Node& param0);
	void runHomingSequence(Node& param0);
	void runHallHoming(Node& param0);
	void resumeProgram(Node& param0);
	void resetNode(Node& param0);
	void notifyPositionEnable(Node& param0);
	void notifyPositionDisable(Node& param0);
	void moveAndWait(Node& param0, long long param1);
	void moveAndWait(Node& param0);
	void move(Node& param0);
	void loadRelativePosition(Node& param0, int param1);
	void loadAbsolutePosition(Node& param0, int param1);
	JString getVersion(Node& param0);
	int getVelocity(Node& param0);
	int getTemperature(Node& param0);
	int getTargetPosition(Node& param0);
	int getSpeed(Node& param0);
	GetStatus$Status getStatus(Node& param0);
	JStringArray getProgramSequence(Node& param0);
	int getPositiveLimit(Node& param0);
	int getPosition(Node& param0);
	GetOperationStatus$OperationStatus getOperationStatus(Node& param0);
	int getNodeNumber(Node& param0);
	int getNegativeLimit(Node& param0);
	int getMaximumSpeed(Node& param0);
	GetFaultStatus$FaultStatus getFaultStatus(Node& param0);
	int getCurrentActualVelocity(Node& param0);
	JString getControllerType(Node& param0);
	JString getControllerSerialNumber(Node& param0);
	GetActualStatus$ActualStatus getActualStatus(Node& param0);
	GetActualHomingStatus$ActualHomingStatus getActualHomingStatus(Node& param0);
	void endProgramSequence(Node& param0);
	void enableProgram(Node& param0);
	void enableDrive(Node& param0);
	void disableProgram(Node& param0);
	void disableDrive(Node& param0);
	void clearDigitalOutput(Node& param0);
	void beginProgrammingSequence(Node& param0);
	UniRS232 getSerialPort();
	void setSerialPort(UniRS232& param0);
	~MPM2000();
	// No public default Java constructor; creating one:
	MPM2000();
	// No public Java copy constructor; creating one:
	MPM2000(const MPM2000 &that);
	// Creating assignment operator declaration:
	MPM2000 &operator=(const MPM2000 &that);

private:
	jmethodID mid_MPM2000226;
	jmethodID mid_getSerialNumber227;
	jmethodID mid_getEEPROMVersion228;
	jmethodID mid_goToIndex229;
	jmethodID mid_getCurrentIndex230;
	jmethodID mid_shiftIndex231;
	jmethodID mid_is8Channel232;
	jmethodID mid_printEEPROM233;
	jmethodID mid_setResponseMode234;
	jmethodID mid_toggleDigitalOutput235;
	jmethodID mid_setVelocity236;
	jmethodID mid_setSpeed237;
	jmethodID mid_setOutputError238;
	jmethodID mid_setOutputDigital239;
	jmethodID mid_setHomePosition240;
	jmethodID mid_setDigitalOutput241;
	jmethodID mid_saveToEEPROM242;
	jmethodID mid_runHomingSequence243;
	jmethodID mid_runHallHoming244;
	jmethodID mid_resumeProgram245;
	jmethodID mid_resetNode246;
	jmethodID mid_notifyPositionEnable247;
	jmethodID mid_notifyPositionDisable248;
	jmethodID mid_moveAndWait249;
	jmethodID mid_moveAndWait250;
	jmethodID mid_move251;
	jmethodID mid_loadRelativePosition252;
	jmethodID mid_loadAbsolutePosition253;
	jmethodID mid_getVersion254;
	jmethodID mid_getVelocity255;
	jmethodID mid_getTemperature256;
	jmethodID mid_getTargetPosition257;
	jmethodID mid_getSpeed258;
	jmethodID mid_getStatus259;
	jmethodID mid_getProgramSequence260;
	jmethodID mid_getPositiveLimit261;
	jmethodID mid_getPosition262;
	jmethodID mid_getOperationStatus263;
	jmethodID mid_getNodeNumber264;
	jmethodID mid_getNegativeLimit265;
	jmethodID mid_getMaximumSpeed266;
	jmethodID mid_getFaultStatus267;
	jmethodID mid_getCurrentActualVelocity268;
	jmethodID mid_getControllerType269;
	jmethodID mid_getControllerSerialNumber270;
	jmethodID mid_getActualStatus271;
	jmethodID mid_getActualHomingStatus272;
	jmethodID mid_endProgramSequence273;
	jmethodID mid_enableProgram274;
	jmethodID mid_enableDrive275;
	jmethodID mid_disableProgram276;
	jmethodID mid_disableDrive277;
	jmethodID mid_clearDigitalOutput278;
	jmethodID mid_beginProgrammingSequence279;
	jmethodID mid_getSerialPort280;
	jmethodID mid_setSerialPort281;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_MPDEVICEBASE_T
#define EXTERN_TYPEDEF_MPDEVICEBASE_T
	typedef void* MPDEVICEBASE_T;
#endif /* EXTERN_TYPEDEF_MPDEVICEBASE_T */
#ifndef EXTERN_TYPEDEF_UNIRS232_T
#define EXTERN_TYPEDEF_UNIRS232_T
	typedef void* UNIRS232_T;
#endif /* EXTERN_TYPEDEF_UNIRS232_T */
#ifndef EXTERN_TYPEDEF_JSTRINGARRAY_T
#define EXTERN_TYPEDEF_JSTRINGARRAY_T
	typedef void* JSTRINGARRAY_T;
#endif /* EXTERN_TYPEDEF_JSTRINGARRAY_T */
#ifndef EXTERN_TYPEDEF_PRINTSTREAM_T
#define EXTERN_TYPEDEF_PRINTSTREAM_T
	typedef void* PRINTSTREAM_T;
#endif /* EXTERN_TYPEDEF_PRINTSTREAM_T */
#ifndef EXTERN_TYPEDEF_NODE_T
#define EXTERN_TYPEDEF_NODE_T
	typedef void* NODE_T;
#endif /* EXTERN_TYPEDEF_NODE_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_GETSTATUS$STATUS_T
#define EXTERN_TYPEDEF_GETSTATUS$STATUS_T
	typedef void* GETSTATUS$STATUS_T;
#endif /* EXTERN_TYPEDEF_GETSTATUS$STATUS_T */
#ifndef EXTERN_TYPEDEF_GETOPERATIONSTATUS$OPERATIONSTATUS_T
#define EXTERN_TYPEDEF_GETOPERATIONSTATUS$OPERATIONSTATUS_T
	typedef void* GETOPERATIONSTATUS$OPERATIONSTATUS_T;
#endif /* EXTERN_TYPEDEF_GETOPERATIONSTATUS$OPERATIONSTATUS_T */
#ifndef EXTERN_TYPEDEF_GETFAULTSTATUS$FAULTSTATUS_T
#define EXTERN_TYPEDEF_GETFAULTSTATUS$FAULTSTATUS_T
	typedef void* GETFAULTSTATUS$FAULTSTATUS_T;
#endif /* EXTERN_TYPEDEF_GETFAULTSTATUS$FAULTSTATUS_T */
#ifndef EXTERN_TYPEDEF_GETACTUALSTATUS$ACTUALSTATUS_T
#define EXTERN_TYPEDEF_GETACTUALSTATUS$ACTUALSTATUS_T
	typedef void* GETACTUALSTATUS$ACTUALSTATUS_T;
#endif /* EXTERN_TYPEDEF_GETACTUALSTATUS$ACTUALSTATUS_T */
#ifndef EXTERN_TYPEDEF_GETACTUALHOMINGSTATUS$ACTUALHOMINGSTATUS_T
#define EXTERN_TYPEDEF_GETACTUALHOMINGSTATUS$ACTUALHOMINGSTATUS_T
	typedef void* GETACTUALHOMINGSTATUS$ACTUALHOMINGSTATUS_T;
#endif /* EXTERN_TYPEDEF_GETACTUALHOMINGSTATUS$ACTUALHOMINGSTATUS_T */
#ifndef EXTERN_TYPEDEF_MPM2000_T
#define EXTERN_TYPEDEF_MPM2000_T
	typedef void* MPM2000_T;
#endif /* EXTERN_TYPEDEF_MPM2000_T */

	// No public default Java constructor; creating one:
	EXPORTED MPM2000_T MPM2000_Create();
	EXPORTED MPM2000_T MPM2000_Create_1(UNIRS232_T serPort);
	EXPORTED int MPM2000_getSerialNumber(MPM2000_T c_mpm2000);
	EXPORTED int MPM2000_getEEPROMVersion(MPM2000_T c_mpm2000);
	EXPORTED void MPM2000_goToIndex(MPM2000_T c_mpm2000, int index);
	EXPORTED int MPM2000_getCurrentIndex(MPM2000_T c_mpm2000);
	EXPORTED void MPM2000_shiftIndex(MPM2000_T c_mpm2000, int shiftBy);
	EXPORTED short MPM2000_is8Channel(MPM2000_T c_mpm2000);
	EXPORTED void MPM2000_printEEPROM(MPM2000_T c_mpm2000, JSTRINGARRAY_T param0, PRINTSTREAM_T param1);
	EXPORTED void MPM2000_setResponseMode(MPM2000_T c_mpm2000, NODE_T param0, int param1);
	EXPORTED void MPM2000_toggleDigitalOutput(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_setVelocity(MPM2000_T c_mpm2000, NODE_T param0, int param1);
	EXPORTED void MPM2000_setSpeed(MPM2000_T c_mpm2000, NODE_T param0, int param1);
	EXPORTED void MPM2000_setOutputError(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_setOutputDigital(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_setHomePosition(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_setDigitalOutput(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_saveToEEPROM(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_runHomingSequence(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_runHallHoming(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_resumeProgram(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_resetNode(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_notifyPositionEnable(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_notifyPositionDisable(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_moveAndWait(MPM2000_T c_mpm2000, NODE_T param0, long long param1);
	EXPORTED void MPM2000_moveAndWait_1(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_move(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_loadRelativePosition(MPM2000_T c_mpm2000, NODE_T param0, int param1);
	EXPORTED void MPM2000_loadAbsolutePosition(MPM2000_T c_mpm2000, NODE_T param0, int param1);
	EXPORTED void MPM2000_getVersion(MPM2000_T c_mpm2000, NODE_T param0, JSTRING_T retval);
	EXPORTED int MPM2000_getVelocity(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED int MPM2000_getTemperature(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED int MPM2000_getTargetPosition(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED int MPM2000_getSpeed(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_getStatus(MPM2000_T c_mpm2000, NODE_T param0, GETSTATUS$STATUS_T retval);
	EXPORTED void MPM2000_getProgramSequence(MPM2000_T c_mpm2000, NODE_T param0, JSTRINGARRAY_T retval);
	EXPORTED int MPM2000_getPositiveLimit(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED int MPM2000_getPosition(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_getOperationStatus(MPM2000_T c_mpm2000, NODE_T param0, GETOPERATIONSTATUS$OPERATIONSTATUS_T retval);
	EXPORTED int MPM2000_getNodeNumber(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED int MPM2000_getNegativeLimit(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED int MPM2000_getMaximumSpeed(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_getFaultStatus(MPM2000_T c_mpm2000, NODE_T param0, GETFAULTSTATUS$FAULTSTATUS_T retval);
	EXPORTED int MPM2000_getCurrentActualVelocity(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_getControllerType(MPM2000_T c_mpm2000, NODE_T param0, JSTRING_T retval);
	EXPORTED void MPM2000_getControllerSerialNumber(MPM2000_T c_mpm2000, NODE_T param0, JSTRING_T retval);
	EXPORTED void MPM2000_getActualStatus(MPM2000_T c_mpm2000, NODE_T param0, GETACTUALSTATUS$ACTUALSTATUS_T retval);
	EXPORTED void MPM2000_getActualHomingStatus(MPM2000_T c_mpm2000, NODE_T param0, GETACTUALHOMINGSTATUS$ACTUALHOMINGSTATUS_T retval);
	EXPORTED void MPM2000_endProgramSequence(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_enableProgram(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_enableDrive(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_disableProgram(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_disableDrive(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_clearDigitalOutput(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_beginProgrammingSequence(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void MPM2000_getSerialPort(MPM2000_T c_mpm2000, UNIRS232_T retval);
	EXPORTED void MPM2000_setSerialPort(MPM2000_T c_mpm2000, UNIRS232_T param0);
	EXPORTED void MPM2000_Destroy(MPM2000_T mpm2000);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED MPM2000_T STDCALL MPM2000_Create_stdcall_1(UNIRS232_T serPort);
	EXPORTED int STDCALL MPM2000_getSerialNumber_stdcall(MPM2000_T c_mpm2000);
	EXPORTED int STDCALL MPM2000_getEEPROMVersion_stdcall(MPM2000_T c_mpm2000);
	EXPORTED void STDCALL MPM2000_goToIndex_stdcall(MPM2000_T c_mpm2000, int index);
	EXPORTED int STDCALL MPM2000_getCurrentIndex_stdcall(MPM2000_T c_mpm2000);
	EXPORTED void STDCALL MPM2000_shiftIndex_stdcall(MPM2000_T c_mpm2000, int shiftBy);
	EXPORTED short STDCALL MPM2000_is8Channel_stdcall(MPM2000_T c_mpm2000);
	EXPORTED void STDCALL MPM2000_printEEPROM_stdcall(MPM2000_T c_mpm2000, JSTRINGARRAY_T param0, PRINTSTREAM_T param1);
	EXPORTED void STDCALL MPM2000_setResponseMode_stdcall(MPM2000_T c_mpm2000, NODE_T param0, int param1);
	EXPORTED void STDCALL MPM2000_toggleDigitalOutput_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_setVelocity_stdcall(MPM2000_T c_mpm2000, NODE_T param0, int param1);
	EXPORTED void STDCALL MPM2000_setSpeed_stdcall(MPM2000_T c_mpm2000, NODE_T param0, int param1);
	EXPORTED void STDCALL MPM2000_setOutputError_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_setOutputDigital_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_setHomePosition_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_setDigitalOutput_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_saveToEEPROM_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_runHomingSequence_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_runHallHoming_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_resumeProgram_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_resetNode_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_notifyPositionEnable_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_notifyPositionDisable_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_moveAndWait_stdcall(MPM2000_T c_mpm2000, NODE_T param0, long long param1);
	EXPORTED void STDCALL MPM2000_moveAndWait_stdcall_1(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_move_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_loadRelativePosition_stdcall(MPM2000_T c_mpm2000, NODE_T param0, int param1);
	EXPORTED void STDCALL MPM2000_loadAbsolutePosition_stdcall(MPM2000_T c_mpm2000, NODE_T param0, int param1);
	EXPORTED void STDCALL MPM2000_getVersion_stdcall(MPM2000_T c_mpm2000, NODE_T param0, JSTRING_T retval);
	EXPORTED int STDCALL MPM2000_getVelocity_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED int STDCALL MPM2000_getTemperature_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED int STDCALL MPM2000_getTargetPosition_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED int STDCALL MPM2000_getSpeed_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_getStatus_stdcall(MPM2000_T c_mpm2000, NODE_T param0, GETSTATUS$STATUS_T retval);
	EXPORTED void STDCALL MPM2000_getProgramSequence_stdcall(MPM2000_T c_mpm2000, NODE_T param0, JSTRINGARRAY_T retval);
	EXPORTED int STDCALL MPM2000_getPositiveLimit_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED int STDCALL MPM2000_getPosition_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_getOperationStatus_stdcall(MPM2000_T c_mpm2000, NODE_T param0, GETOPERATIONSTATUS$OPERATIONSTATUS_T retval);
	EXPORTED int STDCALL MPM2000_getNodeNumber_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED int STDCALL MPM2000_getNegativeLimit_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED int STDCALL MPM2000_getMaximumSpeed_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_getFaultStatus_stdcall(MPM2000_T c_mpm2000, NODE_T param0, GETFAULTSTATUS$FAULTSTATUS_T retval);
	EXPORTED int STDCALL MPM2000_getCurrentActualVelocity_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_getControllerType_stdcall(MPM2000_T c_mpm2000, NODE_T param0, JSTRING_T retval);
	EXPORTED void STDCALL MPM2000_getControllerSerialNumber_stdcall(MPM2000_T c_mpm2000, NODE_T param0, JSTRING_T retval);
	EXPORTED void STDCALL MPM2000_getActualStatus_stdcall(MPM2000_T c_mpm2000, NODE_T param0, GETACTUALSTATUS$ACTUALSTATUS_T retval);
	EXPORTED void STDCALL MPM2000_getActualHomingStatus_stdcall(MPM2000_T c_mpm2000, NODE_T param0, GETACTUALHOMINGSTATUS$ACTUALHOMINGSTATUS_T retval);
	EXPORTED void STDCALL MPM2000_endProgramSequence_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_enableProgram_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_enableDrive_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_disableProgram_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_disableDrive_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_clearDigitalOutput_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_beginProgrammingSequence_stdcall(MPM2000_T c_mpm2000, NODE_T param0);
	EXPORTED void STDCALL MPM2000_getSerialPort_stdcall(MPM2000_T c_mpm2000, UNIRS232_T retval);
	EXPORTED void STDCALL MPM2000_setSerialPort_stdcall(MPM2000_T c_mpm2000, UNIRS232_T param0);
	EXPORTED void STDCALL MPM2000_Destroy_stdcall(MPM2000_T mpm2000);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* MPM2000_H */
