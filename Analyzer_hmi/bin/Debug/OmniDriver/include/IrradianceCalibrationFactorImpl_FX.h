/**
 * File: IrradianceCalibrationFactorImpl_FX.h
 * Autogenerated on Fri Mar 23 13:38:37 EDT 2018 based on
 * IrradianceCalibrationFactorImpl_FX.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/irradiancecalibrationfactor/IrradianceCalibrationFactorImpl_FX
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef IRRADIANCECALIBRATIONFACTORIMPL_FX_H
#define IRRADIANCECALIBRATIONFACTORIMPL_FX_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "IrradianceCalibrationFactorImpl.h"
#include "OceanBinaryProtocolProvider.h"
#include "USBInterface.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class IrradianceCalibrationFactorImpl;
class OceanBinaryProtocolProvider;
class USBInterface;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED IrradianceCalibrationFactorImpl_FX : public IrradianceCalibrationFactorImpl // CPPClass.tag001
{
public: 
	IrradianceCalibrationFactorImpl_FX(OceanBinaryProtocolProvider& blaze, USBInterface& usb, int pixelCount);
	DoubleArray getIrradianceCalibrationFactors();
	void setIrradianceCalibrationFactors(DoubleArray& data);
	double getCollectionArea();
	void setCollectionArea(double area);
	short hasCollectionArea();
	~IrradianceCalibrationFactorImpl_FX();
	// No public default Java constructor; creating one:
	IrradianceCalibrationFactorImpl_FX();
	// No public Java copy constructor; creating one:
	IrradianceCalibrationFactorImpl_FX(const IrradianceCalibrationFactorImpl_FX &that);
	// Creating assignment operator declaration:
	IrradianceCalibrationFactorImpl_FX &operator=(const IrradianceCalibrationFactorImpl_FX &that);

private:
	jmethodID mid_IrradianceCalibrationFactorImpl_FX1622;
	jmethodID mid_getIrradianceCalibrationFactors1623;
	jmethodID mid_setIrradianceCalibrationFactors1624;
	jmethodID mid_getCollectionArea1625;
	jmethodID mid_setCollectionArea1626;
	jmethodID mid_hasCollectionArea1627;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTORIMPL_T
#define EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTORIMPL_T
	typedef void* IRRADIANCECALIBRATIONFACTORIMPL_T;
#endif /* EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTORIMPL_T */
#ifndef EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T
#define EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T
	typedef void* OCEANBINARYPROTOCOLPROVIDER_T;
#endif /* EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTORIMPL_FX_T
#define EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTORIMPL_FX_T
	typedef void* IRRADIANCECALIBRATIONFACTORIMPL_FX_T;
#endif /* EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTORIMPL_FX_T */

	// No public default Java constructor; creating one:
	EXPORTED IRRADIANCECALIBRATIONFACTORIMPL_FX_T IrradianceCalibrationFactorImpl_FX_Create();
	EXPORTED IRRADIANCECALIBRATIONFACTORIMPL_FX_T IrradianceCalibrationFactorImpl_FX_Create_1(OCEANBINARYPROTOCOLPROVIDER_T blaze, USBINTERFACE_T usb, int pixelCount);
	EXPORTED void IrradianceCalibrationFactorImpl_FX_getIrradianceCalibrationFactors(IRRADIANCECALIBRATIONFACTORIMPL_FX_T c_irradiance_calibration_factor_impl_f_x, DOUBLEARRAY_T retval);
	EXPORTED void IrradianceCalibrationFactorImpl_FX_setIrradianceCalibrationFactors(IRRADIANCECALIBRATIONFACTORIMPL_FX_T c_irradiance_calibration_factor_impl_f_x, DOUBLEARRAY_T data);
	EXPORTED double IrradianceCalibrationFactorImpl_FX_getCollectionArea(IRRADIANCECALIBRATIONFACTORIMPL_FX_T c_irradiance_calibration_factor_impl_f_x);
	EXPORTED void IrradianceCalibrationFactorImpl_FX_setCollectionArea(IRRADIANCECALIBRATIONFACTORIMPL_FX_T c_irradiance_calibration_factor_impl_f_x, double area);
	EXPORTED short IrradianceCalibrationFactorImpl_FX_hasCollectionArea(IRRADIANCECALIBRATIONFACTORIMPL_FX_T c_irradiance_calibration_factor_impl_f_x);
	EXPORTED void IrradianceCalibrationFactorImpl_FX_Destroy(IRRADIANCECALIBRATIONFACTORIMPL_FX_T irradiance_calibration_factor_impl_f_x);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED IRRADIANCECALIBRATIONFACTORIMPL_FX_T STDCALL IrradianceCalibrationFactorImpl_FX_Create_stdcall_1(OCEANBINARYPROTOCOLPROVIDER_T blaze, USBINTERFACE_T usb, int pixelCount);
	EXPORTED void STDCALL IrradianceCalibrationFactorImpl_FX_getIrradianceCalibrationFactors_stdcall(IRRADIANCECALIBRATIONFACTORIMPL_FX_T c_irradiance_calibration_factor_impl_f_x, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL IrradianceCalibrationFactorImpl_FX_setIrradianceCalibrationFactors_stdcall(IRRADIANCECALIBRATIONFACTORIMPL_FX_T c_irradiance_calibration_factor_impl_f_x, DOUBLEARRAY_T data);
	EXPORTED double STDCALL IrradianceCalibrationFactorImpl_FX_getCollectionArea_stdcall(IRRADIANCECALIBRATIONFACTORIMPL_FX_T c_irradiance_calibration_factor_impl_f_x);
	EXPORTED void STDCALL IrradianceCalibrationFactorImpl_FX_setCollectionArea_stdcall(IRRADIANCECALIBRATIONFACTORIMPL_FX_T c_irradiance_calibration_factor_impl_f_x, double area);
	EXPORTED short STDCALL IrradianceCalibrationFactorImpl_FX_hasCollectionArea_stdcall(IRRADIANCECALIBRATIONFACTORIMPL_FX_T c_irradiance_calibration_factor_impl_f_x);
	EXPORTED void STDCALL IrradianceCalibrationFactorImpl_FX_Destroy_stdcall(IRRADIANCECALIBRATIONFACTORIMPL_FX_T irradiance_calibration_factor_impl_f_x);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* IRRADIANCECALIBRATIONFACTORIMPL_FX_H */
