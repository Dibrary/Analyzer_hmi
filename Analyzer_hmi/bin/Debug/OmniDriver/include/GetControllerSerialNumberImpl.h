/**
 * File: GetControllerSerialNumberImpl.h
 * Autogenerated on Fri Mar 23 13:38:22 EDT 2018 based on
 * GetControllerSerialNumberImpl.java
 * for the Java class
 * com/oceanoptics/omnidriver/accessories/mikropack/commands/getcontrollerserialnumber/GetControllerSerialNumberImpl
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef GETCONTROLLERSERIALNUMBERIMPL_H
#define GETCONTROLLERSERIALNUMBERIMPL_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "FaulhaberCommandStringResponse.h"
#include "UniRS232.h"
#include "Node.h"
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class FaulhaberCommandStringResponse;
class UniRS232;
class Node;
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED GetControllerSerialNumberImpl : public FaulhaberCommandStringResponse // CPPClass.tag001
{
public: 
	GetControllerSerialNumberImpl(UniRS232& serPort);
	JString getControllerSerialNumber(Node& node);
	~GetControllerSerialNumberImpl();
	// No public default Java constructor; creating one:
	GetControllerSerialNumberImpl();
	// No public Java copy constructor; creating one:
	GetControllerSerialNumberImpl(const GetControllerSerialNumberImpl &that);
	// Creating assignment operator declaration:
	GetControllerSerialNumberImpl &operator=(const GetControllerSerialNumberImpl &that);

private:
	jmethodID mid_GetControllerSerialNumberImpl65;
	jmethodID mid_getControllerSerialNumber66;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_FAULHABERCOMMANDSTRINGRESPONSE_T
#define EXTERN_TYPEDEF_FAULHABERCOMMANDSTRINGRESPONSE_T
	typedef void* FAULHABERCOMMANDSTRINGRESPONSE_T;
#endif /* EXTERN_TYPEDEF_FAULHABERCOMMANDSTRINGRESPONSE_T */
#ifndef EXTERN_TYPEDEF_UNIRS232_T
#define EXTERN_TYPEDEF_UNIRS232_T
	typedef void* UNIRS232_T;
#endif /* EXTERN_TYPEDEF_UNIRS232_T */
#ifndef EXTERN_TYPEDEF_NODE_T
#define EXTERN_TYPEDEF_NODE_T
	typedef void* NODE_T;
#endif /* EXTERN_TYPEDEF_NODE_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_GETCONTROLLERSERIALNUMBERIMPL_T
#define EXTERN_TYPEDEF_GETCONTROLLERSERIALNUMBERIMPL_T
	typedef void* GETCONTROLLERSERIALNUMBERIMPL_T;
#endif /* EXTERN_TYPEDEF_GETCONTROLLERSERIALNUMBERIMPL_T */

	// No public default Java constructor; creating one:
	EXPORTED GETCONTROLLERSERIALNUMBERIMPL_T GetControllerSerialNumberImpl_Create();
	EXPORTED GETCONTROLLERSERIALNUMBERIMPL_T GetControllerSerialNumberImpl_Create_1(UNIRS232_T serPort);
	EXPORTED void GetControllerSerialNumberImpl_getControllerSerialNumber(GETCONTROLLERSERIALNUMBERIMPL_T c_get_controller_serial_number_impl, NODE_T node, JSTRING_T retval);
	EXPORTED void GetControllerSerialNumberImpl_Destroy(GETCONTROLLERSERIALNUMBERIMPL_T get_controller_serial_number_impl);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED GETCONTROLLERSERIALNUMBERIMPL_T STDCALL GetControllerSerialNumberImpl_Create_stdcall_1(UNIRS232_T serPort);
	EXPORTED void STDCALL GetControllerSerialNumberImpl_getControllerSerialNumber_stdcall(GETCONTROLLERSERIALNUMBERIMPL_T c_get_controller_serial_number_impl, NODE_T node, JSTRING_T retval);
	EXPORTED void STDCALL GetControllerSerialNumberImpl_Destroy_stdcall(GETCONTROLLERSERIALNUMBERIMPL_T get_controller_serial_number_impl);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* GETCONTROLLERSERIALNUMBERIMPL_H */
