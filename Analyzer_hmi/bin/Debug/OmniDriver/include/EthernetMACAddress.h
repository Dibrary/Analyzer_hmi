/**
 * File: EthernetMACAddress.h
 * Autogenerated on Fri Mar 23 13:38:46 EDT 2018 based on
 * EthernetMACAddress.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/EthernetMACAddress
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef ETHERNETMACADDRESS_H
#define ETHERNETMACADDRESS_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED EthernetMACAddress : public BaseJavaClass // CPPClass.tag001
{
public: 
	EthernetMACAddress(CharArray& address);
	void setInterface(int iface);
	int getInterface();
	void setMACAddress(CharArray& address);
	CharArray getMACAddress();
	JString toString();
	~EthernetMACAddress();
	// No public default Java constructor; creating one:
	EthernetMACAddress();
	// No public Java copy constructor; creating one:
	EthernetMACAddress(const EthernetMACAddress &that);
	// Creating assignment operator declaration:
	EthernetMACAddress &operator=(const EthernetMACAddress &that);

private:
	jmethodID mid_EthernetMACAddress2901;
	jmethodID mid_setInterface2902;
	jmethodID mid_getInterface2903;
	jmethodID mid_setMACAddress2904;
	jmethodID mid_getMACAddress2905;
	jmethodID mid_toString2906;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_ETHERNETMACADDRESS_T
#define EXTERN_TYPEDEF_ETHERNETMACADDRESS_T
	typedef void* ETHERNETMACADDRESS_T;
#endif /* EXTERN_TYPEDEF_ETHERNETMACADDRESS_T */

	// No public default Java constructor; creating one:
	EXPORTED ETHERNETMACADDRESS_T EthernetMACAddress_Create();
	EXPORTED ETHERNETMACADDRESS_T EthernetMACAddress_Create_1(CHARARRAY_T address);
	EXPORTED void EthernetMACAddress_setInterface(ETHERNETMACADDRESS_T c_ethernet_m_a_c_address, int iface);
	EXPORTED int EthernetMACAddress_getInterface(ETHERNETMACADDRESS_T c_ethernet_m_a_c_address);
	EXPORTED void EthernetMACAddress_setMACAddress(ETHERNETMACADDRESS_T c_ethernet_m_a_c_address, CHARARRAY_T address);
	EXPORTED void EthernetMACAddress_getMACAddress(ETHERNETMACADDRESS_T c_ethernet_m_a_c_address, CHARARRAY_T retval);
	EXPORTED void EthernetMACAddress_toString(ETHERNETMACADDRESS_T c_ethernet_m_a_c_address, JSTRING_T retval);
	EXPORTED void EthernetMACAddress_Destroy(ETHERNETMACADDRESS_T ethernet_m_a_c_address);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED ETHERNETMACADDRESS_T STDCALL EthernetMACAddress_Create_stdcall_1(CHARARRAY_T address);
	EXPORTED void STDCALL EthernetMACAddress_setInterface_stdcall(ETHERNETMACADDRESS_T c_ethernet_m_a_c_address, int iface);
	EXPORTED int STDCALL EthernetMACAddress_getInterface_stdcall(ETHERNETMACADDRESS_T c_ethernet_m_a_c_address);
	EXPORTED void STDCALL EthernetMACAddress_setMACAddress_stdcall(ETHERNETMACADDRESS_T c_ethernet_m_a_c_address, CHARARRAY_T address);
	EXPORTED void STDCALL EthernetMACAddress_getMACAddress_stdcall(ETHERNETMACADDRESS_T c_ethernet_m_a_c_address, CHARARRAY_T retval);
	EXPORTED void STDCALL EthernetMACAddress_toString_stdcall(ETHERNETMACADDRESS_T c_ethernet_m_a_c_address, JSTRING_T retval);
	EXPORTED void STDCALL EthernetMACAddress_Destroy_stdcall(ETHERNETMACADDRESS_T ethernet_m_a_c_address);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* ETHERNETMACADDRESS_H */
