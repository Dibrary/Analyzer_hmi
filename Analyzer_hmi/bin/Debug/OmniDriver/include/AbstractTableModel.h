/**
 * File: AbstractTableModel.h
 * Autogenerated on Mon Aug 04 16:04:22 EDT 2008 based on
 * AbstractTableModel.java
 * for the Java class
 * javax/swing/table/AbstractTableModel
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef ABSTRACTTABLEMODEL_H
#define ABSTRACTTABLEMODEL_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "JString.h"
#include "TableModelEvent.h"
#include "TableModelListenerArray.h"
#include "TableModelListener.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class JString;
class TableModelEvent;
class TableModelListenerArray;
class TableModelListener;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED AbstractTableModel : public BaseJavaClass // CPPClass.getClassDeclaration
{
public: 
	AbstractTableModel();
	void fireTableDataChanged();
	void fireTableStructureChanged();
	void fireTableCellUpdated(int param0, int param1);
	void fireTableRowsDeleted(int param0, int param1);
	void fireTableRowsInserted(int param0, int param1);
	void fireTableRowsUpdated(int param0, int param1);
	unsigned char isCellEditable(int param0, int param1);
	JString getColumnName(int param0);
	int findColumn(JString& param0);
	void fireTableChanged(TableModelEvent& param0);
	TableModelListenerArray getTableModelListeners();
	void addTableModelListener(TableModelListener& param0);
	void removeTableModelListener(TableModelListener& param0);
	~AbstractTableModel();
	// No public Java copy constructor; creating one:
	AbstractTableModel(const AbstractTableModel &that);
	// Creating assignment operator declaration:
	AbstractTableModel &operator=(const AbstractTableModel &that);

private:
	jmethodID mid_AbstractTableModel151;
	jmethodID mid_fireTableDataChanged152;
	jmethodID mid_fireTableStructureChanged153;
	jmethodID mid_fireTableCellUpdated154;
	jmethodID mid_fireTableRowsDeleted155;
	jmethodID mid_fireTableRowsInserted156;
	jmethodID mid_fireTableRowsUpdated157;
	jmethodID mid_isCellEditable158;
	jmethodID mid_getColumnName159;
	jmethodID mid_findColumn160;
	jmethodID mid_fireTableChanged161;
	jmethodID mid_getTableModelListeners162;
	jmethodID mid_addTableModelListener163;
	jmethodID mid_removeTableModelListener164;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_TABLEMODELEVENT_T
#define EXTERN_TYPEDEF_TABLEMODELEVENT_T
	typedef void* TABLEMODELEVENT_T;
#endif /* EXTERN_TYPEDEF_TABLEMODELEVENT_T */
#ifndef EXTERN_TYPEDEF_TABLEMODELLISTENERARRAY_T
#define EXTERN_TYPEDEF_TABLEMODELLISTENERARRAY_T
	typedef void* TABLEMODELLISTENERARRAY_T;
#endif /* EXTERN_TYPEDEF_TABLEMODELLISTENERARRAY_T */
#ifndef EXTERN_TYPEDEF_TABLEMODELLISTENER_T
#define EXTERN_TYPEDEF_TABLEMODELLISTENER_T
	typedef void* TABLEMODELLISTENER_T;
#endif /* EXTERN_TYPEDEF_TABLEMODELLISTENER_T */
#ifndef EXTERN_TYPEDEF_ABSTRACTTABLEMODEL_T
#define EXTERN_TYPEDEF_ABSTRACTTABLEMODEL_T
	typedef void* ABSTRACTTABLEMODEL_T;
#endif /* EXTERN_TYPEDEF_ABSTRACTTABLEMODEL_T */

	EXPORTED ABSTRACTTABLEMODEL_T AbstractTableModel_Create();
	EXPORTED void AbstractTableModel_fireTableDataChanged(ABSTRACTTABLEMODEL_T c_abstract_table_model);
	EXPORTED void AbstractTableModel_fireTableStructureChanged(ABSTRACTTABLEMODEL_T c_abstract_table_model);
	EXPORTED void AbstractTableModel_fireTableCellUpdated(ABSTRACTTABLEMODEL_T c_abstract_table_model, int param0, int param1);
	EXPORTED void AbstractTableModel_fireTableRowsDeleted(ABSTRACTTABLEMODEL_T c_abstract_table_model, int param0, int param1);
	EXPORTED void AbstractTableModel_fireTableRowsInserted(ABSTRACTTABLEMODEL_T c_abstract_table_model, int param0, int param1);
	EXPORTED void AbstractTableModel_fireTableRowsUpdated(ABSTRACTTABLEMODEL_T c_abstract_table_model, int param0, int param1);
	EXPORTED unsigned char AbstractTableModel_isCellEditable(ABSTRACTTABLEMODEL_T c_abstract_table_model, int param0, int param1);
	EXPORTED void AbstractTableModel_getColumnName(ABSTRACTTABLEMODEL_T c_abstract_table_model, int param0, JSTRING_T retval);
	EXPORTED int AbstractTableModel_findColumn(ABSTRACTTABLEMODEL_T c_abstract_table_model, JSTRING_T param0);
	EXPORTED void AbstractTableModel_fireTableChanged(ABSTRACTTABLEMODEL_T c_abstract_table_model, TABLEMODELEVENT_T param0);
	EXPORTED void AbstractTableModel_getTableModelListeners(ABSTRACTTABLEMODEL_T c_abstract_table_model, TABLEMODELLISTENERARRAY_T retval);
	EXPORTED void AbstractTableModel_addTableModelListener(ABSTRACTTABLEMODEL_T c_abstract_table_model, TABLEMODELLISTENER_T param0);
	EXPORTED void AbstractTableModel_removeTableModelListener(ABSTRACTTABLEMODEL_T c_abstract_table_model, TABLEMODELLISTENER_T param0);
	EXPORTED void AbstractTableModel_Destroy(ABSTRACTTABLEMODEL_T abstract_table_model);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED ABSTRACTTABLEMODEL_T STDCALL AbstractTableModel_Create_stdcall();
	EXPORTED void STDCALL AbstractTableModel_fireTableDataChanged_stdcall(ABSTRACTTABLEMODEL_T c_abstract_table_model);
	EXPORTED void STDCALL AbstractTableModel_fireTableStructureChanged_stdcall(ABSTRACTTABLEMODEL_T c_abstract_table_model);
	EXPORTED void STDCALL AbstractTableModel_fireTableCellUpdated_stdcall(ABSTRACTTABLEMODEL_T c_abstract_table_model, int param0, int param1);
	EXPORTED void STDCALL AbstractTableModel_fireTableRowsDeleted_stdcall(ABSTRACTTABLEMODEL_T c_abstract_table_model, int param0, int param1);
	EXPORTED void STDCALL AbstractTableModel_fireTableRowsInserted_stdcall(ABSTRACTTABLEMODEL_T c_abstract_table_model, int param0, int param1);
	EXPORTED void STDCALL AbstractTableModel_fireTableRowsUpdated_stdcall(ABSTRACTTABLEMODEL_T c_abstract_table_model, int param0, int param1);
	EXPORTED unsigned char STDCALL AbstractTableModel_isCellEditable_stdcall(ABSTRACTTABLEMODEL_T c_abstract_table_model, int param0, int param1);
	EXPORTED void STDCALL AbstractTableModel_getColumnName_stdcall(ABSTRACTTABLEMODEL_T c_abstract_table_model, int param0, JSTRING_T retval);
	EXPORTED int STDCALL AbstractTableModel_findColumn_stdcall(ABSTRACTTABLEMODEL_T c_abstract_table_model, JSTRING_T param0);
	EXPORTED void STDCALL AbstractTableModel_fireTableChanged_stdcall(ABSTRACTTABLEMODEL_T c_abstract_table_model, TABLEMODELEVENT_T param0);
	EXPORTED void STDCALL AbstractTableModel_getTableModelListeners_stdcall(ABSTRACTTABLEMODEL_T c_abstract_table_model, TABLEMODELLISTENERARRAY_T retval);
	EXPORTED void STDCALL AbstractTableModel_addTableModelListener_stdcall(ABSTRACTTABLEMODEL_T c_abstract_table_model, TABLEMODELLISTENER_T param0);
	EXPORTED void STDCALL AbstractTableModel_removeTableModelListener_stdcall(ABSTRACTTABLEMODEL_T c_abstract_table_model, TABLEMODELLISTENER_T param0);
	EXPORTED void STDCALL AbstractTableModel_Destroy_stdcall(ABSTRACTTABLEMODEL_T abstract_table_model);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* ABSTRACTTABLEMODEL_H */
