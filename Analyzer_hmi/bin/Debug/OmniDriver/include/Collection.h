/**
 * File: Collection.h
 * Autogenerated on Mon Aug 04 16:04:22 EDT 2008 based on
 * Collection.java
 * for the Java class
 * java/util/Collection
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef COLLECTION_H
#define COLLECTION_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "Iterator.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class Collection;
class Iterator;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED Collection : public BaseJavaClass // CPPClass.getClassDeclaration
{
public: 
	int hashCode();
	int size();
	void clear();
	unsigned char isEmpty();
	unsigned char addAll(Collection& param0);
	unsigned char containsAll(Collection& param0);
	unsigned char removeAll(Collection& param0);
	unsigned char retainAll(Collection& param0);
	Iterator iterator();
	~Collection();
	// No public default Java constructor; creating one:
	Collection();
	// No public Java copy constructor; creating one:
	Collection(const Collection &that);
	// Creating assignment operator declaration:
	Collection &operator=(const Collection &that);

private:
	jmethodID mid_hashCode53;
	jmethodID mid_size54;
	jmethodID mid_clear55;
	jmethodID mid_isEmpty56;
	jmethodID mid_addAll57;
	jmethodID mid_containsAll58;
	jmethodID mid_removeAll59;
	jmethodID mid_retainAll60;
	jmethodID mid_iterator61;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_COLLECTION_T
#define EXTERN_TYPEDEF_COLLECTION_T
	typedef void* COLLECTION_T;
#endif /* EXTERN_TYPEDEF_COLLECTION_T */
#ifndef EXTERN_TYPEDEF_ITERATOR_T
#define EXTERN_TYPEDEF_ITERATOR_T
	typedef void* ITERATOR_T;
#endif /* EXTERN_TYPEDEF_ITERATOR_T */

	// No public default Java constructor; creating one:
	EXPORTED COLLECTION_T Collection_Create();
	EXPORTED int Collection_hashCode(COLLECTION_T c_collection);
	EXPORTED int Collection_size(COLLECTION_T c_collection);
	EXPORTED void Collection_clear(COLLECTION_T c_collection);
	EXPORTED unsigned char Collection_isEmpty(COLLECTION_T c_collection);
	EXPORTED unsigned char Collection_addAll(COLLECTION_T c_collection, COLLECTION_T param0);
	EXPORTED unsigned char Collection_containsAll(COLLECTION_T c_collection, COLLECTION_T param0);
	EXPORTED unsigned char Collection_removeAll(COLLECTION_T c_collection, COLLECTION_T param0);
	EXPORTED unsigned char Collection_retainAll(COLLECTION_T c_collection, COLLECTION_T param0);
	EXPORTED void Collection_iterator(COLLECTION_T c_collection, ITERATOR_T retval);
	EXPORTED void Collection_Destroy(COLLECTION_T collection);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED int STDCALL Collection_hashCode_stdcall(COLLECTION_T c_collection);
	EXPORTED int STDCALL Collection_size_stdcall(COLLECTION_T c_collection);
	EXPORTED void STDCALL Collection_clear_stdcall(COLLECTION_T c_collection);
	EXPORTED unsigned char STDCALL Collection_isEmpty_stdcall(COLLECTION_T c_collection);
	EXPORTED unsigned char STDCALL Collection_addAll_stdcall(COLLECTION_T c_collection, COLLECTION_T param0);
	EXPORTED unsigned char STDCALL Collection_containsAll_stdcall(COLLECTION_T c_collection, COLLECTION_T param0);
	EXPORTED unsigned char STDCALL Collection_removeAll_stdcall(COLLECTION_T c_collection, COLLECTION_T param0);
	EXPORTED unsigned char STDCALL Collection_retainAll_stdcall(COLLECTION_T c_collection, COLLECTION_T param0);
	EXPORTED void STDCALL Collection_iterator_stdcall(COLLECTION_T c_collection, ITERATOR_T retval);
	EXPORTED void STDCALL Collection_Destroy_stdcall(COLLECTION_T collection);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* COLLECTION_H */
