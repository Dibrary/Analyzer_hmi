/**
 * File: NonlinearityCorrectionProvider.h
 * Autogenerated on Fri Mar 23 13:38:39 EDT 2018 based on
 * NonlinearityCorrectionProvider.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/nonlinearitycorrection/NonlinearityCorrectionProvider
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef NONLINEARITYCORRECTIONPROVIDER_H
#define NONLINEARITYCORRECTIONPROVIDER_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "CoefficientsArray.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class CoefficientsArray;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED NonlinearityCorrectionProvider : public BaseJavaClass // CPPClass.tag001
{
public: 
	void writeNonlinearityCoefficientsToSpectrometer(CoefficientsArray& param0);
	CoefficientsArray readNonlinearityCoefficientsFromSpectrometer();
	void setNonlinearityCoefficients(CoefficientsArray& param0);
	CoefficientsArray getNonlinearityCoefficients();
	DoubleArray getNonlinearityCoefficientsSingleChannel(int param0);
	void setNonlinearityCoefficientsSingleChannel(DoubleArray& param0, int param1);
	~NonlinearityCorrectionProvider();
	// No public default Java constructor; creating one:
	NonlinearityCorrectionProvider();
	// No public Java copy constructor; creating one:
	NonlinearityCorrectionProvider(const NonlinearityCorrectionProvider &that);
	// Creating assignment operator declaration:
	NonlinearityCorrectionProvider &operator=(const NonlinearityCorrectionProvider &that);

private:
	jmethodID mid_writeNonlinearityCoefficientsToSpectrometer1891;
	jmethodID mid_readNonlinearityCoefficientsFromSpectrometer1892;
	jmethodID mid_setNonlinearityCoefficients1893;
	jmethodID mid_getNonlinearityCoefficients1894;
	jmethodID mid_getNonlinearityCoefficientsSingleChannel1895;
	jmethodID mid_setNonlinearityCoefficientsSingleChannel1896;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
#define EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
	typedef void* COEFFICIENTSARRAY_T;
#endif /* EXTERN_TYPEDEF_COEFFICIENTSARRAY_T */
#ifndef EXTERN_TYPEDEF_NONLINEARITYCORRECTIONPROVIDER_T
#define EXTERN_TYPEDEF_NONLINEARITYCORRECTIONPROVIDER_T
	typedef void* NONLINEARITYCORRECTIONPROVIDER_T;
#endif /* EXTERN_TYPEDEF_NONLINEARITYCORRECTIONPROVIDER_T */

	// No public default Java constructor; creating one:
	EXPORTED NONLINEARITYCORRECTIONPROVIDER_T NonlinearityCorrectionProvider_Create();
	EXPORTED void NonlinearityCorrectionProvider_writeNonlinearityCoefficientsToSpectrometer(NONLINEARITYCORRECTIONPROVIDER_T c_nonlinearity_correction_provider, COEFFICIENTSARRAY_T param0);
	EXPORTED void NonlinearityCorrectionProvider_readNonlinearityCoefficientsFromSpectrometer(NONLINEARITYCORRECTIONPROVIDER_T c_nonlinearity_correction_provider, COEFFICIENTSARRAY_T retval);
	EXPORTED void NonlinearityCorrectionProvider_setNonlinearityCoefficients(NONLINEARITYCORRECTIONPROVIDER_T c_nonlinearity_correction_provider, COEFFICIENTSARRAY_T param0);
	EXPORTED void NonlinearityCorrectionProvider_getNonlinearityCoefficients(NONLINEARITYCORRECTIONPROVIDER_T c_nonlinearity_correction_provider, COEFFICIENTSARRAY_T retval);
	EXPORTED void NonlinearityCorrectionProvider_getNonlinearityCoefficientsSingleChannel(NONLINEARITYCORRECTIONPROVIDER_T c_nonlinearity_correction_provider, int param0, DOUBLEARRAY_T retval);
	EXPORTED void NonlinearityCorrectionProvider_setNonlinearityCoefficientsSingleChannel(NONLINEARITYCORRECTIONPROVIDER_T c_nonlinearity_correction_provider, DOUBLEARRAY_T param0, int param1);
	EXPORTED void NonlinearityCorrectionProvider_Destroy(NONLINEARITYCORRECTIONPROVIDER_T nonlinearity_correction_provider);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED void STDCALL NonlinearityCorrectionProvider_writeNonlinearityCoefficientsToSpectrometer_stdcall(NONLINEARITYCORRECTIONPROVIDER_T c_nonlinearity_correction_provider, COEFFICIENTSARRAY_T param0);
	EXPORTED void STDCALL NonlinearityCorrectionProvider_readNonlinearityCoefficientsFromSpectrometer_stdcall(NONLINEARITYCORRECTIONPROVIDER_T c_nonlinearity_correction_provider, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL NonlinearityCorrectionProvider_setNonlinearityCoefficients_stdcall(NONLINEARITYCORRECTIONPROVIDER_T c_nonlinearity_correction_provider, COEFFICIENTSARRAY_T param0);
	EXPORTED void STDCALL NonlinearityCorrectionProvider_getNonlinearityCoefficients_stdcall(NONLINEARITYCORRECTIONPROVIDER_T c_nonlinearity_correction_provider, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL NonlinearityCorrectionProvider_getNonlinearityCoefficientsSingleChannel_stdcall(NONLINEARITYCORRECTIONPROVIDER_T c_nonlinearity_correction_provider, int param0, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL NonlinearityCorrectionProvider_setNonlinearityCoefficientsSingleChannel_stdcall(NONLINEARITYCORRECTIONPROVIDER_T c_nonlinearity_correction_provider, DOUBLEARRAY_T param0, int param1);
	EXPORTED void STDCALL NonlinearityCorrectionProvider_Destroy_stdcall(NONLINEARITYCORRECTIONPROVIDER_T nonlinearity_correction_provider);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* NONLINEARITYCORRECTIONPROVIDER_H */
