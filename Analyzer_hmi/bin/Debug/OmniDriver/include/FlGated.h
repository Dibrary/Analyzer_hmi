/**
 * File: FlGated.h
 * Autogenerated on Fri Mar 23 13:38:34 EDT 2018 based on
 * FlGated.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/flgated/FlGated
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef FLGATED_H
#define FLGATED_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "GateDelayListener.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class GateDelayListener;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED FlGated : public BaseJavaClass // CPPClass.tag001
{
public: 
	int getGateIncrement();
	int getGateMaximum();
	int getGateMinimum();
	void setGateFrequency(int param0);
	int getGateFrequency();
	void addGateDelayListener(GateDelayListener& param0);
	void removeGateDelayListener(GateDelayListener& param0);
	~FlGated();
	// No public default Java constructor; creating one:
	FlGated();
	// No public Java copy constructor; creating one:
	FlGated(const FlGated &that);
	// Creating assignment operator declaration:
	FlGated &operator=(const FlGated &that);

private:
	jmethodID mid_getGateIncrement1250;
	jmethodID mid_getGateMaximum1251;
	jmethodID mid_getGateMinimum1252;
	jmethodID mid_setGateFrequency1253;
	jmethodID mid_getGateFrequency1254;
	jmethodID mid_addGateDelayListener1255;
	jmethodID mid_removeGateDelayListener1256;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_GATEDELAYLISTENER_T
#define EXTERN_TYPEDEF_GATEDELAYLISTENER_T
	typedef void* GATEDELAYLISTENER_T;
#endif /* EXTERN_TYPEDEF_GATEDELAYLISTENER_T */
#ifndef EXTERN_TYPEDEF_FLGATED_T
#define EXTERN_TYPEDEF_FLGATED_T
	typedef void* FLGATED_T;
#endif /* EXTERN_TYPEDEF_FLGATED_T */

	// No public default Java constructor; creating one:
	EXPORTED FLGATED_T FlGated_Create();
	EXPORTED int FlGated_getGateIncrement(FLGATED_T c_fl_gated);
	EXPORTED int FlGated_getGateMaximum(FLGATED_T c_fl_gated);
	EXPORTED int FlGated_getGateMinimum(FLGATED_T c_fl_gated);
	EXPORTED void FlGated_setGateFrequency(FLGATED_T c_fl_gated, int param0);
	EXPORTED int FlGated_getGateFrequency(FLGATED_T c_fl_gated);
	EXPORTED void FlGated_addGateDelayListener(FLGATED_T c_fl_gated, GATEDELAYLISTENER_T param0);
	EXPORTED void FlGated_removeGateDelayListener(FLGATED_T c_fl_gated, GATEDELAYLISTENER_T param0);
	EXPORTED void FlGated_Destroy(FLGATED_T fl_gated);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED int STDCALL FlGated_getGateIncrement_stdcall(FLGATED_T c_fl_gated);
	EXPORTED int STDCALL FlGated_getGateMaximum_stdcall(FLGATED_T c_fl_gated);
	EXPORTED int STDCALL FlGated_getGateMinimum_stdcall(FLGATED_T c_fl_gated);
	EXPORTED void STDCALL FlGated_setGateFrequency_stdcall(FLGATED_T c_fl_gated, int param0);
	EXPORTED int STDCALL FlGated_getGateFrequency_stdcall(FLGATED_T c_fl_gated);
	EXPORTED void STDCALL FlGated_addGateDelayListener_stdcall(FLGATED_T c_fl_gated, GATEDELAYLISTENER_T param0);
	EXPORTED void STDCALL FlGated_removeGateDelayListener_stdcall(FLGATED_T c_fl_gated, GATEDELAYLISTENER_T param0);
	EXPORTED void STDCALL FlGated_Destroy_stdcall(FLGATED_T fl_gated);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* FLGATED_H */
