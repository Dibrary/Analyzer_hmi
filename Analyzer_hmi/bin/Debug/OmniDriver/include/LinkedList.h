/**
 * File: LinkedList.h
 * Autogenerated on Mon Aug 04 16:04:22 EDT 2008 based on
 * LinkedList.java
 * for the Java class
 * java/util/LinkedList
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef LINKEDLIST_H
#define LINKEDLIST_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "AbstractSequentialList.h"
#include "Collection.h"
#include "ListIterator.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class AbstractSequentialList;
class Collection;
class ListIterator;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED LinkedList : public AbstractSequentialList // CPPClass.getClassDeclaration
{
public: 
	int size();
	LinkedList();
	void clear();
	unsigned char addAll(int param0, Collection& param1);
	LinkedList(Collection& param0);
	unsigned char addAll(Collection& param0);
	ListIterator listIterator(int param0);
	~LinkedList();
	// No public Java copy constructor; creating one:
	LinkedList(const LinkedList &that);
	// Creating assignment operator declaration:
	LinkedList &operator=(const LinkedList &that);

private:
	jmethodID mid_size94;
	jmethodID mid_LinkedList95;
	jmethodID mid_clear96;
	jmethodID mid_addAll97;
	jmethodID mid_LinkedList98;
	jmethodID mid_addAll99;
	jmethodID mid_listIterator100;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_ABSTRACTSEQUENTIALLIST_T
#define EXTERN_TYPEDEF_ABSTRACTSEQUENTIALLIST_T
	typedef void* ABSTRACTSEQUENTIALLIST_T;
#endif /* EXTERN_TYPEDEF_ABSTRACTSEQUENTIALLIST_T */
#ifndef EXTERN_TYPEDEF_COLLECTION_T
#define EXTERN_TYPEDEF_COLLECTION_T
	typedef void* COLLECTION_T;
#endif /* EXTERN_TYPEDEF_COLLECTION_T */
#ifndef EXTERN_TYPEDEF_LISTITERATOR_T
#define EXTERN_TYPEDEF_LISTITERATOR_T
	typedef void* LISTITERATOR_T;
#endif /* EXTERN_TYPEDEF_LISTITERATOR_T */
#ifndef EXTERN_TYPEDEF_LINKEDLIST_T
#define EXTERN_TYPEDEF_LINKEDLIST_T
	typedef void* LINKEDLIST_T;
#endif /* EXTERN_TYPEDEF_LINKEDLIST_T */

	EXPORTED int LinkedList_size(LINKEDLIST_T c_linked_list);
	EXPORTED LINKEDLIST_T LinkedList_Create();
	EXPORTED void LinkedList_clear(LINKEDLIST_T c_linked_list);
	EXPORTED unsigned char LinkedList_addAll(LINKEDLIST_T c_linked_list, int param0, COLLECTION_T param1);
	EXPORTED LINKEDLIST_T LinkedList_Create_1(COLLECTION_T param0);
	EXPORTED unsigned char LinkedList_addAll_1(LINKEDLIST_T c_linked_list, COLLECTION_T param0);
	EXPORTED void LinkedList_listIterator(LINKEDLIST_T c_linked_list, int param0, LISTITERATOR_T retval);
	EXPORTED void LinkedList_Destroy(LINKEDLIST_T linked_list);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED int STDCALL LinkedList_size_stdcall(LINKEDLIST_T c_linked_list);
	EXPORTED LINKEDLIST_T STDCALL LinkedList_Create_stdcall();
	EXPORTED void STDCALL LinkedList_clear_stdcall(LINKEDLIST_T c_linked_list);
	EXPORTED unsigned char STDCALL LinkedList_addAll_stdcall(LINKEDLIST_T c_linked_list, int param0, COLLECTION_T param1);
	EXPORTED LINKEDLIST_T STDCALL LinkedList_Create_stdcall_1(COLLECTION_T param0);
	EXPORTED unsigned char STDCALL LinkedList_addAll_stdcall_1(LINKEDLIST_T c_linked_list, COLLECTION_T param0);
	EXPORTED void STDCALL LinkedList_listIterator_stdcall(LINKEDLIST_T c_linked_list, int param0, LISTITERATOR_T retval);
	EXPORTED void STDCALL LinkedList_Destroy_stdcall(LINKEDLIST_T linked_list);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* LINKEDLIST_H */
