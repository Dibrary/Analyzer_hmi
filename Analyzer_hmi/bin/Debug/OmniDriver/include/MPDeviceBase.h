/**
 * File: MPDeviceBase.h
 * Autogenerated on Fri Mar 23 13:38:24 EDT 2018 based on
 * MPDeviceBase.java
 * for the Java class
 * com/oceanoptics/omnidriver/accessories/mikropack/devices/MPDeviceBase
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef MPDEVICEBASE_H
#define MPDEVICEBASE_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "UniRS232.h"
#include "Node.h"
#include "GetActualHomingStatus$ActualHomingStatus.h"
#include "GetActualStatus$ActualStatus.h"
#include "JString.h"
#include "GetFaultStatus$FaultStatus.h"
#include "GetOperationStatus$OperationStatus.h"
#include "JStringArray.h"
#include "GetStatus$Status.h"
#include "PrintStream.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class UniRS232;
class Node;
class GetActualHomingStatus$ActualHomingStatus;
class GetActualStatus$ActualStatus;
class JString;
class GetFaultStatus$FaultStatus;
class GetOperationStatus$OperationStatus;
class JStringArray;
class GetStatus$Status;
class PrintStream;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED MPDeviceBase : public BaseJavaClass // CPPClass.tag001
{
public: 
	MPDeviceBase(UniRS232& serPort);
	void setSerialPort(UniRS232& serPort);
	UniRS232 getSerialPort();
	void beginProgrammingSequence(Node& node);
	void clearDigitalOutput(Node& node);
	void disableDrive(Node& node);
	void disableProgram(Node& node);
	void enableDrive(Node& node);
	void enableProgram(Node& node);
	void endProgramSequence(Node& node);
	GetActualHomingStatus$ActualHomingStatus getActualHomingStatus(Node& node);
	GetActualStatus$ActualStatus getActualStatus(Node& node);
	JString getControllerSerialNumber(Node& node);
	JString getControllerType(Node& node);
	int getCurrentActualVelocity(Node& node);
	GetFaultStatus$FaultStatus getFaultStatus(Node& node);
	int getMaximumSpeed(Node& node);
	int getNegativeLimit(Node& node);
	int getNodeNumber(Node& node);
	GetOperationStatus$OperationStatus getOperationStatus(Node& node);
	int getPosition(Node& node);
	int getPositiveLimit(Node& node);
	JStringArray getProgramSequence(Node& node);
	GetStatus$Status getStatus(Node& node);
	int getSpeed(Node& node);
	int getTargetPosition(Node& node);
	int getTemperature(Node& node);
	int getVelocity(Node& node);
	JString getVersion(Node& node);
	void loadAbsolutePosition(Node& node, int position);
	void loadRelativePosition(Node& node, int position);
	void move(Node& node);
	void moveAndWait(Node& node);
	void moveAndWait(Node& node, long long millis);
	void notifyPositionDisable(Node& node);
	void notifyPositionEnable(Node& node);
	void resetNode(Node& node);
	void resumeProgram(Node& node);
	void runHallHoming(Node& node);
	void runHomingSequence(Node& node);
	void saveToEEPROM(Node& node);
	void setDigitalOutput(Node& node);
	void setHomePosition(Node& node);
	void setOutputDigital(Node& node);
	void setOutputError(Node& node);
	void setSpeed(Node& node, int speed);
	void setVelocity(Node& node, int velocity);
	void toggleDigitalOutput(Node& node);
	void setResponseMode(Node& node, int mode);
	void printEEPROM(JStringArray& eeprom, PrintStream& stream);
	~MPDeviceBase();
	// No public default Java constructor; creating one:
	MPDeviceBase();
	// No public Java copy constructor; creating one:
	MPDeviceBase(const MPDeviceBase &that);
	// Creating assignment operator declaration:
	MPDeviceBase &operator=(const MPDeviceBase &that);

private:
	jmethodID mid_MPDeviceBase176;
	jmethodID mid_setSerialPort177;
	jmethodID mid_getSerialPort178;
	jmethodID mid_beginProgrammingSequence179;
	jmethodID mid_clearDigitalOutput180;
	jmethodID mid_disableDrive181;
	jmethodID mid_disableProgram182;
	jmethodID mid_enableDrive183;
	jmethodID mid_enableProgram184;
	jmethodID mid_endProgramSequence185;
	jmethodID mid_getActualHomingStatus186;
	jmethodID mid_getActualStatus187;
	jmethodID mid_getControllerSerialNumber188;
	jmethodID mid_getControllerType189;
	jmethodID mid_getCurrentActualVelocity190;
	jmethodID mid_getFaultStatus191;
	jmethodID mid_getMaximumSpeed192;
	jmethodID mid_getNegativeLimit193;
	jmethodID mid_getNodeNumber194;
	jmethodID mid_getOperationStatus195;
	jmethodID mid_getPosition196;
	jmethodID mid_getPositiveLimit197;
	jmethodID mid_getProgramSequence198;
	jmethodID mid_getStatus199;
	jmethodID mid_getSpeed200;
	jmethodID mid_getTargetPosition201;
	jmethodID mid_getTemperature202;
	jmethodID mid_getVelocity203;
	jmethodID mid_getVersion204;
	jmethodID mid_loadAbsolutePosition205;
	jmethodID mid_loadRelativePosition206;
	jmethodID mid_move207;
	jmethodID mid_moveAndWait208;
	jmethodID mid_moveAndWait209;
	jmethodID mid_notifyPositionDisable210;
	jmethodID mid_notifyPositionEnable211;
	jmethodID mid_resetNode212;
	jmethodID mid_resumeProgram213;
	jmethodID mid_runHallHoming214;
	jmethodID mid_runHomingSequence215;
	jmethodID mid_saveToEEPROM216;
	jmethodID mid_setDigitalOutput217;
	jmethodID mid_setHomePosition218;
	jmethodID mid_setOutputDigital219;
	jmethodID mid_setOutputError220;
	jmethodID mid_setSpeed221;
	jmethodID mid_setVelocity222;
	jmethodID mid_toggleDigitalOutput223;
	jmethodID mid_setResponseMode224;
	jmethodID mid_printEEPROM225;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_UNIRS232_T
#define EXTERN_TYPEDEF_UNIRS232_T
	typedef void* UNIRS232_T;
#endif /* EXTERN_TYPEDEF_UNIRS232_T */
#ifndef EXTERN_TYPEDEF_NODE_T
#define EXTERN_TYPEDEF_NODE_T
	typedef void* NODE_T;
#endif /* EXTERN_TYPEDEF_NODE_T */
#ifndef EXTERN_TYPEDEF_GETACTUALHOMINGSTATUS$ACTUALHOMINGSTATUS_T
#define EXTERN_TYPEDEF_GETACTUALHOMINGSTATUS$ACTUALHOMINGSTATUS_T
	typedef void* GETACTUALHOMINGSTATUS$ACTUALHOMINGSTATUS_T;
#endif /* EXTERN_TYPEDEF_GETACTUALHOMINGSTATUS$ACTUALHOMINGSTATUS_T */
#ifndef EXTERN_TYPEDEF_GETACTUALSTATUS$ACTUALSTATUS_T
#define EXTERN_TYPEDEF_GETACTUALSTATUS$ACTUALSTATUS_T
	typedef void* GETACTUALSTATUS$ACTUALSTATUS_T;
#endif /* EXTERN_TYPEDEF_GETACTUALSTATUS$ACTUALSTATUS_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_GETFAULTSTATUS$FAULTSTATUS_T
#define EXTERN_TYPEDEF_GETFAULTSTATUS$FAULTSTATUS_T
	typedef void* GETFAULTSTATUS$FAULTSTATUS_T;
#endif /* EXTERN_TYPEDEF_GETFAULTSTATUS$FAULTSTATUS_T */
#ifndef EXTERN_TYPEDEF_GETOPERATIONSTATUS$OPERATIONSTATUS_T
#define EXTERN_TYPEDEF_GETOPERATIONSTATUS$OPERATIONSTATUS_T
	typedef void* GETOPERATIONSTATUS$OPERATIONSTATUS_T;
#endif /* EXTERN_TYPEDEF_GETOPERATIONSTATUS$OPERATIONSTATUS_T */
#ifndef EXTERN_TYPEDEF_JSTRINGARRAY_T
#define EXTERN_TYPEDEF_JSTRINGARRAY_T
	typedef void* JSTRINGARRAY_T;
#endif /* EXTERN_TYPEDEF_JSTRINGARRAY_T */
#ifndef EXTERN_TYPEDEF_GETSTATUS$STATUS_T
#define EXTERN_TYPEDEF_GETSTATUS$STATUS_T
	typedef void* GETSTATUS$STATUS_T;
#endif /* EXTERN_TYPEDEF_GETSTATUS$STATUS_T */
#ifndef EXTERN_TYPEDEF_PRINTSTREAM_T
#define EXTERN_TYPEDEF_PRINTSTREAM_T
	typedef void* PRINTSTREAM_T;
#endif /* EXTERN_TYPEDEF_PRINTSTREAM_T */
#ifndef EXTERN_TYPEDEF_MPDEVICEBASE_T
#define EXTERN_TYPEDEF_MPDEVICEBASE_T
	typedef void* MPDEVICEBASE_T;
#endif /* EXTERN_TYPEDEF_MPDEVICEBASE_T */

	// No public default Java constructor; creating one:
	EXPORTED MPDEVICEBASE_T MPDeviceBase_Create();
	EXPORTED MPDEVICEBASE_T MPDeviceBase_Create_1(UNIRS232_T serPort);
	EXPORTED void MPDeviceBase_setSerialPort(MPDEVICEBASE_T c_mpdevicebase, UNIRS232_T serPort);
	EXPORTED void MPDeviceBase_getSerialPort(MPDEVICEBASE_T c_mpdevicebase, UNIRS232_T retval);
	EXPORTED void MPDeviceBase_beginProgrammingSequence(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_clearDigitalOutput(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_disableDrive(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_disableProgram(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_enableDrive(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_enableProgram(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_endProgramSequence(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_getActualHomingStatus(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, GETACTUALHOMINGSTATUS$ACTUALHOMINGSTATUS_T retval);
	EXPORTED void MPDeviceBase_getActualStatus(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, GETACTUALSTATUS$ACTUALSTATUS_T retval);
	EXPORTED void MPDeviceBase_getControllerSerialNumber(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, JSTRING_T retval);
	EXPORTED void MPDeviceBase_getControllerType(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, JSTRING_T retval);
	EXPORTED int MPDeviceBase_getCurrentActualVelocity(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_getFaultStatus(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, GETFAULTSTATUS$FAULTSTATUS_T retval);
	EXPORTED int MPDeviceBase_getMaximumSpeed(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED int MPDeviceBase_getNegativeLimit(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED int MPDeviceBase_getNodeNumber(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_getOperationStatus(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, GETOPERATIONSTATUS$OPERATIONSTATUS_T retval);
	EXPORTED int MPDeviceBase_getPosition(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED int MPDeviceBase_getPositiveLimit(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_getProgramSequence(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, JSTRINGARRAY_T retval);
	EXPORTED void MPDeviceBase_getStatus(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, GETSTATUS$STATUS_T retval);
	EXPORTED int MPDeviceBase_getSpeed(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED int MPDeviceBase_getTargetPosition(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED int MPDeviceBase_getTemperature(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED int MPDeviceBase_getVelocity(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_getVersion(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, JSTRING_T retval);
	EXPORTED void MPDeviceBase_loadAbsolutePosition(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, int position);
	EXPORTED void MPDeviceBase_loadRelativePosition(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, int position);
	EXPORTED void MPDeviceBase_move(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_moveAndWait(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_moveAndWait_1(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, long long millis);
	EXPORTED void MPDeviceBase_notifyPositionDisable(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_notifyPositionEnable(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_resetNode(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_resumeProgram(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_runHallHoming(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_runHomingSequence(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_saveToEEPROM(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_setDigitalOutput(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_setHomePosition(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_setOutputDigital(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_setOutputError(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_setSpeed(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, int speed);
	EXPORTED void MPDeviceBase_setVelocity(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, int velocity);
	EXPORTED void MPDeviceBase_toggleDigitalOutput(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void MPDeviceBase_setResponseMode(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, int mode);
	EXPORTED void MPDeviceBase_printEEPROM(MPDEVICEBASE_T c_mpdevicebase, JSTRINGARRAY_T eeprom, PRINTSTREAM_T stream);
	EXPORTED void MPDeviceBase_Destroy(MPDEVICEBASE_T mpdevicebase);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED MPDEVICEBASE_T STDCALL MPDeviceBase_Create_stdcall_1(UNIRS232_T serPort);
	EXPORTED void STDCALL MPDeviceBase_setSerialPort_stdcall(MPDEVICEBASE_T c_mpdevicebase, UNIRS232_T serPort);
	EXPORTED void STDCALL MPDeviceBase_getSerialPort_stdcall(MPDEVICEBASE_T c_mpdevicebase, UNIRS232_T retval);
	EXPORTED void STDCALL MPDeviceBase_beginProgrammingSequence_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_clearDigitalOutput_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_disableDrive_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_disableProgram_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_enableDrive_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_enableProgram_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_endProgramSequence_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_getActualHomingStatus_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, GETACTUALHOMINGSTATUS$ACTUALHOMINGSTATUS_T retval);
	EXPORTED void STDCALL MPDeviceBase_getActualStatus_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, GETACTUALSTATUS$ACTUALSTATUS_T retval);
	EXPORTED void STDCALL MPDeviceBase_getControllerSerialNumber_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, JSTRING_T retval);
	EXPORTED void STDCALL MPDeviceBase_getControllerType_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, JSTRING_T retval);
	EXPORTED int STDCALL MPDeviceBase_getCurrentActualVelocity_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_getFaultStatus_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, GETFAULTSTATUS$FAULTSTATUS_T retval);
	EXPORTED int STDCALL MPDeviceBase_getMaximumSpeed_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED int STDCALL MPDeviceBase_getNegativeLimit_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED int STDCALL MPDeviceBase_getNodeNumber_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_getOperationStatus_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, GETOPERATIONSTATUS$OPERATIONSTATUS_T retval);
	EXPORTED int STDCALL MPDeviceBase_getPosition_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED int STDCALL MPDeviceBase_getPositiveLimit_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_getProgramSequence_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, JSTRINGARRAY_T retval);
	EXPORTED void STDCALL MPDeviceBase_getStatus_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, GETSTATUS$STATUS_T retval);
	EXPORTED int STDCALL MPDeviceBase_getSpeed_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED int STDCALL MPDeviceBase_getTargetPosition_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED int STDCALL MPDeviceBase_getTemperature_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED int STDCALL MPDeviceBase_getVelocity_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_getVersion_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, JSTRING_T retval);
	EXPORTED void STDCALL MPDeviceBase_loadAbsolutePosition_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, int position);
	EXPORTED void STDCALL MPDeviceBase_loadRelativePosition_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, int position);
	EXPORTED void STDCALL MPDeviceBase_move_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_moveAndWait_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_moveAndWait_stdcall_1(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, long long millis);
	EXPORTED void STDCALL MPDeviceBase_notifyPositionDisable_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_notifyPositionEnable_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_resetNode_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_resumeProgram_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_runHallHoming_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_runHomingSequence_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_saveToEEPROM_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_setDigitalOutput_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_setHomePosition_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_setOutputDigital_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_setOutputError_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_setSpeed_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, int speed);
	EXPORTED void STDCALL MPDeviceBase_setVelocity_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, int velocity);
	EXPORTED void STDCALL MPDeviceBase_toggleDigitalOutput_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node);
	EXPORTED void STDCALL MPDeviceBase_setResponseMode_stdcall(MPDEVICEBASE_T c_mpdevicebase, NODE_T node, int mode);
	EXPORTED void STDCALL MPDeviceBase_printEEPROM_stdcall(MPDEVICEBASE_T c_mpdevicebase, JSTRINGARRAY_T eeprom, PRINTSTREAM_T stream);
	EXPORTED void STDCALL MPDeviceBase_Destroy_stdcall(MPDEVICEBASE_T mpdevicebase);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* MPDEVICEBASE_H */
