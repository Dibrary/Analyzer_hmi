/**
 * File: SpectrometerChannelInfo.h
 * Autogenerated on Fri Mar 23 13:38:45 EDT 2018 based on
 * SpectrometerChannelInfo.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectra/SpectrometerChannelInfo
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef SPECTROMETERCHANNELINFO_H
#define SPECTROMETERCHANNELINFO_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "SpectrometerInfo.h"
#include "Coefficients.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class SpectrometerInfo;
class SpectrometerChannelInfo;
class Coefficients;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED SpectrometerChannelInfo : public SpectrometerInfo // CPPClass.tag001
{
public: 
	SpectrometerChannelInfo(SpectrometerInfo& spectrometerInfo);
	SpectrometerChannelInfo(SpectrometerInfo& spectrometerInfo, DoubleArray& wavelengths, int channel, short triggerEnabled, Coefficients& coefficients, double laserWavelength, short interlock, int numberOfPixels, int numberOfDarkPixels);
	DoubleArray getChannelWavelengths();
	void setChannelWavelengths(DoubleArray& wavelengths);
	int getChannelNumber();
	void setChannelNumber(int channel);
	short isChannelStabilityScanEnabled();
	void setChannelStabilityScanEnabled(short stabilityScanEnabled);
	short isChannelExternalTriggerEnabled();
	void setChannelExternalTriggerEnabled(short externalTriggerEnabled);
	Coefficients getChannelCoefficients();
	void setChannelCoefficients(Coefficients& coefficients);
	double getLaserWavelength();
	void setLaserWavelength(double laserWavelength);
	short isInterlock();
	void setInterlock(short interlock);
	int getNumberOfPixels();
	int getNumberOfDarkPixels();
	~SpectrometerChannelInfo();
	// No public default Java constructor; creating one:
	SpectrometerChannelInfo();
	// No public Java copy constructor; creating one:
	SpectrometerChannelInfo(const SpectrometerChannelInfo &that);
	// Creating assignment operator declaration:
	SpectrometerChannelInfo &operator=(const SpectrometerChannelInfo &that);

private:
	jmethodID mid_SpectrometerChannelInfo2762;
	jmethodID mid_SpectrometerChannelInfo2763;
	jmethodID mid_SpectrometerChannelInfo2764;
	jmethodID mid_getChannelWavelengths2765;
	jmethodID mid_setChannelWavelengths2766;
	jmethodID mid_getChannelNumber2767;
	jmethodID mid_setChannelNumber2768;
	jmethodID mid_isChannelStabilityScanEnabled2769;
	jmethodID mid_setChannelStabilityScanEnabled2770;
	jmethodID mid_isChannelExternalTriggerEnabled2771;
	jmethodID mid_setChannelExternalTriggerEnabled2772;
	jmethodID mid_getChannelCoefficients2773;
	jmethodID mid_setChannelCoefficients2774;
	jmethodID mid_getLaserWavelength2775;
	jmethodID mid_setLaserWavelength2776;
	jmethodID mid_isInterlock2777;
	jmethodID mid_setInterlock2778;
	jmethodID mid_getNumberOfPixels2779;
	jmethodID mid_getNumberOfDarkPixels2780;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_SPECTROMETERINFO_T
#define EXTERN_TYPEDEF_SPECTROMETERINFO_T
	typedef void* SPECTROMETERINFO_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERINFO_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETERCHANNELINFO_T
#define EXTERN_TYPEDEF_SPECTROMETERCHANNELINFO_T
	typedef void* SPECTROMETERCHANNELINFO_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERCHANNELINFO_T */
#ifndef EXTERN_TYPEDEF_COEFFICIENTS_T
#define EXTERN_TYPEDEF_COEFFICIENTS_T
	typedef void* COEFFICIENTS_T;
#endif /* EXTERN_TYPEDEF_COEFFICIENTS_T */

	// No public default Java constructor; creating one:
	EXPORTED SPECTROMETERCHANNELINFO_T SpectrometerChannelInfo_Create();
	EXPORTED SPECTROMETERCHANNELINFO_T SpectrometerChannelInfo_Create_1(SPECTROMETERCHANNELINFO_T spectrometerChannelInfo);
	EXPORTED SPECTROMETERCHANNELINFO_T SpectrometerChannelInfo_Create_2(SPECTROMETERINFO_T spectrometerInfo);
	EXPORTED SPECTROMETERCHANNELINFO_T SpectrometerChannelInfo_Create_3(SPECTROMETERINFO_T spectrometerInfo, DOUBLEARRAY_T wavelengths, int channel, short triggerEnabled, COEFFICIENTS_T coefficients, double laserWavelength, short interlock, int numberOfPixels, int numberOfDarkPixels);
	EXPORTED void SpectrometerChannelInfo_getChannelWavelengths(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info, DOUBLEARRAY_T retval);
	EXPORTED void SpectrometerChannelInfo_setChannelWavelengths(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info, DOUBLEARRAY_T wavelengths);
	EXPORTED int SpectrometerChannelInfo_getChannelNumber(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info);
	EXPORTED void SpectrometerChannelInfo_setChannelNumber(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info, int channel);
	EXPORTED short SpectrometerChannelInfo_isChannelStabilityScanEnabled(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info);
	EXPORTED void SpectrometerChannelInfo_setChannelStabilityScanEnabled(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info, short stabilityScanEnabled);
	EXPORTED short SpectrometerChannelInfo_isChannelExternalTriggerEnabled(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info);
	EXPORTED void SpectrometerChannelInfo_setChannelExternalTriggerEnabled(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info, short externalTriggerEnabled);
	EXPORTED void SpectrometerChannelInfo_getChannelCoefficients(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info, COEFFICIENTS_T retval);
	EXPORTED void SpectrometerChannelInfo_setChannelCoefficients(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info, COEFFICIENTS_T coefficients);
	EXPORTED double SpectrometerChannelInfo_getLaserWavelength(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info);
	EXPORTED void SpectrometerChannelInfo_setLaserWavelength(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info, double laserWavelength);
	EXPORTED short SpectrometerChannelInfo_isInterlock(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info);
	EXPORTED void SpectrometerChannelInfo_setInterlock(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info, short interlock);
	EXPORTED int SpectrometerChannelInfo_getNumberOfPixels(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info);
	EXPORTED int SpectrometerChannelInfo_getNumberOfDarkPixels(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info);
	EXPORTED void SpectrometerChannelInfo_Destroy(SPECTROMETERCHANNELINFO_T spectrometer_channel_info);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED SPECTROMETERCHANNELINFO_T STDCALL SpectrometerChannelInfo_Create_stdcall_1(SPECTROMETERCHANNELINFO_T spectrometerChannelInfo);
	EXPORTED SPECTROMETERCHANNELINFO_T STDCALL SpectrometerChannelInfo_Create_stdcall_2(SPECTROMETERINFO_T spectrometerInfo);
	EXPORTED SPECTROMETERCHANNELINFO_T STDCALL SpectrometerChannelInfo_Create_stdcall_3(SPECTROMETERINFO_T spectrometerInfo, DOUBLEARRAY_T wavelengths, int channel, short triggerEnabled, COEFFICIENTS_T coefficients, double laserWavelength, short interlock, int numberOfPixels, int numberOfDarkPixels);
	EXPORTED void STDCALL SpectrometerChannelInfo_getChannelWavelengths_stdcall(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL SpectrometerChannelInfo_setChannelWavelengths_stdcall(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info, DOUBLEARRAY_T wavelengths);
	EXPORTED int STDCALL SpectrometerChannelInfo_getChannelNumber_stdcall(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info);
	EXPORTED void STDCALL SpectrometerChannelInfo_setChannelNumber_stdcall(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info, int channel);
	EXPORTED short STDCALL SpectrometerChannelInfo_isChannelStabilityScanEnabled_stdcall(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info);
	EXPORTED void STDCALL SpectrometerChannelInfo_setChannelStabilityScanEnabled_stdcall(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info, short stabilityScanEnabled);
	EXPORTED short STDCALL SpectrometerChannelInfo_isChannelExternalTriggerEnabled_stdcall(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info);
	EXPORTED void STDCALL SpectrometerChannelInfo_setChannelExternalTriggerEnabled_stdcall(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info, short externalTriggerEnabled);
	EXPORTED void STDCALL SpectrometerChannelInfo_getChannelCoefficients_stdcall(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info, COEFFICIENTS_T retval);
	EXPORTED void STDCALL SpectrometerChannelInfo_setChannelCoefficients_stdcall(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info, COEFFICIENTS_T coefficients);
	EXPORTED double STDCALL SpectrometerChannelInfo_getLaserWavelength_stdcall(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info);
	EXPORTED void STDCALL SpectrometerChannelInfo_setLaserWavelength_stdcall(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info, double laserWavelength);
	EXPORTED short STDCALL SpectrometerChannelInfo_isInterlock_stdcall(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info);
	EXPORTED void STDCALL SpectrometerChannelInfo_setInterlock_stdcall(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info, short interlock);
	EXPORTED int STDCALL SpectrometerChannelInfo_getNumberOfPixels_stdcall(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info);
	EXPORTED int STDCALL SpectrometerChannelInfo_getNumberOfDarkPixels_stdcall(SPECTROMETERCHANNELINFO_T c_spectrometer_channel_info);
	EXPORTED void STDCALL SpectrometerChannelInfo_Destroy_stdcall(SPECTROMETERCHANNELINFO_T spectrometer_channel_info);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* SPECTROMETERCHANNELINFO_H */
