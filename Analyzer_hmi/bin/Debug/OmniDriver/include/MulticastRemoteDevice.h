/**
 * File: MulticastRemoteDevice.h
 * Autogenerated on Fri Mar 23 13:38:38 EDT 2018 based on
 * MulticastRemoteDevice.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/networksource/MulticastRemoteDevice
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef MULTICASTREMOTEDEVICE_H
#define MULTICASTREMOTEDEVICE_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED MulticastRemoteDevice : public BaseJavaClass // CPPClass.tag001
{
public: 
	MulticastRemoteDevice(JString& ipAddressIN, int portNumIN, JString& serialNumIN, JString& localAddressIN);
	JString getIPAddress();
	int getPortNum();
	JString getSerialNumber();
	JString getLocalIPAddress();
	~MulticastRemoteDevice();
	// No public default Java constructor; creating one:
	MulticastRemoteDevice();
	// No public Java copy constructor; creating one:
	MulticastRemoteDevice(const MulticastRemoteDevice &that);
	// Creating assignment operator declaration:
	MulticastRemoteDevice &operator=(const MulticastRemoteDevice &that);

private:
	jmethodID mid_MulticastRemoteDevice1855;
	jmethodID mid_getIPAddress1856;
	jmethodID mid_getPortNum1857;
	jmethodID mid_getSerialNumber1858;
	jmethodID mid_getLocalIPAddress1859;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_MULTICASTREMOTEDEVICE_T
#define EXTERN_TYPEDEF_MULTICASTREMOTEDEVICE_T
	typedef void* MULTICASTREMOTEDEVICE_T;
#endif /* EXTERN_TYPEDEF_MULTICASTREMOTEDEVICE_T */

	// No public default Java constructor; creating one:
	EXPORTED MULTICASTREMOTEDEVICE_T MulticastRemoteDevice_Create();
	EXPORTED MULTICASTREMOTEDEVICE_T MulticastRemoteDevice_Create_1(JSTRING_T ipAddressIN, int portNumIN, JSTRING_T serialNumIN, JSTRING_T localAddressIN);
	EXPORTED void MulticastRemoteDevice_getIPAddress(MULTICASTREMOTEDEVICE_T c_multicast_remote_device, JSTRING_T retval);
	EXPORTED int MulticastRemoteDevice_getPortNum(MULTICASTREMOTEDEVICE_T c_multicast_remote_device);
	EXPORTED void MulticastRemoteDevice_getSerialNumber(MULTICASTREMOTEDEVICE_T c_multicast_remote_device, JSTRING_T retval);
	EXPORTED void MulticastRemoteDevice_getLocalIPAddress(MULTICASTREMOTEDEVICE_T c_multicast_remote_device, JSTRING_T retval);
	EXPORTED void MulticastRemoteDevice_Destroy(MULTICASTREMOTEDEVICE_T multicast_remote_device);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED MULTICASTREMOTEDEVICE_T STDCALL MulticastRemoteDevice_Create_stdcall_1(JSTRING_T ipAddressIN, int portNumIN, JSTRING_T serialNumIN, JSTRING_T localAddressIN);
	EXPORTED void STDCALL MulticastRemoteDevice_getIPAddress_stdcall(MULTICASTREMOTEDEVICE_T c_multicast_remote_device, JSTRING_T retval);
	EXPORTED int STDCALL MulticastRemoteDevice_getPortNum_stdcall(MULTICASTREMOTEDEVICE_T c_multicast_remote_device);
	EXPORTED void STDCALL MulticastRemoteDevice_getSerialNumber_stdcall(MULTICASTREMOTEDEVICE_T c_multicast_remote_device, JSTRING_T retval);
	EXPORTED void STDCALL MulticastRemoteDevice_getLocalIPAddress_stdcall(MULTICASTREMOTEDEVICE_T c_multicast_remote_device, JSTRING_T retval);
	EXPORTED void STDCALL MulticastRemoteDevice_Destroy_stdcall(MULTICASTREMOTEDEVICE_T multicast_remote_device);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* MULTICASTREMOTEDEVICE_H */
