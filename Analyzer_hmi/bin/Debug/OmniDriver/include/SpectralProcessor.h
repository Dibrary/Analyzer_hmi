/**
 * File: SpectralProcessor.h
 * Autogenerated on Fri Mar 23 13:39:19 EDT 2018 based on
 * SpectralProcessor.java
 * for the Java class
 * com/oceanoptics/spectralprocessing/SpectralProcessor
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef SPECTRALPROCESSOR_H
#define SPECTRALPROCESSOR_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "SpectrumHandler.h"
#include "SpectrometerChannel.h"
#include "OmniSpectrum.h"
#include "Spectrum.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class SpectrumHandler;
class SpectrometerChannel;
class OmniSpectrum;
class Spectrum;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED SpectralProcessor : public SpectrumHandler // CPPClass.tag001
{
public: 
	SpectralProcessor(SpectrometerChannel& channel, short daemon);
	void destroyProcessor();
	OmniSpectrum getOmniSpectrum();
	int setTimeout(int timeoutMilliseconds);
	Spectrum getSpectrum(Spectrum& spectrum);
	Spectrum getSpectrumRaw(Spectrum& spectrum);
	void processSpectrum(Spectrum& spectrum);
	void stopAveraging();
	void boxcarAverage(Spectrum& spectrum);
	void correctForStrayLight(Spectrum& spectrum);
	void correctForStrayLightRaw(Spectrum& spectrum);
	void correctForElectricalDarkSignal(Spectrum& spectrum);
	short hasNonlinearityCorrectionCoefficients();
	void correctForDetectorNonlinearity(Spectrum& spectrum);
	int getScansToAverage();
	void setScansToAverage(int scansToAverage);
	short isCorrectForDetectorNonlinearity();
	void setCorrectForDetectorNonlinearity(short correctForDetectorNonlinearity);
	int getSmoothingWindowSize();
	void setSmoothingWindowSize(int newSmoothingWindowSize);
	short isCorrectForElectricalDark();
	void setCorrectForElectricalDark(short correctForElectricalDark);
	void setCorrectForElectricalDark(short correctForElectricalDark, short compatabilityMode);
	short isCorrectForStrayLight();
	void setCorrectForStrayLight(short correctForStrayLight);
	DoubleArray getSmoothingWindowWeights();
	void setSmoothingWindowWeights(DoubleArray& smoothingWindowWeights);
	void setDarkSpectrum(OmniSpectrum& dark);
	int getExternalTriggerMode();
	void setExternalTriggerMode(int mode);
	int getIntegrationTime();
	void setIntegrationTime(int newIntegrationTime);
	short getStrobeEnable();
	short getAutoToggleStrobeLampEnable();
	void setStrobeEnable(short enable);
	void setAutoToggleStrobeLampEnable(short enable);
	int getStrobeDelay();
	void setStrobeDelay(int newDelay);
	void setParameters(int sta, short ced, short cnl, short csl, int bcw, int it, short se, int sd, int etm, short atl);
	void setParameters(int sta, short ced, short electricDarkCompat, short cnl, short csl, int bcw, int it, short se, int sd, int etm, short atl);
	SpectrometerChannel getSpectrometerChannel();
	void attachSource(SpectrumHandler& source);
	void detachSource();
	void stop();
	void finalize();
	~SpectralProcessor();
	// No public default Java constructor; creating one:
	SpectralProcessor();
	// No public Java copy constructor; creating one:
	SpectralProcessor(const SpectralProcessor &that);
	// Creating assignment operator declaration:
	SpectralProcessor &operator=(const SpectralProcessor &that);

private:
	jmethodID mid_SpectralProcessor6476;
	jmethodID mid_destroyProcessor6477;
	jmethodID mid_getOmniSpectrum6478;
	jmethodID mid_setTimeout6479;
	jmethodID mid_getSpectrum6480;
	jmethodID mid_getSpectrumRaw6481;
	jmethodID mid_processSpectrum6482;
	jmethodID mid_stopAveraging6483;
	jmethodID mid_boxcarAverage6484;
	jmethodID mid_correctForStrayLight6485;
	jmethodID mid_correctForStrayLightRaw6486;
	jmethodID mid_correctForElectricalDarkSignal6487;
	jmethodID mid_hasNonlinearityCorrectionCoefficients6488;
	jmethodID mid_correctForDetectorNonlinearity6489;
	jmethodID mid_getScansToAverage6490;
	jmethodID mid_setScansToAverage6491;
	jmethodID mid_isCorrectForDetectorNonlinearity6492;
	jmethodID mid_setCorrectForDetectorNonlinearity6493;
	jmethodID mid_getSmoothingWindowSize6494;
	jmethodID mid_setSmoothingWindowSize6495;
	jmethodID mid_isCorrectForElectricalDark6496;
	jmethodID mid_setCorrectForElectricalDark6497;
	jmethodID mid_setCorrectForElectricalDark6498;
	jmethodID mid_isCorrectForStrayLight6499;
	jmethodID mid_setCorrectForStrayLight6500;
	jmethodID mid_getSmoothingWindowWeights6501;
	jmethodID mid_setSmoothingWindowWeights6502;
	jmethodID mid_setDarkSpectrum6503;
	jmethodID mid_getExternalTriggerMode6504;
	jmethodID mid_setExternalTriggerMode6505;
	jmethodID mid_getIntegrationTime6506;
	jmethodID mid_setIntegrationTime6507;
	jmethodID mid_getStrobeEnable6508;
	jmethodID mid_getAutoToggleStrobeLampEnable6509;
	jmethodID mid_setStrobeEnable6510;
	jmethodID mid_setAutoToggleStrobeLampEnable6511;
	jmethodID mid_getStrobeDelay6512;
	jmethodID mid_setStrobeDelay6513;
	jmethodID mid_setParameters6514;
	jmethodID mid_setParameters6515;
	jmethodID mid_getSpectrometerChannel6516;
	jmethodID mid_attachSource6517;
	jmethodID mid_detachSource6518;
	jmethodID mid_stop6519;
	jmethodID mid_finalize6520;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_SPECTRUMHANDLER_T
#define EXTERN_TYPEDEF_SPECTRUMHANDLER_T
	typedef void* SPECTRUMHANDLER_T;
#endif /* EXTERN_TYPEDEF_SPECTRUMHANDLER_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETERCHANNEL_T
#define EXTERN_TYPEDEF_SPECTROMETERCHANNEL_T
	typedef void* SPECTROMETERCHANNEL_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERCHANNEL_T */
#ifndef EXTERN_TYPEDEF_OMNISPECTRUM_T
#define EXTERN_TYPEDEF_OMNISPECTRUM_T
	typedef void* OMNISPECTRUM_T;
#endif /* EXTERN_TYPEDEF_OMNISPECTRUM_T */
#ifndef EXTERN_TYPEDEF_SPECTRUM_T
#define EXTERN_TYPEDEF_SPECTRUM_T
	typedef void* SPECTRUM_T;
#endif /* EXTERN_TYPEDEF_SPECTRUM_T */
#ifndef EXTERN_TYPEDEF_SPECTRALPROCESSOR_T
#define EXTERN_TYPEDEF_SPECTRALPROCESSOR_T
	typedef void* SPECTRALPROCESSOR_T;
#endif /* EXTERN_TYPEDEF_SPECTRALPROCESSOR_T */

	// No public default Java constructor; creating one:
	EXPORTED SPECTRALPROCESSOR_T SpectralProcessor_Create();
	EXPORTED SPECTRALPROCESSOR_T SpectralProcessor_Create_1(SPECTROMETERCHANNEL_T channel, short daemon);
	EXPORTED void SpectralProcessor_destroyProcessor(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void SpectralProcessor_getOmniSpectrum(SPECTRALPROCESSOR_T c_spectral_processor, OMNISPECTRUM_T retval);
	EXPORTED int SpectralProcessor_setTimeout(SPECTRALPROCESSOR_T c_spectral_processor, int timeoutMilliseconds);
	EXPORTED void SpectralProcessor_getSpectrum(SPECTRALPROCESSOR_T c_spectral_processor, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void SpectralProcessor_getSpectrumRaw(SPECTRALPROCESSOR_T c_spectral_processor, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void SpectralProcessor_processSpectrum(SPECTRALPROCESSOR_T c_spectral_processor, SPECTRUM_T spectrum);
	EXPORTED void SpectralProcessor_stopAveraging(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void SpectralProcessor_boxcarAverage(SPECTRALPROCESSOR_T c_spectral_processor, SPECTRUM_T spectrum);
	EXPORTED void SpectralProcessor_correctForStrayLight(SPECTRALPROCESSOR_T c_spectral_processor, SPECTRUM_T spectrum);
	EXPORTED void SpectralProcessor_correctForStrayLightRaw(SPECTRALPROCESSOR_T c_spectral_processor, SPECTRUM_T spectrum);
	EXPORTED void SpectralProcessor_correctForElectricalDarkSignal(SPECTRALPROCESSOR_T c_spectral_processor, SPECTRUM_T spectrum);
	EXPORTED short SpectralProcessor_hasNonlinearityCorrectionCoefficients(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void SpectralProcessor_correctForDetectorNonlinearity(SPECTRALPROCESSOR_T c_spectral_processor, SPECTRUM_T spectrum);
	EXPORTED int SpectralProcessor_getScansToAverage(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void SpectralProcessor_setScansToAverage(SPECTRALPROCESSOR_T c_spectral_processor, int scansToAverage);
	EXPORTED short SpectralProcessor_isCorrectForDetectorNonlinearity(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void SpectralProcessor_setCorrectForDetectorNonlinearity(SPECTRALPROCESSOR_T c_spectral_processor, short correctForDetectorNonlinearity);
	EXPORTED int SpectralProcessor_getSmoothingWindowSize(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void SpectralProcessor_setSmoothingWindowSize(SPECTRALPROCESSOR_T c_spectral_processor, int newSmoothingWindowSize);
	EXPORTED short SpectralProcessor_isCorrectForElectricalDark(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void SpectralProcessor_setCorrectForElectricalDark(SPECTRALPROCESSOR_T c_spectral_processor, short correctForElectricalDark);
	EXPORTED void SpectralProcessor_setCorrectForElectricalDark_1(SPECTRALPROCESSOR_T c_spectral_processor, short correctForElectricalDark, short compatabilityMode);
	EXPORTED short SpectralProcessor_isCorrectForStrayLight(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void SpectralProcessor_setCorrectForStrayLight(SPECTRALPROCESSOR_T c_spectral_processor, short correctForStrayLight);
	EXPORTED void SpectralProcessor_getSmoothingWindowWeights(SPECTRALPROCESSOR_T c_spectral_processor, DOUBLEARRAY_T retval);
	EXPORTED void SpectralProcessor_setSmoothingWindowWeights(SPECTRALPROCESSOR_T c_spectral_processor, DOUBLEARRAY_T smoothingWindowWeights);
	EXPORTED void SpectralProcessor_setDarkSpectrum(SPECTRALPROCESSOR_T c_spectral_processor, OMNISPECTRUM_T dark);
	EXPORTED int SpectralProcessor_getExternalTriggerMode(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void SpectralProcessor_setExternalTriggerMode(SPECTRALPROCESSOR_T c_spectral_processor, int mode);
	EXPORTED int SpectralProcessor_getIntegrationTime(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void SpectralProcessor_setIntegrationTime(SPECTRALPROCESSOR_T c_spectral_processor, int newIntegrationTime);
	EXPORTED short SpectralProcessor_getStrobeEnable(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED short SpectralProcessor_getAutoToggleStrobeLampEnable(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void SpectralProcessor_setStrobeEnable(SPECTRALPROCESSOR_T c_spectral_processor, short enable);
	EXPORTED void SpectralProcessor_setAutoToggleStrobeLampEnable(SPECTRALPROCESSOR_T c_spectral_processor, short enable);
	EXPORTED int SpectralProcessor_getStrobeDelay(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void SpectralProcessor_setStrobeDelay(SPECTRALPROCESSOR_T c_spectral_processor, int newDelay);
	EXPORTED void SpectralProcessor_setParameters(SPECTRALPROCESSOR_T c_spectral_processor, int sta, short ced, short cnl, short csl, int bcw, int it, short se, int sd, int etm, short atl);
	EXPORTED void SpectralProcessor_setParameters_1(SPECTRALPROCESSOR_T c_spectral_processor, int sta, short ced, short electricDarkCompat, short cnl, short csl, int bcw, int it, short se, int sd, int etm, short atl);
	EXPORTED void SpectralProcessor_getSpectrometerChannel(SPECTRALPROCESSOR_T c_spectral_processor, SPECTROMETERCHANNEL_T retval);
	EXPORTED void SpectralProcessor_attachSource(SPECTRALPROCESSOR_T c_spectral_processor, SPECTRUMHANDLER_T source);
	EXPORTED void SpectralProcessor_detachSource(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void SpectralProcessor_stop(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void SpectralProcessor_finalize(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void SpectralProcessor_Destroy(SPECTRALPROCESSOR_T spectral_processor);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED SPECTRALPROCESSOR_T STDCALL SpectralProcessor_Create_stdcall_1(SPECTROMETERCHANNEL_T channel, short daemon);
	EXPORTED void STDCALL SpectralProcessor_destroyProcessor_stdcall(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void STDCALL SpectralProcessor_getOmniSpectrum_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, OMNISPECTRUM_T retval);
	EXPORTED int STDCALL SpectralProcessor_setTimeout_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, int timeoutMilliseconds);
	EXPORTED void STDCALL SpectralProcessor_getSpectrum_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void STDCALL SpectralProcessor_getSpectrumRaw_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void STDCALL SpectralProcessor_processSpectrum_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, SPECTRUM_T spectrum);
	EXPORTED void STDCALL SpectralProcessor_stopAveraging_stdcall(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void STDCALL SpectralProcessor_boxcarAverage_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, SPECTRUM_T spectrum);
	EXPORTED void STDCALL SpectralProcessor_correctForStrayLight_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, SPECTRUM_T spectrum);
	EXPORTED void STDCALL SpectralProcessor_correctForStrayLightRaw_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, SPECTRUM_T spectrum);
	EXPORTED void STDCALL SpectralProcessor_correctForElectricalDarkSignal_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, SPECTRUM_T spectrum);
	EXPORTED short STDCALL SpectralProcessor_hasNonlinearityCorrectionCoefficients_stdcall(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void STDCALL SpectralProcessor_correctForDetectorNonlinearity_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, SPECTRUM_T spectrum);
	EXPORTED int STDCALL SpectralProcessor_getScansToAverage_stdcall(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void STDCALL SpectralProcessor_setScansToAverage_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, int scansToAverage);
	EXPORTED short STDCALL SpectralProcessor_isCorrectForDetectorNonlinearity_stdcall(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void STDCALL SpectralProcessor_setCorrectForDetectorNonlinearity_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, short correctForDetectorNonlinearity);
	EXPORTED int STDCALL SpectralProcessor_getSmoothingWindowSize_stdcall(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void STDCALL SpectralProcessor_setSmoothingWindowSize_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, int newSmoothingWindowSize);
	EXPORTED short STDCALL SpectralProcessor_isCorrectForElectricalDark_stdcall(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void STDCALL SpectralProcessor_setCorrectForElectricalDark_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, short correctForElectricalDark);
	EXPORTED void STDCALL SpectralProcessor_setCorrectForElectricalDark_stdcall_1(SPECTRALPROCESSOR_T c_spectral_processor, short correctForElectricalDark, short compatabilityMode);
	EXPORTED short STDCALL SpectralProcessor_isCorrectForStrayLight_stdcall(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void STDCALL SpectralProcessor_setCorrectForStrayLight_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, short correctForStrayLight);
	EXPORTED void STDCALL SpectralProcessor_getSmoothingWindowWeights_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL SpectralProcessor_setSmoothingWindowWeights_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, DOUBLEARRAY_T smoothingWindowWeights);
	EXPORTED void STDCALL SpectralProcessor_setDarkSpectrum_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, OMNISPECTRUM_T dark);
	EXPORTED int STDCALL SpectralProcessor_getExternalTriggerMode_stdcall(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void STDCALL SpectralProcessor_setExternalTriggerMode_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, int mode);
	EXPORTED int STDCALL SpectralProcessor_getIntegrationTime_stdcall(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void STDCALL SpectralProcessor_setIntegrationTime_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, int newIntegrationTime);
	EXPORTED short STDCALL SpectralProcessor_getStrobeEnable_stdcall(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED short STDCALL SpectralProcessor_getAutoToggleStrobeLampEnable_stdcall(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void STDCALL SpectralProcessor_setStrobeEnable_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, short enable);
	EXPORTED void STDCALL SpectralProcessor_setAutoToggleStrobeLampEnable_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, short enable);
	EXPORTED int STDCALL SpectralProcessor_getStrobeDelay_stdcall(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void STDCALL SpectralProcessor_setStrobeDelay_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, int newDelay);
	EXPORTED void STDCALL SpectralProcessor_setParameters_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, int sta, short ced, short cnl, short csl, int bcw, int it, short se, int sd, int etm, short atl);
	EXPORTED void STDCALL SpectralProcessor_setParameters_stdcall_1(SPECTRALPROCESSOR_T c_spectral_processor, int sta, short ced, short electricDarkCompat, short cnl, short csl, int bcw, int it, short se, int sd, int etm, short atl);
	EXPORTED void STDCALL SpectralProcessor_getSpectrometerChannel_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, SPECTROMETERCHANNEL_T retval);
	EXPORTED void STDCALL SpectralProcessor_attachSource_stdcall(SPECTRALPROCESSOR_T c_spectral_processor, SPECTRUMHANDLER_T source);
	EXPORTED void STDCALL SpectralProcessor_detachSource_stdcall(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void STDCALL SpectralProcessor_stop_stdcall(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void STDCALL SpectralProcessor_finalize_stdcall(SPECTRALPROCESSOR_T c_spectral_processor);
	EXPORTED void STDCALL SpectralProcessor_Destroy_stdcall(SPECTRALPROCESSOR_T spectral_processor);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* SPECTRALPROCESSOR_H */
