/**
 * File: AdvancedIntegrationClock.h
 * Autogenerated on Fri Mar 23 13:38:29 EDT 2018 based on
 * AdvancedIntegrationClock.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/advancedintegrationclock/AdvancedIntegrationClock
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef ADVANCEDINTEGRATIONCLOCK_H
#define ADVANCEDINTEGRATIONCLOCK_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#endif /* INCLUDES_IN_HEADER */


CLASS_TOKEN EXPORTED AdvancedIntegrationClock : public BaseJavaClass // CPPClass.tag001
{
public: 
	int getIntegrationClockTimer();
	int getIntegrationTimeBaseClock();
	void setAdvancedIntegrationTime(long long param0);
	long long getAdvancedIntegrationTimeMinimum();
	long long getAdvancedIntegrationTimeMaximum();
	long long getAdvancedIntegrationTimeIncrement();
	~AdvancedIntegrationClock();
	// No public default Java constructor; creating one:
	AdvancedIntegrationClock();
	// No public Java copy constructor; creating one:
	AdvancedIntegrationClock(const AdvancedIntegrationClock &that);
	// Creating assignment operator declaration:
	AdvancedIntegrationClock &operator=(const AdvancedIntegrationClock &that);

private:
	jmethodID mid_getIntegrationClockTimer747;
	jmethodID mid_getIntegrationTimeBaseClock748;
	jmethodID mid_setAdvancedIntegrationTime749;
	jmethodID mid_getAdvancedIntegrationTimeMinimum750;
	jmethodID mid_getAdvancedIntegrationTimeMaximum751;
	jmethodID mid_getAdvancedIntegrationTimeIncrement752;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_ADVANCEDINTEGRATIONCLOCK_T
#define EXTERN_TYPEDEF_ADVANCEDINTEGRATIONCLOCK_T
	typedef void* ADVANCEDINTEGRATIONCLOCK_T;
#endif /* EXTERN_TYPEDEF_ADVANCEDINTEGRATIONCLOCK_T */

	// No public default Java constructor; creating one:
	EXPORTED ADVANCEDINTEGRATIONCLOCK_T AdvancedIntegrationClock_Create();
	EXPORTED int AdvancedIntegrationClock_getIntegrationClockTimer(ADVANCEDINTEGRATIONCLOCK_T c_advanced_integration_clock);
	EXPORTED int AdvancedIntegrationClock_getIntegrationTimeBaseClock(ADVANCEDINTEGRATIONCLOCK_T c_advanced_integration_clock);
	EXPORTED void AdvancedIntegrationClock_setAdvancedIntegrationTime(ADVANCEDINTEGRATIONCLOCK_T c_advanced_integration_clock, long long param0);
	EXPORTED long long AdvancedIntegrationClock_getAdvancedIntegrationTimeMinimum(ADVANCEDINTEGRATIONCLOCK_T c_advanced_integration_clock);
	EXPORTED long long AdvancedIntegrationClock_getAdvancedIntegrationTimeMaximum(ADVANCEDINTEGRATIONCLOCK_T c_advanced_integration_clock);
	EXPORTED long long AdvancedIntegrationClock_getAdvancedIntegrationTimeIncrement(ADVANCEDINTEGRATIONCLOCK_T c_advanced_integration_clock);
	EXPORTED void AdvancedIntegrationClock_Destroy(ADVANCEDINTEGRATIONCLOCK_T advanced_integration_clock);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED int STDCALL AdvancedIntegrationClock_getIntegrationClockTimer_stdcall(ADVANCEDINTEGRATIONCLOCK_T c_advanced_integration_clock);
	EXPORTED int STDCALL AdvancedIntegrationClock_getIntegrationTimeBaseClock_stdcall(ADVANCEDINTEGRATIONCLOCK_T c_advanced_integration_clock);
	EXPORTED void STDCALL AdvancedIntegrationClock_setAdvancedIntegrationTime_stdcall(ADVANCEDINTEGRATIONCLOCK_T c_advanced_integration_clock, long long param0);
	EXPORTED long long STDCALL AdvancedIntegrationClock_getAdvancedIntegrationTimeMinimum_stdcall(ADVANCEDINTEGRATIONCLOCK_T c_advanced_integration_clock);
	EXPORTED long long STDCALL AdvancedIntegrationClock_getAdvancedIntegrationTimeMaximum_stdcall(ADVANCEDINTEGRATIONCLOCK_T c_advanced_integration_clock);
	EXPORTED long long STDCALL AdvancedIntegrationClock_getAdvancedIntegrationTimeIncrement_stdcall(ADVANCEDINTEGRATIONCLOCK_T c_advanced_integration_clock);
	EXPORTED void STDCALL AdvancedIntegrationClock_Destroy_stdcall(ADVANCEDINTEGRATIONCLOCK_T advanced_integration_clock);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* ADVANCEDINTEGRATIONCLOCK_H */
