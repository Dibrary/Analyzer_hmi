/**
 * File: GPIOImpl.h
 * Autogenerated on Fri Mar 23 13:38:34 EDT 2018 based on
 * GPIOImpl.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/gpio/GPIOImpl
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef GPIOIMPL_H
#define GPIOIMPL_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "FPGAImpl.h"
#include "USBInterface.h"
#include "BitSet.h"
#include "JStringArray.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class FPGAImpl;
class USBInterface;
class BitSet;
class JStringArray;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED GPIOImpl : public FPGAImpl // CPPClass.tag001
{
public: 
	GPIOImpl(USBInterface& usbInt, int numPins);
	int getTotalGPIOBits();
	BitSet getDirectionBits();
	BitSet getMuxBits();
	BitSet getValueBits();
	int getValueBit(int bitNumber);
	int getNumberOfPins();
	void setMuxAllBits(BitSet& bitSet);
	void setValueAllBits(BitSet& bitSet);
	void setDirectionAllBits(BitSet& bitSet);
	void setDirectionBit(int bit, short value);
	void setDirectionBitmask(short value);
	void setMuxBit(int bit, short value);
	void setMuxBitmask(short value);
	void setValueBit(int bit, short value);
	void setValueBitmask(short value);
	JStringArray getFeatureGUIClassnames();
	~GPIOImpl();
	// No public default Java constructor; creating one:
	GPIOImpl();
	// No public Java copy constructor; creating one:
	GPIOImpl(const GPIOImpl &that);
	// Creating assignment operator declaration:
	GPIOImpl &operator=(const GPIOImpl &that);

private:
	jmethodID mid_GPIOImpl1288;
	jmethodID mid_getTotalGPIOBits1289;
	jmethodID mid_getDirectionBits1290;
	jmethodID mid_getMuxBits1291;
	jmethodID mid_getValueBits1292;
	jmethodID mid_getValueBit1293;
	jmethodID mid_getNumberOfPins1294;
	jmethodID mid_setMuxAllBits1295;
	jmethodID mid_setValueAllBits1296;
	jmethodID mid_setDirectionAllBits1297;
	jmethodID mid_setDirectionBit1298;
	jmethodID mid_setDirectionBitmask1299;
	jmethodID mid_setMuxBit1300;
	jmethodID mid_setMuxBitmask1301;
	jmethodID mid_setValueBit1302;
	jmethodID mid_setValueBitmask1303;
	jmethodID mid_getFeatureGUIClassnames1304;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_FPGAIMPL_T
#define EXTERN_TYPEDEF_FPGAIMPL_T
	typedef void* FPGAIMPL_T;
#endif /* EXTERN_TYPEDEF_FPGAIMPL_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_BITSET_T
#define EXTERN_TYPEDEF_BITSET_T
	typedef void* BITSET_T;
#endif /* EXTERN_TYPEDEF_BITSET_T */
#ifndef EXTERN_TYPEDEF_JSTRINGARRAY_T
#define EXTERN_TYPEDEF_JSTRINGARRAY_T
	typedef void* JSTRINGARRAY_T;
#endif /* EXTERN_TYPEDEF_JSTRINGARRAY_T */
#ifndef EXTERN_TYPEDEF_GPIOIMPL_T
#define EXTERN_TYPEDEF_GPIOIMPL_T
	typedef void* GPIOIMPL_T;
#endif /* EXTERN_TYPEDEF_GPIOIMPL_T */

	// No public default Java constructor; creating one:
	EXPORTED GPIOIMPL_T GPIOImpl_Create();
	EXPORTED GPIOIMPL_T GPIOImpl_Create_1(USBINTERFACE_T usbInt, int numPins);
	EXPORTED int GPIOImpl_getTotalGPIOBits(GPIOIMPL_T c_gpioimpl);
	EXPORTED void GPIOImpl_getDirectionBits(GPIOIMPL_T c_gpioimpl, BITSET_T retval);
	EXPORTED void GPIOImpl_getMuxBits(GPIOIMPL_T c_gpioimpl, BITSET_T retval);
	EXPORTED void GPIOImpl_getValueBits(GPIOIMPL_T c_gpioimpl, BITSET_T retval);
	EXPORTED int GPIOImpl_getValueBit(GPIOIMPL_T c_gpioimpl, int bitNumber);
	EXPORTED int GPIOImpl_getNumberOfPins(GPIOIMPL_T c_gpioimpl);
	EXPORTED void GPIOImpl_setMuxAllBits(GPIOIMPL_T c_gpioimpl, BITSET_T bitSet);
	EXPORTED void GPIOImpl_setValueAllBits(GPIOIMPL_T c_gpioimpl, BITSET_T bitSet);
	EXPORTED void GPIOImpl_setDirectionAllBits(GPIOIMPL_T c_gpioimpl, BITSET_T bitSet);
	EXPORTED void GPIOImpl_setDirectionBit(GPIOIMPL_T c_gpioimpl, int bit, short value);
	EXPORTED void GPIOImpl_setDirectionBitmask(GPIOIMPL_T c_gpioimpl, short value);
	EXPORTED void GPIOImpl_setMuxBit(GPIOIMPL_T c_gpioimpl, int bit, short value);
	EXPORTED void GPIOImpl_setMuxBitmask(GPIOIMPL_T c_gpioimpl, short value);
	EXPORTED void GPIOImpl_setValueBit(GPIOIMPL_T c_gpioimpl, int bit, short value);
	EXPORTED void GPIOImpl_setValueBitmask(GPIOIMPL_T c_gpioimpl, short value);
	EXPORTED void GPIOImpl_getFeatureGUIClassnames(GPIOIMPL_T c_gpioimpl, JSTRINGARRAY_T retval);
	EXPORTED void GPIOImpl_Destroy(GPIOIMPL_T gpioimpl);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED GPIOIMPL_T STDCALL GPIOImpl_Create_stdcall_1(USBINTERFACE_T usbInt, int numPins);
	EXPORTED int STDCALL GPIOImpl_getTotalGPIOBits_stdcall(GPIOIMPL_T c_gpioimpl);
	EXPORTED void STDCALL GPIOImpl_getDirectionBits_stdcall(GPIOIMPL_T c_gpioimpl, BITSET_T retval);
	EXPORTED void STDCALL GPIOImpl_getMuxBits_stdcall(GPIOIMPL_T c_gpioimpl, BITSET_T retval);
	EXPORTED void STDCALL GPIOImpl_getValueBits_stdcall(GPIOIMPL_T c_gpioimpl, BITSET_T retval);
	EXPORTED int STDCALL GPIOImpl_getValueBit_stdcall(GPIOIMPL_T c_gpioimpl, int bitNumber);
	EXPORTED int STDCALL GPIOImpl_getNumberOfPins_stdcall(GPIOIMPL_T c_gpioimpl);
	EXPORTED void STDCALL GPIOImpl_setMuxAllBits_stdcall(GPIOIMPL_T c_gpioimpl, BITSET_T bitSet);
	EXPORTED void STDCALL GPIOImpl_setValueAllBits_stdcall(GPIOIMPL_T c_gpioimpl, BITSET_T bitSet);
	EXPORTED void STDCALL GPIOImpl_setDirectionAllBits_stdcall(GPIOIMPL_T c_gpioimpl, BITSET_T bitSet);
	EXPORTED void STDCALL GPIOImpl_setDirectionBit_stdcall(GPIOIMPL_T c_gpioimpl, int bit, short value);
	EXPORTED void STDCALL GPIOImpl_setDirectionBitmask_stdcall(GPIOIMPL_T c_gpioimpl, short value);
	EXPORTED void STDCALL GPIOImpl_setMuxBit_stdcall(GPIOIMPL_T c_gpioimpl, int bit, short value);
	EXPORTED void STDCALL GPIOImpl_setMuxBitmask_stdcall(GPIOIMPL_T c_gpioimpl, short value);
	EXPORTED void STDCALL GPIOImpl_setValueBit_stdcall(GPIOIMPL_T c_gpioimpl, int bit, short value);
	EXPORTED void STDCALL GPIOImpl_setValueBitmask_stdcall(GPIOIMPL_T c_gpioimpl, short value);
	EXPORTED void STDCALL GPIOImpl_getFeatureGUIClassnames_stdcall(GPIOIMPL_T c_gpioimpl, JSTRINGARRAY_T retval);
	EXPORTED void STDCALL GPIOImpl_Destroy_stdcall(GPIOIMPL_T gpioimpl);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* GPIOIMPL_H */
