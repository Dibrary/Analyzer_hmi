/**
 * File: Detector.h
 * Autogenerated on Fri Mar 23 13:38:46 EDT 2018 based on
 * Detector.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/Detector
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef DETECTOR_H
#define DETECTOR_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED Detector : public BaseJavaClass // CPPClass.tag001
{
public: 
	Detector();
	short isDefined();
	JString getSerialNumber();
	void setSerialNumber(JString& value);
	JString getArrayCoatingMfg();
	void setArrayCoatingMfg(JString& value);
	short isLensInstalled();
	void setLensInstalled(short value);
	JString getArrayWavelength();
	void setArrayWavelength(JString& value);
	void setDetectorType(int value);
	int getDetectorType();
	~Detector();
	// No public Java copy constructor; creating one:
	Detector(const Detector &that);
	// Creating assignment operator declaration:
	Detector &operator=(const Detector &that);

private:
	jmethodID mid_Detector2889;
	jmethodID mid_isDefined2890;
	jmethodID mid_getSerialNumber2891;
	jmethodID mid_setSerialNumber2892;
	jmethodID mid_getArrayCoatingMfg2893;
	jmethodID mid_setArrayCoatingMfg2894;
	jmethodID mid_isLensInstalled2895;
	jmethodID mid_setLensInstalled2896;
	jmethodID mid_getArrayWavelength2897;
	jmethodID mid_setArrayWavelength2898;
	jmethodID mid_setDetectorType2899;
	jmethodID mid_getDetectorType2900;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_DETECTOR_T
#define EXTERN_TYPEDEF_DETECTOR_T
	typedef void* DETECTOR_T;
#endif /* EXTERN_TYPEDEF_DETECTOR_T */

	EXPORTED DETECTOR_T Detector_Create();
	EXPORTED short Detector_isDefined(DETECTOR_T c_detector);
	EXPORTED void Detector_getSerialNumber(DETECTOR_T c_detector, JSTRING_T retval);
	EXPORTED void Detector_setSerialNumber(DETECTOR_T c_detector, JSTRING_T value);
	EXPORTED void Detector_getArrayCoatingMfg(DETECTOR_T c_detector, JSTRING_T retval);
	EXPORTED void Detector_setArrayCoatingMfg(DETECTOR_T c_detector, JSTRING_T value);
	EXPORTED short Detector_isLensInstalled(DETECTOR_T c_detector);
	EXPORTED void Detector_setLensInstalled(DETECTOR_T c_detector, short value);
	EXPORTED void Detector_getArrayWavelength(DETECTOR_T c_detector, JSTRING_T retval);
	EXPORTED void Detector_setArrayWavelength(DETECTOR_T c_detector, JSTRING_T value);
	EXPORTED void Detector_setDetectorType(DETECTOR_T c_detector, int value);
	EXPORTED int Detector_getDetectorType(DETECTOR_T c_detector);
	EXPORTED void Detector_Destroy(DETECTOR_T detector);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED DETECTOR_T STDCALL Detector_Create_stdcall();
	EXPORTED short STDCALL Detector_isDefined_stdcall(DETECTOR_T c_detector);
	EXPORTED void STDCALL Detector_getSerialNumber_stdcall(DETECTOR_T c_detector, JSTRING_T retval);
	EXPORTED void STDCALL Detector_setSerialNumber_stdcall(DETECTOR_T c_detector, JSTRING_T value);
	EXPORTED void STDCALL Detector_getArrayCoatingMfg_stdcall(DETECTOR_T c_detector, JSTRING_T retval);
	EXPORTED void STDCALL Detector_setArrayCoatingMfg_stdcall(DETECTOR_T c_detector, JSTRING_T value);
	EXPORTED short STDCALL Detector_isLensInstalled_stdcall(DETECTOR_T c_detector);
	EXPORTED void STDCALL Detector_setLensInstalled_stdcall(DETECTOR_T c_detector, short value);
	EXPORTED void STDCALL Detector_getArrayWavelength_stdcall(DETECTOR_T c_detector, JSTRING_T retval);
	EXPORTED void STDCALL Detector_setArrayWavelength_stdcall(DETECTOR_T c_detector, JSTRING_T value);
	EXPORTED void STDCALL Detector_setDetectorType_stdcall(DETECTOR_T c_detector, int value);
	EXPORTED int STDCALL Detector_getDetectorType_stdcall(DETECTOR_T c_detector);
	EXPORTED void STDCALL Detector_Destroy_stdcall(DETECTOR_T detector);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* DETECTOR_H */
