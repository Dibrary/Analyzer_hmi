/**
 * File: ThermoElectricWrapper.h
 * Autogenerated on Fri Mar 23 13:38:41 EDT 2018 based on
 * ThermoElectricWrapper.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/thermoelectric/ThermoElectricWrapper
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef THERMOELECTRICWRAPPER_H
#define THERMOELECTRICWRAPPER_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "ThermoElectric.h"
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class ThermoElectric;
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED ThermoElectricWrapper : public BaseJavaClass // CPPClass.tag001
{
public: 
	ThermoElectricWrapper(ThermoElectric& thermoElectric);
	int getSaturationIntensity();
	short setSaturationIntensity(int saturationIntensity, JString& key);
	void setTECEnable(short enable);
	short getTECEnable();
	void setFanEnable(short enable);
	short getFanEnable();
	double getDetectorTemperatureCelsius();
	double getDetectorTemperatureSetPointCelsius();
	void setDetectorSetPointCelsius(double point);
	double getDetectorSetPointCelsius();
	double getSetPointMinimumCelsius();
	double getSetPointMaximumCelsius();
	double getSetPointIncrementCelsius();
	short isSaveTECStateEnabled();
	void saveTECState();
	~ThermoElectricWrapper();
	// No public default Java constructor; creating one:
	ThermoElectricWrapper();
	// No public Java copy constructor; creating one:
	ThermoElectricWrapper(const ThermoElectricWrapper &that);
	// Creating assignment operator declaration:
	ThermoElectricWrapper &operator=(const ThermoElectricWrapper &that);

private:
	jmethodID mid_ThermoElectricWrapper2225;
	jmethodID mid_getSaturationIntensity2226;
	jmethodID mid_setSaturationIntensity2227;
	jmethodID mid_setTECEnable2228;
	jmethodID mid_getTECEnable2229;
	jmethodID mid_setFanEnable2230;
	jmethodID mid_getFanEnable2231;
	jmethodID mid_getDetectorTemperatureCelsius2232;
	jmethodID mid_getDetectorTemperatureSetPointCelsius2233;
	jmethodID mid_setDetectorSetPointCelsius2234;
	jmethodID mid_getDetectorSetPointCelsius2235;
	jmethodID mid_getSetPointMinimumCelsius2236;
	jmethodID mid_getSetPointMaximumCelsius2237;
	jmethodID mid_getSetPointIncrementCelsius2238;
	jmethodID mid_isSaveTECStateEnabled2239;
	jmethodID mid_saveTECState2240;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_THERMOELECTRIC_T
#define EXTERN_TYPEDEF_THERMOELECTRIC_T
	typedef void* THERMOELECTRIC_T;
#endif /* EXTERN_TYPEDEF_THERMOELECTRIC_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_THERMOELECTRICWRAPPER_T
#define EXTERN_TYPEDEF_THERMOELECTRICWRAPPER_T
	typedef void* THERMOELECTRICWRAPPER_T;
#endif /* EXTERN_TYPEDEF_THERMOELECTRICWRAPPER_T */

	// No public default Java constructor; creating one:
	EXPORTED THERMOELECTRICWRAPPER_T ThermoElectricWrapper_Create();
	EXPORTED THERMOELECTRICWRAPPER_T ThermoElectricWrapper_Create_1(THERMOELECTRIC_T thermoElectric);
	EXPORTED int ThermoElectricWrapper_getSaturationIntensity(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED short ThermoElectricWrapper_setSaturationIntensity(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper, int saturationIntensity, JSTRING_T key);
	EXPORTED void ThermoElectricWrapper_setTECEnable(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper, short enable);
	EXPORTED short ThermoElectricWrapper_getTECEnable(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED void ThermoElectricWrapper_setFanEnable(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper, short enable);
	EXPORTED short ThermoElectricWrapper_getFanEnable(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED double ThermoElectricWrapper_getDetectorTemperatureCelsius(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED double ThermoElectricWrapper_getDetectorTemperatureSetPointCelsius(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED void ThermoElectricWrapper_setDetectorSetPointCelsius(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper, double point);
	EXPORTED double ThermoElectricWrapper_getDetectorSetPointCelsius(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED double ThermoElectricWrapper_getSetPointMinimumCelsius(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED double ThermoElectricWrapper_getSetPointMaximumCelsius(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED double ThermoElectricWrapper_getSetPointIncrementCelsius(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED short ThermoElectricWrapper_isSaveTECStateEnabled(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED void ThermoElectricWrapper_saveTECState(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED void ThermoElectricWrapper_Destroy(THERMOELECTRICWRAPPER_T thermo_electric_wrapper);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED THERMOELECTRICWRAPPER_T STDCALL ThermoElectricWrapper_Create_stdcall_1(THERMOELECTRIC_T thermoElectric);
	EXPORTED int STDCALL ThermoElectricWrapper_getSaturationIntensity_stdcall(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED short STDCALL ThermoElectricWrapper_setSaturationIntensity_stdcall(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper, int saturationIntensity, JSTRING_T key);
	EXPORTED void STDCALL ThermoElectricWrapper_setTECEnable_stdcall(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper, short enable);
	EXPORTED short STDCALL ThermoElectricWrapper_getTECEnable_stdcall(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED void STDCALL ThermoElectricWrapper_setFanEnable_stdcall(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper, short enable);
	EXPORTED short STDCALL ThermoElectricWrapper_getFanEnable_stdcall(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED double STDCALL ThermoElectricWrapper_getDetectorTemperatureCelsius_stdcall(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED double STDCALL ThermoElectricWrapper_getDetectorTemperatureSetPointCelsius_stdcall(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED void STDCALL ThermoElectricWrapper_setDetectorSetPointCelsius_stdcall(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper, double point);
	EXPORTED double STDCALL ThermoElectricWrapper_getDetectorSetPointCelsius_stdcall(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED double STDCALL ThermoElectricWrapper_getSetPointMinimumCelsius_stdcall(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED double STDCALL ThermoElectricWrapper_getSetPointMaximumCelsius_stdcall(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED double STDCALL ThermoElectricWrapper_getSetPointIncrementCelsius_stdcall(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED short STDCALL ThermoElectricWrapper_isSaveTECStateEnabled_stdcall(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED void STDCALL ThermoElectricWrapper_saveTECState_stdcall(THERMOELECTRICWRAPPER_T c_thermo_electric_wrapper);
	EXPORTED void STDCALL ThermoElectricWrapper_Destroy_stdcall(THERMOELECTRICWRAPPER_T thermo_electric_wrapper);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* THERMOELECTRICWRAPPER_H */
