/**
 * File: Throughput.h
 * Autogenerated on Fri Mar 23 13:38:41 EDT 2018 based on
 * Throughput.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/throughput/Throughput
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef THROUGHPUT_H
#define THROUGHPUT_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "OBPSpectrumArray.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class OBPSpectrumArray;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED Throughput : public BaseJavaClass // CPPClass.tag001
{
public: 
	void setSpectraCount(int param0);
	short getBufferEnable();
	void setBufferEnable(short param0);
	void clearBuffer();
	void setB2BCapacity(int param0);
	int getB2BCapacity();
	void requestSpectrumWithMetaData(int param0);
	OBPSpectrumArray getSpectrumWithMetaData(int param0);
	void setIntegration(int param0);
	int getIntegration();
	~Throughput();
	// No public default Java constructor; creating one:
	Throughput();
	// No public Java copy constructor; creating one:
	Throughput(const Throughput &that);
	// Creating assignment operator declaration:
	Throughput &operator=(const Throughput &that);

private:
	jmethodID mid_setSpectraCount2247;
	jmethodID mid_getBufferEnable2248;
	jmethodID mid_setBufferEnable2249;
	jmethodID mid_clearBuffer2250;
	jmethodID mid_setB2BCapacity2251;
	jmethodID mid_getB2BCapacity2252;
	jmethodID mid_requestSpectrumWithMetaData2253;
	jmethodID mid_getSpectrumWithMetaData2254;
	jmethodID mid_setIntegration2255;
	jmethodID mid_getIntegration2256;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_OBPSPECTRUMARRAY_T
#define EXTERN_TYPEDEF_OBPSPECTRUMARRAY_T
	typedef void* OBPSPECTRUMARRAY_T;
#endif /* EXTERN_TYPEDEF_OBPSPECTRUMARRAY_T */
#ifndef EXTERN_TYPEDEF_THROUGHPUT_T
#define EXTERN_TYPEDEF_THROUGHPUT_T
	typedef void* THROUGHPUT_T;
#endif /* EXTERN_TYPEDEF_THROUGHPUT_T */

	// No public default Java constructor; creating one:
	EXPORTED THROUGHPUT_T Throughput_Create();
	EXPORTED void Throughput_setSpectraCount(THROUGHPUT_T c_throughput, int param0);
	EXPORTED short Throughput_getBufferEnable(THROUGHPUT_T c_throughput);
	EXPORTED void Throughput_setBufferEnable(THROUGHPUT_T c_throughput, short param0);
	EXPORTED void Throughput_clearBuffer(THROUGHPUT_T c_throughput);
	EXPORTED void Throughput_setB2BCapacity(THROUGHPUT_T c_throughput, int param0);
	EXPORTED int Throughput_getB2BCapacity(THROUGHPUT_T c_throughput);
	EXPORTED void Throughput_requestSpectrumWithMetaData(THROUGHPUT_T c_throughput, int param0);
	EXPORTED void Throughput_getSpectrumWithMetaData(THROUGHPUT_T c_throughput, int param0, OBPSPECTRUMARRAY_T retval);
	EXPORTED void Throughput_setIntegration(THROUGHPUT_T c_throughput, int param0);
	EXPORTED int Throughput_getIntegration(THROUGHPUT_T c_throughput);
	EXPORTED void Throughput_Destroy(THROUGHPUT_T throughput);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED void STDCALL Throughput_setSpectraCount_stdcall(THROUGHPUT_T c_throughput, int param0);
	EXPORTED short STDCALL Throughput_getBufferEnable_stdcall(THROUGHPUT_T c_throughput);
	EXPORTED void STDCALL Throughput_setBufferEnable_stdcall(THROUGHPUT_T c_throughput, short param0);
	EXPORTED void STDCALL Throughput_clearBuffer_stdcall(THROUGHPUT_T c_throughput);
	EXPORTED void STDCALL Throughput_setB2BCapacity_stdcall(THROUGHPUT_T c_throughput, int param0);
	EXPORTED int STDCALL Throughput_getB2BCapacity_stdcall(THROUGHPUT_T c_throughput);
	EXPORTED void STDCALL Throughput_requestSpectrumWithMetaData_stdcall(THROUGHPUT_T c_throughput, int param0);
	EXPORTED void STDCALL Throughput_getSpectrumWithMetaData_stdcall(THROUGHPUT_T c_throughput, int param0, OBPSPECTRUMARRAY_T retval);
	EXPORTED void STDCALL Throughput_setIntegration_stdcall(THROUGHPUT_T c_throughput, int param0);
	EXPORTED int STDCALL Throughput_getIntegration_stdcall(THROUGHPUT_T c_throughput);
	EXPORTED void STDCALL Throughput_Destroy_stdcall(THROUGHPUT_T throughput);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* THROUGHPUT_H */
