/**
 * File: BlazeConfiguration.h
 * Autogenerated on Mon Mar 13 20:24:14 EDT 2017 based on
 * BlazeConfiguration.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/blaze/BlazeConfiguration
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef BLAZECONFIGURATION_H
#define BLAZECONFIGURATION_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "Configuration.h"
#include "Spectrometer.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class Configuration;
class Spectrometer;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED BlazeConfiguration : public Configuration // CPPClass.tag001
{
public: 
	BlazeConfiguration(Spectrometer& spec);
	void getConfigurationFromSpectrometer();
	void setConfigurationToSpectrometer();
	short isBenchDefined();
	short isCPLDVersionDefined();
	short isDetectorSerialNumberDefined();
	short isSpectrometerConfigurationDefined();
	~BlazeConfiguration();
	// No public default Java constructor; creating one:
	BlazeConfiguration();
	// No public Java copy constructor; creating one:
	BlazeConfiguration(const BlazeConfiguration &that);
	// Creating assignment operator declaration:
	BlazeConfiguration &operator=(const BlazeConfiguration &that);

private:
	jmethodID mid_BlazeConfiguration2996;
	jmethodID mid_getConfigurationFromSpectrometer2997;
	jmethodID mid_setConfigurationToSpectrometer2998;
	jmethodID mid_isBenchDefined2999;
	jmethodID mid_isCPLDVersionDefined3000;
	jmethodID mid_isDetectorSerialNumberDefined3001;
	jmethodID mid_isSpectrometerConfigurationDefined3002;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_CONFIGURATION_T
#define EXTERN_TYPEDEF_CONFIGURATION_T
	typedef void* CONFIGURATION_T;
#endif /* EXTERN_TYPEDEF_CONFIGURATION_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETER_T
#define EXTERN_TYPEDEF_SPECTROMETER_T
	typedef void* SPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_BLAZECONFIGURATION_T
#define EXTERN_TYPEDEF_BLAZECONFIGURATION_T
	typedef void* BLAZECONFIGURATION_T;
#endif /* EXTERN_TYPEDEF_BLAZECONFIGURATION_T */

	// No public default Java constructor; creating one:
	EXPORTED BLAZECONFIGURATION_T BlazeConfiguration_Create();
	EXPORTED BLAZECONFIGURATION_T BlazeConfiguration_Create_1(SPECTROMETER_T spec);
	EXPORTED void BlazeConfiguration_getConfigurationFromSpectrometer(BLAZECONFIGURATION_T c_blaze_configuration);
	EXPORTED void BlazeConfiguration_setConfigurationToSpectrometer(BLAZECONFIGURATION_T c_blaze_configuration);
	EXPORTED short BlazeConfiguration_isBenchDefined(BLAZECONFIGURATION_T c_blaze_configuration);
	EXPORTED short BlazeConfiguration_isCPLDVersionDefined(BLAZECONFIGURATION_T c_blaze_configuration);
	EXPORTED short BlazeConfiguration_isDetectorSerialNumberDefined(BLAZECONFIGURATION_T c_blaze_configuration);
	EXPORTED short BlazeConfiguration_isSpectrometerConfigurationDefined(BLAZECONFIGURATION_T c_blaze_configuration);
	EXPORTED void BlazeConfiguration_Destroy(BLAZECONFIGURATION_T blaze_configuration);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED BLAZECONFIGURATION_T STDCALL BlazeConfiguration_Create_stdcall_1(SPECTROMETER_T spec);
	EXPORTED void STDCALL BlazeConfiguration_getConfigurationFromSpectrometer_stdcall(BLAZECONFIGURATION_T c_blaze_configuration);
	EXPORTED void STDCALL BlazeConfiguration_setConfigurationToSpectrometer_stdcall(BLAZECONFIGURATION_T c_blaze_configuration);
	EXPORTED short STDCALL BlazeConfiguration_isBenchDefined_stdcall(BLAZECONFIGURATION_T c_blaze_configuration);
	EXPORTED short STDCALL BlazeConfiguration_isCPLDVersionDefined_stdcall(BLAZECONFIGURATION_T c_blaze_configuration);
	EXPORTED short STDCALL BlazeConfiguration_isDetectorSerialNumberDefined_stdcall(BLAZECONFIGURATION_T c_blaze_configuration);
	EXPORTED short STDCALL BlazeConfiguration_isSpectrometerConfigurationDefined_stdcall(BLAZECONFIGURATION_T c_blaze_configuration);
	EXPORTED void STDCALL BlazeConfiguration_Destroy_stdcall(BLAZECONFIGURATION_T blaze_configuration);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* BLAZECONFIGURATION_H */
