/**
 * File: CCDTemperatureImpl.h
 * Autogenerated on Fri Mar 23 13:38:57 EDT 2018 based on
 * CCDTemperatureImpl.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/mmsraman/features/ccdtemperature/CCDTemperatureImpl
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef CCDTEMPERATUREIMPL_H
#define CCDTEMPERATUREIMPL_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBFeature.h"
#include "USBInterface.h"
#include "MMSRamanSpectrometer.h"
#include "JString.h"
#include "JStringArray.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBFeature;
class USBInterface;
class MMSRamanSpectrometer;
class JString;
class JStringArray;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED CCDTemperatureImpl : public USBFeature // CPPClass.tag001
{
public: 
	CCDTemperatureImpl(USBInterface& usbInt, MMSRamanSpectrometer& spec);
	void getCCDTemperatureInfo();
	void setCCDTemperatureInfo(short regulation, float setpoint);
	void setTemperatureRegulation(short regulation);
	short isTemperatureRegulation();
	float getCCDSetpoint();
	void setCCDSetpoint(float setpoint);
	int getMinimumCCDSetpoint();
	void setMinimumCCDSetpoint(int min);
	int getMaximumCCDSetpoint();
	void setMaximumCCDSetpoint(int max);
	float getThermistor();
	short isThermFault();
	short isTempLock();
	JString toString();
	JStringArray getFeatureGUIClassnames();
	~CCDTemperatureImpl();
	// No public default Java constructor; creating one:
	CCDTemperatureImpl();
	// No public Java copy constructor; creating one:
	CCDTemperatureImpl(const CCDTemperatureImpl &that);
	// Creating assignment operator declaration:
	CCDTemperatureImpl &operator=(const CCDTemperatureImpl &that);

private:
	jmethodID mid_CCDTemperatureImpl4208;
	jmethodID mid_getCCDTemperatureInfo4209;
	jmethodID mid_setCCDTemperatureInfo4210;
	jmethodID mid_setTemperatureRegulation4211;
	jmethodID mid_isTemperatureRegulation4212;
	jmethodID mid_getCCDSetpoint4213;
	jmethodID mid_setCCDSetpoint4214;
	jmethodID mid_getMinimumCCDSetpoint4215;
	jmethodID mid_setMinimumCCDSetpoint4216;
	jmethodID mid_getMaximumCCDSetpoint4217;
	jmethodID mid_setMaximumCCDSetpoint4218;
	jmethodID mid_getThermistor4219;
	jmethodID mid_isThermFault4220;
	jmethodID mid_isTempLock4221;
	jmethodID mid_toString4222;
	jmethodID mid_getFeatureGUIClassnames4223;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBFEATURE_T
#define EXTERN_TYPEDEF_USBFEATURE_T
	typedef void* USBFEATURE_T;
#endif /* EXTERN_TYPEDEF_USBFEATURE_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_MMSRAMANSPECTROMETER_T
#define EXTERN_TYPEDEF_MMSRAMANSPECTROMETER_T
	typedef void* MMSRAMANSPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_MMSRAMANSPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_JSTRINGARRAY_T
#define EXTERN_TYPEDEF_JSTRINGARRAY_T
	typedef void* JSTRINGARRAY_T;
#endif /* EXTERN_TYPEDEF_JSTRINGARRAY_T */
#ifndef EXTERN_TYPEDEF_CCDTEMPERATUREIMPL_T
#define EXTERN_TYPEDEF_CCDTEMPERATUREIMPL_T
	typedef void* CCDTEMPERATUREIMPL_T;
#endif /* EXTERN_TYPEDEF_CCDTEMPERATUREIMPL_T */

	// No public default Java constructor; creating one:
	EXPORTED CCDTEMPERATUREIMPL_T CCDTemperatureImpl_Create();
	EXPORTED CCDTEMPERATUREIMPL_T CCDTemperatureImpl_Create_1(USBINTERFACE_T usbInt, MMSRAMANSPECTROMETER_T spec);
	EXPORTED void CCDTemperatureImpl_getCCDTemperatureInfo(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl);
	EXPORTED void CCDTemperatureImpl_setCCDTemperatureInfo(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl, short regulation, float setpoint);
	EXPORTED void CCDTemperatureImpl_setTemperatureRegulation(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl, short regulation);
	EXPORTED short CCDTemperatureImpl_isTemperatureRegulation(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl);
	EXPORTED float CCDTemperatureImpl_getCCDSetpoint(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl);
	EXPORTED void CCDTemperatureImpl_setCCDSetpoint(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl, float setpoint);
	EXPORTED int CCDTemperatureImpl_getMinimumCCDSetpoint(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl);
	EXPORTED void CCDTemperatureImpl_setMinimumCCDSetpoint(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl, int min);
	EXPORTED int CCDTemperatureImpl_getMaximumCCDSetpoint(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl);
	EXPORTED void CCDTemperatureImpl_setMaximumCCDSetpoint(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl, int max);
	EXPORTED float CCDTemperatureImpl_getThermistor(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl);
	EXPORTED short CCDTemperatureImpl_isThermFault(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl);
	EXPORTED short CCDTemperatureImpl_isTempLock(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl);
	EXPORTED void CCDTemperatureImpl_toString(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl, JSTRING_T retval);
	EXPORTED void CCDTemperatureImpl_getFeatureGUIClassnames(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl, JSTRINGARRAY_T retval);
	EXPORTED void CCDTemperatureImpl_Destroy(CCDTEMPERATUREIMPL_T ccdtemperatureimpl);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED CCDTEMPERATUREIMPL_T STDCALL CCDTemperatureImpl_Create_stdcall_1(USBINTERFACE_T usbInt, MMSRAMANSPECTROMETER_T spec);
	EXPORTED void STDCALL CCDTemperatureImpl_getCCDTemperatureInfo_stdcall(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl);
	EXPORTED void STDCALL CCDTemperatureImpl_setCCDTemperatureInfo_stdcall(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl, short regulation, float setpoint);
	EXPORTED void STDCALL CCDTemperatureImpl_setTemperatureRegulation_stdcall(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl, short regulation);
	EXPORTED short STDCALL CCDTemperatureImpl_isTemperatureRegulation_stdcall(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl);
	EXPORTED float STDCALL CCDTemperatureImpl_getCCDSetpoint_stdcall(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl);
	EXPORTED void STDCALL CCDTemperatureImpl_setCCDSetpoint_stdcall(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl, float setpoint);
	EXPORTED int STDCALL CCDTemperatureImpl_getMinimumCCDSetpoint_stdcall(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl);
	EXPORTED void STDCALL CCDTemperatureImpl_setMinimumCCDSetpoint_stdcall(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl, int min);
	EXPORTED int STDCALL CCDTemperatureImpl_getMaximumCCDSetpoint_stdcall(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl);
	EXPORTED void STDCALL CCDTemperatureImpl_setMaximumCCDSetpoint_stdcall(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl, int max);
	EXPORTED float STDCALL CCDTemperatureImpl_getThermistor_stdcall(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl);
	EXPORTED short STDCALL CCDTemperatureImpl_isThermFault_stdcall(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl);
	EXPORTED short STDCALL CCDTemperatureImpl_isTempLock_stdcall(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl);
	EXPORTED void STDCALL CCDTemperatureImpl_toString_stdcall(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl, JSTRING_T retval);
	EXPORTED void STDCALL CCDTemperatureImpl_getFeatureGUIClassnames_stdcall(CCDTEMPERATUREIMPL_T c_ccdtemperatureimpl, JSTRINGARRAY_T retval);
	EXPORTED void STDCALL CCDTemperatureImpl_Destroy_stdcall(CCDTEMPERATUREIMPL_T ccdtemperatureimpl);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* CCDTEMPERATUREIMPL_H */
