/**
 * File: OceanSPIImpl.h
 * Autogenerated on Fri Mar 23 13:38:39 EDT 2018 based on
 * OceanSPIImpl.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/oceanspi/OceanSPIImpl
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef OCEANSPIIMPL_H
#define OCEANSPIIMPL_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBFeature.h"
#include "OceanBinaryProtocolProvider.h"
#include "USBInterface.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBFeature;
class OceanBinaryProtocolProvider;
class USBInterface;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED OceanSPIImpl : public USBFeature // CPPClass.tag001
{
public: 
	OceanSPIImpl(OceanBinaryProtocolProvider& device, USBInterface& usbInt);
	CharArray getSPIBytes(CharArray& message, int length);
	int getNumberOfBuses();
	int getNumberOfChipSelects(int busIndex);
	int getMaxMasterFrequency(int busIndex);
	int getMaxSlaveFrequency(int busIndex);
	int getBusControllerMode(int busIndex);
	int getBusTransferMode(int busIndex, int chipIndex);
	int getPolarity(int busIndex, int chipIndex);
	int getChipSelectDelay(int busIndex);
	int getBusWaitStateDelay(int busIndex);
	void setClockSpeed(int busIndex, int speed);
	void setBusControllerMode(int busIndex, int busMode);
	void setBusTransferMode(int busIndex, int chipIndex, int busMode);
	void setPolarity(int busIndex, int chipIndex, int polarity);
	void setChipSelectDelay(int busIndex, int delay);
	void setBusWaitStateDelay(int busIndex, int period);
	void saveSPISettings();
	~OceanSPIImpl();
	// No public default Java constructor; creating one:
	OceanSPIImpl();
	// No public Java copy constructor; creating one:
	OceanSPIImpl(const OceanSPIImpl &that);
	// Creating assignment operator declaration:
	OceanSPIImpl &operator=(const OceanSPIImpl &that);

private:
	jmethodID mid_OceanSPIImpl1914;
	jmethodID mid_getSPIBytes1915;
	jmethodID mid_getNumberOfBuses1916;
	jmethodID mid_getNumberOfChipSelects1917;
	jmethodID mid_getMaxMasterFrequency1918;
	jmethodID mid_getMaxSlaveFrequency1919;
	jmethodID mid_getBusControllerMode1920;
	jmethodID mid_getBusTransferMode1921;
	jmethodID mid_getPolarity1922;
	jmethodID mid_getChipSelectDelay1923;
	jmethodID mid_getBusWaitStateDelay1924;
	jmethodID mid_setClockSpeed1925;
	jmethodID mid_setBusControllerMode1926;
	jmethodID mid_setBusTransferMode1927;
	jmethodID mid_setPolarity1928;
	jmethodID mid_setChipSelectDelay1929;
	jmethodID mid_setBusWaitStateDelay1930;
	jmethodID mid_saveSPISettings1931;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBFEATURE_T
#define EXTERN_TYPEDEF_USBFEATURE_T
	typedef void* USBFEATURE_T;
#endif /* EXTERN_TYPEDEF_USBFEATURE_T */
#ifndef EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T
#define EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T
	typedef void* OCEANBINARYPROTOCOLPROVIDER_T;
#endif /* EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_OCEANSPIIMPL_T
#define EXTERN_TYPEDEF_OCEANSPIIMPL_T
	typedef void* OCEANSPIIMPL_T;
#endif /* EXTERN_TYPEDEF_OCEANSPIIMPL_T */

	// No public default Java constructor; creating one:
	EXPORTED OCEANSPIIMPL_T OceanSPIImpl_Create();
	EXPORTED OCEANSPIIMPL_T OceanSPIImpl_Create_1(OCEANBINARYPROTOCOLPROVIDER_T device, USBINTERFACE_T usbInt);
	EXPORTED void OceanSPIImpl_getSPIBytes(OCEANSPIIMPL_T c_ocean_s_p_i_impl, CHARARRAY_T message, int length, CHARARRAY_T retval);
	EXPORTED int OceanSPIImpl_getNumberOfBuses(OCEANSPIIMPL_T c_ocean_s_p_i_impl);
	EXPORTED int OceanSPIImpl_getNumberOfChipSelects(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex);
	EXPORTED int OceanSPIImpl_getMaxMasterFrequency(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex);
	EXPORTED int OceanSPIImpl_getMaxSlaveFrequency(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex);
	EXPORTED int OceanSPIImpl_getBusControllerMode(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex);
	EXPORTED int OceanSPIImpl_getBusTransferMode(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex, int chipIndex);
	EXPORTED int OceanSPIImpl_getPolarity(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex, int chipIndex);
	EXPORTED int OceanSPIImpl_getChipSelectDelay(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex);
	EXPORTED int OceanSPIImpl_getBusWaitStateDelay(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex);
	EXPORTED void OceanSPIImpl_setClockSpeed(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex, int speed);
	EXPORTED void OceanSPIImpl_setBusControllerMode(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex, int busMode);
	EXPORTED void OceanSPIImpl_setBusTransferMode(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex, int chipIndex, int busMode);
	EXPORTED void OceanSPIImpl_setPolarity(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex, int chipIndex, int polarity);
	EXPORTED void OceanSPIImpl_setChipSelectDelay(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex, int delay);
	EXPORTED void OceanSPIImpl_setBusWaitStateDelay(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex, int period);
	EXPORTED void OceanSPIImpl_saveSPISettings(OCEANSPIIMPL_T c_ocean_s_p_i_impl);
	EXPORTED void OceanSPIImpl_Destroy(OCEANSPIIMPL_T ocean_s_p_i_impl);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED OCEANSPIIMPL_T STDCALL OceanSPIImpl_Create_stdcall_1(OCEANBINARYPROTOCOLPROVIDER_T device, USBINTERFACE_T usbInt);
	EXPORTED void STDCALL OceanSPIImpl_getSPIBytes_stdcall(OCEANSPIIMPL_T c_ocean_s_p_i_impl, CHARARRAY_T message, int length, CHARARRAY_T retval);
	EXPORTED int STDCALL OceanSPIImpl_getNumberOfBuses_stdcall(OCEANSPIIMPL_T c_ocean_s_p_i_impl);
	EXPORTED int STDCALL OceanSPIImpl_getNumberOfChipSelects_stdcall(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex);
	EXPORTED int STDCALL OceanSPIImpl_getMaxMasterFrequency_stdcall(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex);
	EXPORTED int STDCALL OceanSPIImpl_getMaxSlaveFrequency_stdcall(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex);
	EXPORTED int STDCALL OceanSPIImpl_getBusControllerMode_stdcall(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex);
	EXPORTED int STDCALL OceanSPIImpl_getBusTransferMode_stdcall(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex, int chipIndex);
	EXPORTED int STDCALL OceanSPIImpl_getPolarity_stdcall(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex, int chipIndex);
	EXPORTED int STDCALL OceanSPIImpl_getChipSelectDelay_stdcall(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex);
	EXPORTED int STDCALL OceanSPIImpl_getBusWaitStateDelay_stdcall(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex);
	EXPORTED void STDCALL OceanSPIImpl_setClockSpeed_stdcall(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex, int speed);
	EXPORTED void STDCALL OceanSPIImpl_setBusControllerMode_stdcall(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex, int busMode);
	EXPORTED void STDCALL OceanSPIImpl_setBusTransferMode_stdcall(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex, int chipIndex, int busMode);
	EXPORTED void STDCALL OceanSPIImpl_setPolarity_stdcall(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex, int chipIndex, int polarity);
	EXPORTED void STDCALL OceanSPIImpl_setChipSelectDelay_stdcall(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex, int delay);
	EXPORTED void STDCALL OceanSPIImpl_setBusWaitStateDelay_stdcall(OCEANSPIIMPL_T c_ocean_s_p_i_impl, int busIndex, int period);
	EXPORTED void STDCALL OceanSPIImpl_saveSPISettings_stdcall(OCEANSPIIMPL_T c_ocean_s_p_i_impl);
	EXPORTED void STDCALL OceanSPIImpl_Destroy_stdcall(OCEANSPIIMPL_T ocean_s_p_i_impl);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* OCEANSPIIMPL_H */
