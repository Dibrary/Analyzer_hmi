/**
 * File: BaseSpecFunctionality.h
 * Autogenerated on Fri Mar 23 13:38:43 EDT 2018 based on
 * BaseSpecFunctionality.java
 * for the Java class
 * com/oceanoptics/omnidriver/interfaces/BaseSpecFunctionality
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef BASESPECFUNCTIONALITY_H
#define BASESPECFUNCTIONALITY_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "SpectrometerChannelArray.h"
#include "JString.h"
#include "Spectrum.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class SpectrometerChannelArray;
class JString;
class Spectrum;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED BaseSpecFunctionality : public BaseJavaClass // CPPClass.tag001
{
public: 
	void closeSpectrometer();
	int getActualIntegrationTime();
	SpectrometerChannelArray getChannels();
	JString getClassName();
	int getDeviceIndex();
	short isStabilityScan();
	Spectrum getSpectrum(Spectrum& param0);
	JString getFirmwareVersion();
	int getFirmwareVersionNumber();
	JString getInfo(int param0);
	int getIntegrationTimeBase();
	int getIntegrationTimeIncrement();
	int getIntegrationTimeMaximum();
	int getIntegrationTimeMinimum();
	int getMaxIntensity();
	JString getName();
	JString getSerialNumber();
	void initialize();
	void openNextUnclaimed();
	void openSpectrometer(int param0);
	void getCoefficientsFromSpectrometer();
	void getConfigurationFromSpectrometer();
	void setStabilityScan(short param0);
	void setInfo(int param0, JString& param1);
	void setIntegrationTime(int param0);
	void setPowerState(short param0);
	void setStrobeEnable(short param0);
	void setStrobeDelay(int param0);
	void setCoefficients();
	void setConfiguration();
	short isStrobeDelayEnabled();
	CharArray readRawUSB(int param0, int param1);
	int writeRawUSB(int param0, CharArray& param1, int param2);
	~BaseSpecFunctionality();
	// No public default Java constructor; creating one:
	BaseSpecFunctionality();
	// No public Java copy constructor; creating one:
	BaseSpecFunctionality(const BaseSpecFunctionality &that);
	// Creating assignment operator declaration:
	BaseSpecFunctionality &operator=(const BaseSpecFunctionality &that);

private:
	jmethodID mid_closeSpectrometer2491;
	jmethodID mid_getActualIntegrationTime2492;
	jmethodID mid_getChannels2493;
	jmethodID mid_getClassName2494;
	jmethodID mid_getDeviceIndex2495;
	jmethodID mid_isStabilityScan2496;
	jmethodID mid_getSpectrum2497;
	jmethodID mid_getFirmwareVersion2498;
	jmethodID mid_getFirmwareVersionNumber2499;
	jmethodID mid_getInfo2500;
	jmethodID mid_getIntegrationTimeBase2501;
	jmethodID mid_getIntegrationTimeIncrement2502;
	jmethodID mid_getIntegrationTimeMaximum2503;
	jmethodID mid_getIntegrationTimeMinimum2504;
	jmethodID mid_getMaxIntensity2505;
	jmethodID mid_getName2506;
	jmethodID mid_getSerialNumber2507;
	jmethodID mid_initialize2508;
	jmethodID mid_openNextUnclaimed2509;
	jmethodID mid_openSpectrometer2510;
	jmethodID mid_getCoefficientsFromSpectrometer2511;
	jmethodID mid_getConfigurationFromSpectrometer2512;
	jmethodID mid_setStabilityScan2513;
	jmethodID mid_setInfo2514;
	jmethodID mid_setIntegrationTime2515;
	jmethodID mid_setPowerState2516;
	jmethodID mid_setStrobeEnable2517;
	jmethodID mid_setStrobeDelay2518;
	jmethodID mid_setCoefficients2519;
	jmethodID mid_setConfiguration2520;
	jmethodID mid_isStrobeDelayEnabled2521;
	jmethodID mid_readRawUSB2522;
	jmethodID mid_writeRawUSB2523;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_SPECTROMETERCHANNELARRAY_T
#define EXTERN_TYPEDEF_SPECTROMETERCHANNELARRAY_T
	typedef void* SPECTROMETERCHANNELARRAY_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERCHANNELARRAY_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_SPECTRUM_T
#define EXTERN_TYPEDEF_SPECTRUM_T
	typedef void* SPECTRUM_T;
#endif /* EXTERN_TYPEDEF_SPECTRUM_T */
#ifndef EXTERN_TYPEDEF_BASESPECFUNCTIONALITY_T
#define EXTERN_TYPEDEF_BASESPECFUNCTIONALITY_T
	typedef void* BASESPECFUNCTIONALITY_T;
#endif /* EXTERN_TYPEDEF_BASESPECFUNCTIONALITY_T */

	// No public default Java constructor; creating one:
	EXPORTED BASESPECFUNCTIONALITY_T BaseSpecFunctionality_Create();
	EXPORTED void BaseSpecFunctionality_closeSpectrometer(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED int BaseSpecFunctionality_getActualIntegrationTime(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED void BaseSpecFunctionality_getChannels(BASESPECFUNCTIONALITY_T c_base_spec_functionality, SPECTROMETERCHANNELARRAY_T retval);
	EXPORTED void BaseSpecFunctionality_getClassName(BASESPECFUNCTIONALITY_T c_base_spec_functionality, JSTRING_T retval);
	EXPORTED int BaseSpecFunctionality_getDeviceIndex(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED short BaseSpecFunctionality_isStabilityScan(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED void BaseSpecFunctionality_getSpectrum(BASESPECFUNCTIONALITY_T c_base_spec_functionality, SPECTRUM_T param0, SPECTRUM_T retval);
	EXPORTED void BaseSpecFunctionality_getFirmwareVersion(BASESPECFUNCTIONALITY_T c_base_spec_functionality, JSTRING_T retval);
	EXPORTED int BaseSpecFunctionality_getFirmwareVersionNumber(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED void BaseSpecFunctionality_getInfo(BASESPECFUNCTIONALITY_T c_base_spec_functionality, int param0, JSTRING_T retval);
	EXPORTED int BaseSpecFunctionality_getIntegrationTimeBase(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED int BaseSpecFunctionality_getIntegrationTimeIncrement(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED int BaseSpecFunctionality_getIntegrationTimeMaximum(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED int BaseSpecFunctionality_getIntegrationTimeMinimum(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED int BaseSpecFunctionality_getMaxIntensity(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED void BaseSpecFunctionality_getName(BASESPECFUNCTIONALITY_T c_base_spec_functionality, JSTRING_T retval);
	EXPORTED void BaseSpecFunctionality_getSerialNumber(BASESPECFUNCTIONALITY_T c_base_spec_functionality, JSTRING_T retval);
	EXPORTED void BaseSpecFunctionality_initialize(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED void BaseSpecFunctionality_openNextUnclaimed(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED void BaseSpecFunctionality_openSpectrometer(BASESPECFUNCTIONALITY_T c_base_spec_functionality, int param0);
	EXPORTED void BaseSpecFunctionality_getCoefficientsFromSpectrometer(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED void BaseSpecFunctionality_getConfigurationFromSpectrometer(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED void BaseSpecFunctionality_setStabilityScan(BASESPECFUNCTIONALITY_T c_base_spec_functionality, short param0);
	EXPORTED void BaseSpecFunctionality_setInfo(BASESPECFUNCTIONALITY_T c_base_spec_functionality, int param0, JSTRING_T param1);
	EXPORTED void BaseSpecFunctionality_setIntegrationTime(BASESPECFUNCTIONALITY_T c_base_spec_functionality, int param0);
	EXPORTED void BaseSpecFunctionality_setPowerState(BASESPECFUNCTIONALITY_T c_base_spec_functionality, short param0);
	EXPORTED void BaseSpecFunctionality_setStrobeEnable(BASESPECFUNCTIONALITY_T c_base_spec_functionality, short param0);
	EXPORTED void BaseSpecFunctionality_setStrobeDelay(BASESPECFUNCTIONALITY_T c_base_spec_functionality, int param0);
	EXPORTED void BaseSpecFunctionality_setCoefficients(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED void BaseSpecFunctionality_setConfiguration(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED short BaseSpecFunctionality_isStrobeDelayEnabled(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED void BaseSpecFunctionality_readRawUSB(BASESPECFUNCTIONALITY_T c_base_spec_functionality, int param0, int param1, CHARARRAY_T retval);
	EXPORTED int BaseSpecFunctionality_writeRawUSB(BASESPECFUNCTIONALITY_T c_base_spec_functionality, int param0, CHARARRAY_T param1, int param2);
	EXPORTED void BaseSpecFunctionality_Destroy(BASESPECFUNCTIONALITY_T base_spec_functionality);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED void STDCALL BaseSpecFunctionality_closeSpectrometer_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED int STDCALL BaseSpecFunctionality_getActualIntegrationTime_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED void STDCALL BaseSpecFunctionality_getChannels_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality, SPECTROMETERCHANNELARRAY_T retval);
	EXPORTED void STDCALL BaseSpecFunctionality_getClassName_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality, JSTRING_T retval);
	EXPORTED int STDCALL BaseSpecFunctionality_getDeviceIndex_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED short STDCALL BaseSpecFunctionality_isStabilityScan_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED void STDCALL BaseSpecFunctionality_getSpectrum_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality, SPECTRUM_T param0, SPECTRUM_T retval);
	EXPORTED void STDCALL BaseSpecFunctionality_getFirmwareVersion_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality, JSTRING_T retval);
	EXPORTED int STDCALL BaseSpecFunctionality_getFirmwareVersionNumber_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED void STDCALL BaseSpecFunctionality_getInfo_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality, int param0, JSTRING_T retval);
	EXPORTED int STDCALL BaseSpecFunctionality_getIntegrationTimeBase_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED int STDCALL BaseSpecFunctionality_getIntegrationTimeIncrement_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED int STDCALL BaseSpecFunctionality_getIntegrationTimeMaximum_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED int STDCALL BaseSpecFunctionality_getIntegrationTimeMinimum_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED int STDCALL BaseSpecFunctionality_getMaxIntensity_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED void STDCALL BaseSpecFunctionality_getName_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality, JSTRING_T retval);
	EXPORTED void STDCALL BaseSpecFunctionality_getSerialNumber_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality, JSTRING_T retval);
	EXPORTED void STDCALL BaseSpecFunctionality_initialize_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED void STDCALL BaseSpecFunctionality_openNextUnclaimed_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED void STDCALL BaseSpecFunctionality_openSpectrometer_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality, int param0);
	EXPORTED void STDCALL BaseSpecFunctionality_getCoefficientsFromSpectrometer_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED void STDCALL BaseSpecFunctionality_getConfigurationFromSpectrometer_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED void STDCALL BaseSpecFunctionality_setStabilityScan_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality, short param0);
	EXPORTED void STDCALL BaseSpecFunctionality_setInfo_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality, int param0, JSTRING_T param1);
	EXPORTED void STDCALL BaseSpecFunctionality_setIntegrationTime_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality, int param0);
	EXPORTED void STDCALL BaseSpecFunctionality_setPowerState_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality, short param0);
	EXPORTED void STDCALL BaseSpecFunctionality_setStrobeEnable_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality, short param0);
	EXPORTED void STDCALL BaseSpecFunctionality_setStrobeDelay_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality, int param0);
	EXPORTED void STDCALL BaseSpecFunctionality_setCoefficients_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED void STDCALL BaseSpecFunctionality_setConfiguration_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED short STDCALL BaseSpecFunctionality_isStrobeDelayEnabled_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality);
	EXPORTED void STDCALL BaseSpecFunctionality_readRawUSB_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality, int param0, int param1, CHARARRAY_T retval);
	EXPORTED int STDCALL BaseSpecFunctionality_writeRawUSB_stdcall(BASESPECFUNCTIONALITY_T c_base_spec_functionality, int param0, CHARARRAY_T param1, int param2);
	EXPORTED void STDCALL BaseSpecFunctionality_Destroy_stdcall(BASESPECFUNCTIONALITY_T base_spec_functionality);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* BASESPECFUNCTIONALITY_H */
