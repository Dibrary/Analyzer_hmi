/**
 * File: ExposureListener.h
 * Autogenerated on Fri Mar 23 13:38:33 EDT 2018 based on
 * ExposureListener.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/exposureimage/ExposureListener
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef EXPOSURELISTENER_H
#define EXPOSURELISTENER_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "SpectrometerExposure.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class SpectrometerExposure;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED ExposureListener : public BaseJavaClass // CPPClass.tag001
{
public: 
	void newSpectrometerExposure(SpectrometerExposure& param0);
	~ExposureListener();
	// No public default Java constructor; creating one:
	ExposureListener();
	// No public Java copy constructor; creating one:
	ExposureListener(const ExposureListener &that);
	// Creating assignment operator declaration:
	ExposureListener &operator=(const ExposureListener &that);

private:
	jmethodID mid_newSpectrometerExposure1193;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_SPECTROMETEREXPOSURE_T
#define EXTERN_TYPEDEF_SPECTROMETEREXPOSURE_T
	typedef void* SPECTROMETEREXPOSURE_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETEREXPOSURE_T */
#ifndef EXTERN_TYPEDEF_EXPOSURELISTENER_T
#define EXTERN_TYPEDEF_EXPOSURELISTENER_T
	typedef void* EXPOSURELISTENER_T;
#endif /* EXTERN_TYPEDEF_EXPOSURELISTENER_T */

	// No public default Java constructor; creating one:
	EXPORTED EXPOSURELISTENER_T ExposureListener_Create();
	EXPORTED void ExposureListener_newSpectrometerExposure(EXPOSURELISTENER_T c_exposure_listener, SPECTROMETEREXPOSURE_T param0);
	EXPORTED void ExposureListener_Destroy(EXPOSURELISTENER_T exposure_listener);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED void STDCALL ExposureListener_newSpectrometerExposure_stdcall(EXPOSURELISTENER_T c_exposure_listener, SPECTROMETEREXPOSURE_T param0);
	EXPORTED void STDCALL ExposureListener_Destroy_stdcall(EXPOSURELISTENER_T exposure_listener);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* EXPOSURELISTENER_H */
