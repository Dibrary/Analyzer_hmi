/**
 * File: IrradianceCalibrationFactorImpl_QEPro.h
 * Autogenerated on Fri Mar 23 13:38:37 EDT 2018 based on
 * IrradianceCalibrationFactorImpl_QEPro.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/irradiancecalibrationfactor/IrradianceCalibrationFactorImpl_QEPro
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_H
#define IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "IrradianceCalibrationFactorImpl.h"
#include "QEPro.h"
#include "USBInterface.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class IrradianceCalibrationFactorImpl;
class QEPro;
class USBInterface;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED IrradianceCalibrationFactorImpl_QEPro : public IrradianceCalibrationFactorImpl // CPPClass.tag001
{
public: 
	IrradianceCalibrationFactorImpl_QEPro(QEPro& qe, USBInterface& usb);
	DoubleArray getIrradianceCalibrationFactors();
	void setIrradianceCalibrationFactors(DoubleArray& data);
	double getCollectionArea();
	void setCollectionArea(double area);
	short hasCollectionArea();
	~IrradianceCalibrationFactorImpl_QEPro();
	// No public default Java constructor; creating one:
	IrradianceCalibrationFactorImpl_QEPro();
	// No public Java copy constructor; creating one:
	IrradianceCalibrationFactorImpl_QEPro(const IrradianceCalibrationFactorImpl_QEPro &that);
	// Creating assignment operator declaration:
	IrradianceCalibrationFactorImpl_QEPro &operator=(const IrradianceCalibrationFactorImpl_QEPro &that);

private:
	jmethodID mid_IrradianceCalibrationFactorImpl_QEPro1628;
	jmethodID mid_getIrradianceCalibrationFactors1629;
	jmethodID mid_setIrradianceCalibrationFactors1630;
	jmethodID mid_getCollectionArea1631;
	jmethodID mid_setCollectionArea1632;
	jmethodID mid_hasCollectionArea1633;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTORIMPL_T
#define EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTORIMPL_T
	typedef void* IRRADIANCECALIBRATIONFACTORIMPL_T;
#endif /* EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTORIMPL_T */
#ifndef EXTERN_TYPEDEF_QEPRO_T
#define EXTERN_TYPEDEF_QEPRO_T
	typedef void* QEPRO_T;
#endif /* EXTERN_TYPEDEF_QEPRO_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_T
#define EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_T
	typedef void* IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_T;
#endif /* EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_T */

	// No public default Java constructor; creating one:
	EXPORTED IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_T IrradianceCalibrationFactorImpl_QEPro_Create();
	EXPORTED IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_T IrradianceCalibrationFactorImpl_QEPro_Create_1(QEPRO_T qe, USBINTERFACE_T usb);
	EXPORTED void IrradianceCalibrationFactorImpl_QEPro_getIrradianceCalibrationFactors(IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_T c_irradiance_calibration_factor_impl_q_e_pro, DOUBLEARRAY_T retval);
	EXPORTED void IrradianceCalibrationFactorImpl_QEPro_setIrradianceCalibrationFactors(IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_T c_irradiance_calibration_factor_impl_q_e_pro, DOUBLEARRAY_T data);
	EXPORTED double IrradianceCalibrationFactorImpl_QEPro_getCollectionArea(IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_T c_irradiance_calibration_factor_impl_q_e_pro);
	EXPORTED void IrradianceCalibrationFactorImpl_QEPro_setCollectionArea(IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_T c_irradiance_calibration_factor_impl_q_e_pro, double area);
	EXPORTED short IrradianceCalibrationFactorImpl_QEPro_hasCollectionArea(IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_T c_irradiance_calibration_factor_impl_q_e_pro);
	EXPORTED void IrradianceCalibrationFactorImpl_QEPro_Destroy(IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_T irradiance_calibration_factor_impl_q_e_pro);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_T STDCALL IrradianceCalibrationFactorImpl_QEPro_Create_stdcall_1(QEPRO_T qe, USBINTERFACE_T usb);
	EXPORTED void STDCALL IrradianceCalibrationFactorImpl_QEPro_getIrradianceCalibrationFactors_stdcall(IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_T c_irradiance_calibration_factor_impl_q_e_pro, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL IrradianceCalibrationFactorImpl_QEPro_setIrradianceCalibrationFactors_stdcall(IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_T c_irradiance_calibration_factor_impl_q_e_pro, DOUBLEARRAY_T data);
	EXPORTED double STDCALL IrradianceCalibrationFactorImpl_QEPro_getCollectionArea_stdcall(IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_T c_irradiance_calibration_factor_impl_q_e_pro);
	EXPORTED void STDCALL IrradianceCalibrationFactorImpl_QEPro_setCollectionArea_stdcall(IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_T c_irradiance_calibration_factor_impl_q_e_pro, double area);
	EXPORTED short STDCALL IrradianceCalibrationFactorImpl_QEPro_hasCollectionArea_stdcall(IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_T c_irradiance_calibration_factor_impl_q_e_pro);
	EXPORTED void STDCALL IrradianceCalibrationFactorImpl_QEPro_Destroy_stdcall(IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_T irradiance_calibration_factor_impl_q_e_pro);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* IRRADIANCECALIBRATIONFACTORIMPL_QEPRO_H */
