/**
 * File: SpectrometerFactory.h
 * Autogenerated on Fri Mar 23 13:38:47 EDT 2018 based on
 * SpectrometerFactory.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/SpectrometerFactory
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef SPECTROMETERFACTORY_H
#define SPECTROMETERFACTORY_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "Spectrometer.h"
#include "SpectrometerArray.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class Spectrometer;
class SpectrometerArray;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED SpectrometerFactory : public BaseJavaClass // CPPClass.tag001
{
public: 
	void closeSpectrometer(Spectrometer& spectrometer);
	void closeSpectrometer_NOT_USED_YET(Spectrometer& spectrometer);
	SpectrometerArray getAllAttachedSpectrometers_NOT_USED_YET();
	SpectrometerArray getAllSpectrometers();
	SpectrometerArray getNoSpectrometersLinux64();
	SpectrometerArray getAllSpectrometersLinux64();
	SpectrometerArray getAllUnclaimedSpectrometers();
	~SpectrometerFactory();
	// No public default Java constructor; creating one:
	SpectrometerFactory();
	// No public Java copy constructor; creating one:
	SpectrometerFactory(const SpectrometerFactory &that);
	// Creating assignment operator declaration:
	SpectrometerFactory &operator=(const SpectrometerFactory &that);

private:
	jmethodID mid_closeSpectrometer3016;
	jmethodID mid_closeSpectrometer_NOT_USED_YET3017;
	jmethodID mid_getAllAttachedSpectrometers_NOT_USED_YET3018;
	jmethodID mid_getAllSpectrometers3019;
	jmethodID mid_getNoSpectrometersLinux643020;
	jmethodID mid_getAllSpectrometersLinux643021;
	jmethodID mid_getAllUnclaimedSpectrometers3022;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_SPECTROMETER_T
#define EXTERN_TYPEDEF_SPECTROMETER_T
	typedef void* SPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETERARRAY_T
#define EXTERN_TYPEDEF_SPECTROMETERARRAY_T
	typedef void* SPECTROMETERARRAY_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERARRAY_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETERFACTORY_T
#define EXTERN_TYPEDEF_SPECTROMETERFACTORY_T
	typedef void* SPECTROMETERFACTORY_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERFACTORY_T */

	// No public default Java constructor; creating one:
	EXPORTED SPECTROMETERFACTORY_T SpectrometerFactory_Create();
	EXPORTED void SpectrometerFactory_closeSpectrometer(SPECTROMETERFACTORY_T c_spectrometer_factory, SPECTROMETER_T spectrometer);
	EXPORTED void SpectrometerFactory_closeSpectrometer_NOT_USED_YET(SPECTROMETERFACTORY_T c_spectrometer_factory, SPECTROMETER_T spectrometer);
	EXPORTED void SpectrometerFactory_getAllAttachedSpectrometers_NOT_USED_YET(SPECTROMETERFACTORY_T c_spectrometer_factory, SPECTROMETERARRAY_T retval);
	EXPORTED void SpectrometerFactory_getAllSpectrometers(SPECTROMETERFACTORY_T c_spectrometer_factory, SPECTROMETERARRAY_T retval);
	EXPORTED void SpectrometerFactory_getNoSpectrometersLinux64(SPECTROMETERFACTORY_T c_spectrometer_factory, SPECTROMETERARRAY_T retval);
	EXPORTED void SpectrometerFactory_getAllSpectrometersLinux64(SPECTROMETERFACTORY_T c_spectrometer_factory, SPECTROMETERARRAY_T retval);
	EXPORTED void SpectrometerFactory_getAllUnclaimedSpectrometers(SPECTROMETERFACTORY_T c_spectrometer_factory, SPECTROMETERARRAY_T retval);
	EXPORTED void SpectrometerFactory_Destroy(SPECTROMETERFACTORY_T spectrometer_factory);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED void STDCALL SpectrometerFactory_closeSpectrometer_stdcall(SPECTROMETERFACTORY_T c_spectrometer_factory, SPECTROMETER_T spectrometer);
	EXPORTED void STDCALL SpectrometerFactory_closeSpectrometer_NOT_USED_YET_stdcall(SPECTROMETERFACTORY_T c_spectrometer_factory, SPECTROMETER_T spectrometer);
	EXPORTED void STDCALL SpectrometerFactory_getAllAttachedSpectrometers_NOT_USED_YET_stdcall(SPECTROMETERFACTORY_T c_spectrometer_factory, SPECTROMETERARRAY_T retval);
	EXPORTED void STDCALL SpectrometerFactory_getAllSpectrometers_stdcall(SPECTROMETERFACTORY_T c_spectrometer_factory, SPECTROMETERARRAY_T retval);
	EXPORTED void STDCALL SpectrometerFactory_getNoSpectrometersLinux64_stdcall(SPECTROMETERFACTORY_T c_spectrometer_factory, SPECTROMETERARRAY_T retval);
	EXPORTED void STDCALL SpectrometerFactory_getAllSpectrometersLinux64_stdcall(SPECTROMETERFACTORY_T c_spectrometer_factory, SPECTROMETERARRAY_T retval);
	EXPORTED void STDCALL SpectrometerFactory_getAllUnclaimedSpectrometers_stdcall(SPECTROMETERFACTORY_T c_spectrometer_factory, SPECTROMETERARRAY_T retval);
	EXPORTED void STDCALL SpectrometerFactory_Destroy_stdcall(SPECTROMETERFACTORY_T spectrometer_factory);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* SPECTROMETERFACTORY_H */
