/**
 * File: SpectrometerStatus.h
 * Autogenerated on Fri Mar 23 13:38:47 EDT 2018 based on
 * SpectrometerStatus.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/SpectrometerStatus
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef SPECTROMETERSTATUS_H
#define SPECTROMETERSTATUS_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED SpectrometerStatus : public BaseJavaClass // CPPClass.tag001
{
public: 
	SpectrometerStatus();
	short isLampEnabled();
	short isTakingScan();
	short isDataReady();
	short isFailed();
	int getNumPixels();
	int getIntegrationTime();
	JString toString();
	~SpectrometerStatus();
	// No public Java copy constructor; creating one:
	SpectrometerStatus(const SpectrometerStatus &that);
	// Creating assignment operator declaration:
	SpectrometerStatus &operator=(const SpectrometerStatus &that);
	int externalTriggerMode;
	int timerSwap;
	short lampEnabled;
	short takingScan;
	short dataReady;
	short failed;
	int numPixels;
	int integrationTime;

private:
	jmethodID mid_SpectrometerStatus3023;
	jmethodID mid_isLampEnabled3024;
	jmethodID mid_isTakingScan3025;
	jmethodID mid_isDataReady3026;
	jmethodID mid_isFailed3027;
	jmethodID mid_getNumPixels3028;
	jmethodID mid_getIntegrationTime3029;
	jmethodID mid_toString3030;
	jfieldID fid_externalTriggerMode;
	jfieldID fid_timerSwap;
	jfieldID fid_lampEnabled;
	jfieldID fid_takingScan;
	jfieldID fid_dataReady;
	jfieldID fid_failed;
	jfieldID fid_numPixels;
	jfieldID fid_integrationTime;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETERSTATUS_T
#define EXTERN_TYPEDEF_SPECTROMETERSTATUS_T
	typedef void* SPECTROMETERSTATUS_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERSTATUS_T */

	EXPORTED SPECTROMETERSTATUS_T SpectrometerStatus_Create();
	EXPORTED short SpectrometerStatus_isLampEnabled(SPECTROMETERSTATUS_T c_spectrometer_status);
	EXPORTED short SpectrometerStatus_isTakingScan(SPECTROMETERSTATUS_T c_spectrometer_status);
	EXPORTED short SpectrometerStatus_isDataReady(SPECTROMETERSTATUS_T c_spectrometer_status);
	EXPORTED short SpectrometerStatus_isFailed(SPECTROMETERSTATUS_T c_spectrometer_status);
	EXPORTED int SpectrometerStatus_getNumPixels(SPECTROMETERSTATUS_T c_spectrometer_status);
	EXPORTED int SpectrometerStatus_getIntegrationTime(SPECTROMETERSTATUS_T c_spectrometer_status);
	EXPORTED void SpectrometerStatus_toString(SPECTROMETERSTATUS_T c_spectrometer_status, JSTRING_T retval);
	EXPORTED void SpectrometerStatus_Destroy(SPECTROMETERSTATUS_T spectrometer_status);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED SPECTROMETERSTATUS_T STDCALL SpectrometerStatus_Create_stdcall();
	EXPORTED short STDCALL SpectrometerStatus_isLampEnabled_stdcall(SPECTROMETERSTATUS_T c_spectrometer_status);
	EXPORTED short STDCALL SpectrometerStatus_isTakingScan_stdcall(SPECTROMETERSTATUS_T c_spectrometer_status);
	EXPORTED short STDCALL SpectrometerStatus_isDataReady_stdcall(SPECTROMETERSTATUS_T c_spectrometer_status);
	EXPORTED short STDCALL SpectrometerStatus_isFailed_stdcall(SPECTROMETERSTATUS_T c_spectrometer_status);
	EXPORTED int STDCALL SpectrometerStatus_getNumPixels_stdcall(SPECTROMETERSTATUS_T c_spectrometer_status);
	EXPORTED int STDCALL SpectrometerStatus_getIntegrationTime_stdcall(SPECTROMETERSTATUS_T c_spectrometer_status);
	EXPORTED void STDCALL SpectrometerStatus_toString_stdcall(SPECTROMETERSTATUS_T c_spectrometer_status, JSTRING_T retval);
	EXPORTED void STDCALL SpectrometerStatus_Destroy_stdcall(SPECTROMETERSTATUS_T spectrometer_status);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* SPECTROMETERSTATUS_H */
