/**
 * File: WrapperExtensions.h
 * Autogenerated on Fri Mar 23 13:38:28 EDT 2018 based on
 * WrapperExtensions.java
 * for the Java class
 * com/oceanoptics/omnidriver/api/wrapper/WrapperExtensions
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef WRAPPEREXTENSIONS_H
#define WRAPPEREXTENSIONS_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "I2CBus.h"
#include "JString.h"
#include "AutoNull.h"
#include "Throughput.h"
#include "Battery.h"
#include "AnalogDac.h"
#include "AdvancedVersion.h"
#include "OceanSPI.h"
#include "VIS_NIR_LightSource.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class I2CBus;
class JString;
class AutoNull;
class Throughput;
class Battery;
class AnalogDac;
class AdvancedVersion;
class OceanSPI;
class VIS_NIR_LightSource;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED WrapperExtensions : public BaseJavaClass // CPPClass.tag001
{
public: 
	WrapperExtensions();
	CharArray getI2CBytes(I2CBus& i2cbus, signed char address, signed char numBytes);
	int setI2CBytes(I2CBus& i2cbus, signed char address, signed char numBytes, CharArray& i2C);
	short isSpectrumValid(int spectrometerIndex);
	short isSpectrumValid(int spectrometerIndex, int channelIndex);
	ShortArray getBadPixels(int spectrometerIndex);
	short setBadPixels(int spectrometerIndex, ShortArray& badPixelArray);
	int getNumberOfChannels(int spectrometerIndex);
	int getNumberOfEnabledChannels(int spectrometerIndex);
	short isChannelEnabled(int spectrometerIndex, int channelIndex);
	int getSaturationIntensity(int spectrometerIndex);
	short setSaturationIntensity(int spectrometerIndex, int saturationIntensity);
	short enableRawSpectrumMode();
	void demonstrateArcoptixSpectrometer();
	void disableRawSpectrumMode();
	JString getNetworkInterface();
	int openRemoteSpectrometer(JString& deviceAddress, JString& deviceType);
	AutoNull getFeatureControllerAutonull(int spectrometerIndex);
	short isFeatureSupportedAutonull(int spectrometerIndex);
	Throughput getFeatureControllerThroughput(int spectrometerIndex);
	short isFeatureSupportedThroughput(int spectrometerIndex);
	Battery getFeatureControllerBattery(int spectrometerIndex);
	short isFeatureSupportedBattery(int spectrometerIndex);
	AnalogDac getFeatureControllerAnalogDac(int spectrometerIndex);
	short isFeatureSupportedAnalogDac(int spectrometerIndex);
	AdvancedVersion getFeatureControllerAdvancedVersion(int spectrometerIndex);
	short isFeatureSupportedAdvancedVersion(int spectrometerIndex);
	OceanSPI getFeatureControllerOceanSPI(int spectrometerIndex);
	short isFeatureSupportedOceanSPI(int spectrometerIndex);
	VIS_NIR_LightSource getFeatureController_VIS_NIR_LightSource(int spectrometerIndex);
	short isFeatureSupported_VIS_NIR_LightSource(int spectrometerIndex);
	~WrapperExtensions();
	// No public Java copy constructor; creating one:
	WrapperExtensions(const WrapperExtensions &that);
	// Creating assignment operator declaration:
	WrapperExtensions &operator=(const WrapperExtensions &that);

private:
	jmethodID mid_WrapperExtensions610;
	jmethodID mid_getI2CBytes611;
	jmethodID mid_setI2CBytes612;
	jmethodID mid_isSpectrumValid613;
	jmethodID mid_isSpectrumValid614;
	jmethodID mid_getBadPixels615;
	jmethodID mid_setBadPixels616;
	jmethodID mid_getNumberOfChannels617;
	jmethodID mid_getNumberOfEnabledChannels618;
	jmethodID mid_isChannelEnabled619;
	jmethodID mid_getSaturationIntensity620;
	jmethodID mid_setSaturationIntensity621;
	jmethodID mid_enableRawSpectrumMode622;
	jmethodID mid_demonstrateArcoptixSpectrometer623;
	jmethodID mid_disableRawSpectrumMode624;
	jmethodID mid_getNetworkInterface625;
	jmethodID mid_openRemoteSpectrometer626;
	jmethodID mid_getFeatureControllerAutonull627;
	jmethodID mid_isFeatureSupportedAutonull628;
	jmethodID mid_getFeatureControllerThroughput629;
	jmethodID mid_isFeatureSupportedThroughput630;
	jmethodID mid_getFeatureControllerBattery631;
	jmethodID mid_isFeatureSupportedBattery632;
	jmethodID mid_getFeatureControllerAnalogDac633;
	jmethodID mid_isFeatureSupportedAnalogDac634;
	jmethodID mid_getFeatureControllerAdvancedVersion635;
	jmethodID mid_isFeatureSupportedAdvancedVersion636;
	jmethodID mid_getFeatureControllerOceanSPI637;
	jmethodID mid_isFeatureSupportedOceanSPI638;
	jmethodID mid_getFeatureController_VIS_NIR_LightSource639;
	jmethodID mid_isFeatureSupported_VIS_NIR_LightSource640;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_I2CBUS_T
#define EXTERN_TYPEDEF_I2CBUS_T
	typedef void* I2CBUS_T;
#endif /* EXTERN_TYPEDEF_I2CBUS_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_AUTONULL_T
#define EXTERN_TYPEDEF_AUTONULL_T
	typedef void* AUTONULL_T;
#endif /* EXTERN_TYPEDEF_AUTONULL_T */
#ifndef EXTERN_TYPEDEF_THROUGHPUT_T
#define EXTERN_TYPEDEF_THROUGHPUT_T
	typedef void* THROUGHPUT_T;
#endif /* EXTERN_TYPEDEF_THROUGHPUT_T */
#ifndef EXTERN_TYPEDEF_BATTERY_T
#define EXTERN_TYPEDEF_BATTERY_T
	typedef void* BATTERY_T;
#endif /* EXTERN_TYPEDEF_BATTERY_T */
#ifndef EXTERN_TYPEDEF_ANALOGDAC_T
#define EXTERN_TYPEDEF_ANALOGDAC_T
	typedef void* ANALOGDAC_T;
#endif /* EXTERN_TYPEDEF_ANALOGDAC_T */
#ifndef EXTERN_TYPEDEF_ADVANCEDVERSION_T
#define EXTERN_TYPEDEF_ADVANCEDVERSION_T
	typedef void* ADVANCEDVERSION_T;
#endif /* EXTERN_TYPEDEF_ADVANCEDVERSION_T */
#ifndef EXTERN_TYPEDEF_OCEANSPI_T
#define EXTERN_TYPEDEF_OCEANSPI_T
	typedef void* OCEANSPI_T;
#endif /* EXTERN_TYPEDEF_OCEANSPI_T */
#ifndef EXTERN_TYPEDEF_VIS_NIR_LIGHTSOURCE_T
#define EXTERN_TYPEDEF_VIS_NIR_LIGHTSOURCE_T
	typedef void* VIS_NIR_LIGHTSOURCE_T;
#endif /* EXTERN_TYPEDEF_VIS_NIR_LIGHTSOURCE_T */
#ifndef EXTERN_TYPEDEF_WRAPPEREXTENSIONS_T
#define EXTERN_TYPEDEF_WRAPPEREXTENSIONS_T
	typedef void* WRAPPEREXTENSIONS_T;
#endif /* EXTERN_TYPEDEF_WRAPPEREXTENSIONS_T */

	EXPORTED WRAPPEREXTENSIONS_T WrapperExtensions_Create();
	EXPORTED void WrapperExtensions_getI2CBytes(WRAPPEREXTENSIONS_T c_wrapper_extensions, I2CBUS_T i2cbus, signed char address, signed char numBytes, CHARARRAY_T retval);
	EXPORTED int WrapperExtensions_setI2CBytes(WRAPPEREXTENSIONS_T c_wrapper_extensions, I2CBUS_T i2cbus, signed char address, signed char numBytes, CHARARRAY_T i2C);
	EXPORTED short WrapperExtensions_isSpectrumValid(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED short WrapperExtensions_isSpectrumValid_1(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, int channelIndex);
	EXPORTED void WrapperExtensions_getBadPixels(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, SHORTARRAY_T retval);
	EXPORTED short WrapperExtensions_setBadPixels(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, SHORTARRAY_T badPixelArray);
	EXPORTED int WrapperExtensions_getNumberOfChannels(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED int WrapperExtensions_getNumberOfEnabledChannels(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED short WrapperExtensions_isChannelEnabled(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, int channelIndex);
	EXPORTED int WrapperExtensions_getSaturationIntensity(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED short WrapperExtensions_setSaturationIntensity(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, int saturationIntensity);
	EXPORTED short WrapperExtensions_enableRawSpectrumMode(WRAPPEREXTENSIONS_T c_wrapper_extensions);
	EXPORTED void WrapperExtensions_demonstrateArcoptixSpectrometer(WRAPPEREXTENSIONS_T c_wrapper_extensions);
	EXPORTED void WrapperExtensions_disableRawSpectrumMode(WRAPPEREXTENSIONS_T c_wrapper_extensions);
	EXPORTED void WrapperExtensions_getNetworkInterface(WRAPPEREXTENSIONS_T c_wrapper_extensions, JSTRING_T retval);
	EXPORTED int WrapperExtensions_openRemoteSpectrometer(WRAPPEREXTENSIONS_T c_wrapper_extensions, JSTRING_T deviceAddress, JSTRING_T deviceType);
	EXPORTED void WrapperExtensions_getFeatureControllerAutonull(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, AUTONULL_T retval);
	EXPORTED short WrapperExtensions_isFeatureSupportedAutonull(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED void WrapperExtensions_getFeatureControllerThroughput(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, THROUGHPUT_T retval);
	EXPORTED short WrapperExtensions_isFeatureSupportedThroughput(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED void WrapperExtensions_getFeatureControllerBattery(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, BATTERY_T retval);
	EXPORTED short WrapperExtensions_isFeatureSupportedBattery(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED void WrapperExtensions_getFeatureControllerAnalogDac(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, ANALOGDAC_T retval);
	EXPORTED short WrapperExtensions_isFeatureSupportedAnalogDac(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED void WrapperExtensions_getFeatureControllerAdvancedVersion(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, ADVANCEDVERSION_T retval);
	EXPORTED short WrapperExtensions_isFeatureSupportedAdvancedVersion(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED void WrapperExtensions_getFeatureControllerOceanSPI(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, OCEANSPI_T retval);
	EXPORTED short WrapperExtensions_isFeatureSupportedOceanSPI(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED void WrapperExtensions_getFeatureController_VIS_NIR_LightSource(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, VIS_NIR_LIGHTSOURCE_T retval);
	EXPORTED short WrapperExtensions_isFeatureSupported_VIS_NIR_LightSource(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED void WrapperExtensions_Destroy(WRAPPEREXTENSIONS_T wrapper_extensions);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED WRAPPEREXTENSIONS_T STDCALL WrapperExtensions_Create_stdcall();
	EXPORTED void STDCALL WrapperExtensions_getI2CBytes_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, I2CBUS_T i2cbus, signed char address, signed char numBytes, CHARARRAY_T retval);
	EXPORTED int STDCALL WrapperExtensions_setI2CBytes_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, I2CBUS_T i2cbus, signed char address, signed char numBytes, CHARARRAY_T i2C);
	EXPORTED short STDCALL WrapperExtensions_isSpectrumValid_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED short STDCALL WrapperExtensions_isSpectrumValid_stdcall_1(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, int channelIndex);
	EXPORTED void STDCALL WrapperExtensions_getBadPixels_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, SHORTARRAY_T retval);
	EXPORTED short STDCALL WrapperExtensions_setBadPixels_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, SHORTARRAY_T badPixelArray);
	EXPORTED int STDCALL WrapperExtensions_getNumberOfChannels_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED int STDCALL WrapperExtensions_getNumberOfEnabledChannels_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED short STDCALL WrapperExtensions_isChannelEnabled_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, int channelIndex);
	EXPORTED int STDCALL WrapperExtensions_getSaturationIntensity_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED short STDCALL WrapperExtensions_setSaturationIntensity_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, int saturationIntensity);
	EXPORTED short STDCALL WrapperExtensions_enableRawSpectrumMode_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions);
	EXPORTED void STDCALL WrapperExtensions_demonstrateArcoptixSpectrometer_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions);
	EXPORTED void STDCALL WrapperExtensions_disableRawSpectrumMode_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions);
	EXPORTED void STDCALL WrapperExtensions_getNetworkInterface_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, JSTRING_T retval);
	EXPORTED int STDCALL WrapperExtensions_openRemoteSpectrometer_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, JSTRING_T deviceAddress, JSTRING_T deviceType);
	EXPORTED void STDCALL WrapperExtensions_getFeatureControllerAutonull_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, AUTONULL_T retval);
	EXPORTED short STDCALL WrapperExtensions_isFeatureSupportedAutonull_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED void STDCALL WrapperExtensions_getFeatureControllerThroughput_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, THROUGHPUT_T retval);
	EXPORTED short STDCALL WrapperExtensions_isFeatureSupportedThroughput_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED void STDCALL WrapperExtensions_getFeatureControllerBattery_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, BATTERY_T retval);
	EXPORTED short STDCALL WrapperExtensions_isFeatureSupportedBattery_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED void STDCALL WrapperExtensions_getFeatureControllerAnalogDac_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, ANALOGDAC_T retval);
	EXPORTED short STDCALL WrapperExtensions_isFeatureSupportedAnalogDac_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED void STDCALL WrapperExtensions_getFeatureControllerAdvancedVersion_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, ADVANCEDVERSION_T retval);
	EXPORTED short STDCALL WrapperExtensions_isFeatureSupportedAdvancedVersion_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED void STDCALL WrapperExtensions_getFeatureControllerOceanSPI_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, OCEANSPI_T retval);
	EXPORTED short STDCALL WrapperExtensions_isFeatureSupportedOceanSPI_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED void STDCALL WrapperExtensions_getFeatureController_VIS_NIR_LightSource_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex, VIS_NIR_LIGHTSOURCE_T retval);
	EXPORTED short STDCALL WrapperExtensions_isFeatureSupported_VIS_NIR_LightSource_stdcall(WRAPPEREXTENSIONS_T c_wrapper_extensions, int spectrometerIndex);
	EXPORTED void STDCALL WrapperExtensions_Destroy_stdcall(WRAPPEREXTENSIONS_T wrapper_extensions);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* WRAPPEREXTENSIONS_H */
