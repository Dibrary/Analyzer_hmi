/**
 * File: SAS.h
 * Autogenerated on Fri Mar 23 13:39:11 EDT 2018 based on
 * SAS.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/sas/SAS
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef SAS_H
#define SAS_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBSpectrometer.h"
#include "USBEndpointDescriptor.h"
#include "GUIProviderArray.h"
#include "Spectrum.h"
#include "SpectrometerStatus.h"
#include "JString.h"
#include "ExternalTriggerModeArray.h"
#include "CoefficientsArray.h"
#include "AcquisitionListener.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBSpectrometer;
class USBEndpointDescriptor;
class GUIProviderArray;
class Spectrum;
class SpectrometerStatus;
class JString;
class ExternalTriggerModeArray;
class CoefficientsArray;
class AcquisitionListener;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED SAS : public USBSpectrometer // CPPClass.tag001
{
public: 
	SAS();
	SAS(int i);
	void setEndpoints();
	USBEndpointDescriptor getEndpoint(int endPoint);
	void openSpectrometer(int index);
	GUIProviderArray getGUIFeatures();
	Spectrum getSpectrum(Spectrum& spectrum);
	Spectrum getSpectrum();
	SpectrometerStatus getStatus();
	int readIntegrationTime();
	JString toString();
	void setExternalTriggerMode(int mode);
	ExternalTriggerModeArray getExternalTriggerModes();
	CoefficientsArray readNonlinearityCoefficientsFromSpectrometer();
	void writeNonlinearityCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	CoefficientsArray getNonlinearityCoefficients();
	void setNonlinearityCoefficients(CoefficientsArray& coefficients);
	DoubleArray getNonlinearityCoefficientsSingleChannel(int index);
	void setNonlinearityCoefficientsSingleChannel(DoubleArray& nl, int index);
	CoefficientsArray readWavelengthCalibrationCoefficientsFromSpectrometer();
	void writeWavelengthCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	CoefficientsArray getWavelengthCalibrationCoefficients();
	void setWavelengthCalibrationCoefficients(CoefficientsArray& coefficients);
	DoubleArray getWavelengths(int index);
	void setWavelengths(DoubleArray& wl, int index);
	CoefficientsArray readStrayLightCorrectionCoefficientFromSpectrometer();
	void writeStrayLightCoefficientToSpectrometer(CoefficientsArray& coefficients);
	void setStrayLightCorrectionCoefficient(CoefficientsArray& coefficients);
	CoefficientsArray getStrayLightCorrectionCoefficient();
	void setStrayLight(double strayLight, int index);
	double getStrayLight(int index);
	short isAdvancedVersion();
	void addAcquisitionListener(AcquisitionListener& listener);
	void removeAcquisitionListener(AcquisitionListener& listener);
	~SAS();
	// No public Java copy constructor; creating one:
	SAS(const SAS &that);
	// Creating assignment operator declaration:
	SAS &operator=(const SAS &that);

private:
	jmethodID mid_SAS5494;
	jmethodID mid_SAS5495;
	jmethodID mid_setEndpoints5496;
	jmethodID mid_getEndpoint5497;
	jmethodID mid_openSpectrometer5498;
	jmethodID mid_getGUIFeatures5499;
	jmethodID mid_getSpectrum5500;
	jmethodID mid_getSpectrum5501;
	jmethodID mid_getStatus5502;
	jmethodID mid_readIntegrationTime5503;
	jmethodID mid_toString5504;
	jmethodID mid_setExternalTriggerMode5505;
	jmethodID mid_getExternalTriggerModes5506;
	jmethodID mid_readNonlinearityCoefficientsFromSpectrometer5507;
	jmethodID mid_writeNonlinearityCoefficientsToSpectrometer5508;
	jmethodID mid_getNonlinearityCoefficients5509;
	jmethodID mid_setNonlinearityCoefficients5510;
	jmethodID mid_getNonlinearityCoefficientsSingleChannel5511;
	jmethodID mid_setNonlinearityCoefficientsSingleChannel5512;
	jmethodID mid_readWavelengthCalibrationCoefficientsFromSpectrometer5513;
	jmethodID mid_writeWavelengthCoefficientsToSpectrometer5514;
	jmethodID mid_getWavelengthCalibrationCoefficients5515;
	jmethodID mid_setWavelengthCalibrationCoefficients5516;
	jmethodID mid_getWavelengths5517;
	jmethodID mid_setWavelengths5518;
	jmethodID mid_readStrayLightCorrectionCoefficientFromSpectrometer5519;
	jmethodID mid_writeStrayLightCoefficientToSpectrometer5520;
	jmethodID mid_setStrayLightCorrectionCoefficient5521;
	jmethodID mid_getStrayLightCorrectionCoefficient5522;
	jmethodID mid_setStrayLight5523;
	jmethodID mid_getStrayLight5524;
	jmethodID mid_isAdvancedVersion5525;
	jmethodID mid_addAcquisitionListener5526;
	jmethodID mid_removeAcquisitionListener5527;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBSPECTROMETER_T
#define EXTERN_TYPEDEF_USBSPECTROMETER_T
	typedef void* USBSPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_USBSPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_USBENDPOINTDESCRIPTOR_T
#define EXTERN_TYPEDEF_USBENDPOINTDESCRIPTOR_T
	typedef void* USBENDPOINTDESCRIPTOR_T;
#endif /* EXTERN_TYPEDEF_USBENDPOINTDESCRIPTOR_T */
#ifndef EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
#define EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
	typedef void* GUIPROVIDERARRAY_T;
#endif /* EXTERN_TYPEDEF_GUIPROVIDERARRAY_T */
#ifndef EXTERN_TYPEDEF_SPECTRUM_T
#define EXTERN_TYPEDEF_SPECTRUM_T
	typedef void* SPECTRUM_T;
#endif /* EXTERN_TYPEDEF_SPECTRUM_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETERSTATUS_T
#define EXTERN_TYPEDEF_SPECTROMETERSTATUS_T
	typedef void* SPECTROMETERSTATUS_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERSTATUS_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_EXTERNALTRIGGERMODEARRAY_T
#define EXTERN_TYPEDEF_EXTERNALTRIGGERMODEARRAY_T
	typedef void* EXTERNALTRIGGERMODEARRAY_T;
#endif /* EXTERN_TYPEDEF_EXTERNALTRIGGERMODEARRAY_T */
#ifndef EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
#define EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
	typedef void* COEFFICIENTSARRAY_T;
#endif /* EXTERN_TYPEDEF_COEFFICIENTSARRAY_T */
#ifndef EXTERN_TYPEDEF_ACQUISITIONLISTENER_T
#define EXTERN_TYPEDEF_ACQUISITIONLISTENER_T
	typedef void* ACQUISITIONLISTENER_T;
#endif /* EXTERN_TYPEDEF_ACQUISITIONLISTENER_T */
#ifndef EXTERN_TYPEDEF_SAS_T
#define EXTERN_TYPEDEF_SAS_T
	typedef void* SAS_T;
#endif /* EXTERN_TYPEDEF_SAS_T */

	EXPORTED SAS_T SAS_Create();
	EXPORTED SAS_T SAS_Create_1(int i);
	EXPORTED void SAS_setEndpoints(SAS_T c_sas);
	EXPORTED void SAS_getEndpoint(SAS_T c_sas, int endPoint, USBENDPOINTDESCRIPTOR_T retval);
	EXPORTED void SAS_openSpectrometer(SAS_T c_sas, int index);
	EXPORTED void SAS_getGUIFeatures(SAS_T c_sas, GUIPROVIDERARRAY_T retval);
	EXPORTED void SAS_getSpectrum(SAS_T c_sas, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void SAS_getSpectrum_1(SAS_T c_sas, SPECTRUM_T retval);
	EXPORTED void SAS_getStatus(SAS_T c_sas, SPECTROMETERSTATUS_T retval);
	EXPORTED int SAS_readIntegrationTime(SAS_T c_sas);
	EXPORTED void SAS_toString(SAS_T c_sas, JSTRING_T retval);
	EXPORTED void SAS_setExternalTriggerMode(SAS_T c_sas, int mode);
	EXPORTED void SAS_getExternalTriggerModes(SAS_T c_sas, EXTERNALTRIGGERMODEARRAY_T retval);
	EXPORTED void SAS_readNonlinearityCoefficientsFromSpectrometer(SAS_T c_sas, COEFFICIENTSARRAY_T retval);
	EXPORTED void SAS_writeNonlinearityCoefficientsToSpectrometer(SAS_T c_sas, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void SAS_getNonlinearityCoefficients(SAS_T c_sas, COEFFICIENTSARRAY_T retval);
	EXPORTED void SAS_setNonlinearityCoefficients(SAS_T c_sas, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void SAS_getNonlinearityCoefficientsSingleChannel(SAS_T c_sas, int index, DOUBLEARRAY_T retval);
	EXPORTED void SAS_setNonlinearityCoefficientsSingleChannel(SAS_T c_sas, DOUBLEARRAY_T nl, int index);
	EXPORTED void SAS_readWavelengthCalibrationCoefficientsFromSpectrometer(SAS_T c_sas, COEFFICIENTSARRAY_T retval);
	EXPORTED void SAS_writeWavelengthCoefficientsToSpectrometer(SAS_T c_sas, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void SAS_getWavelengthCalibrationCoefficients(SAS_T c_sas, COEFFICIENTSARRAY_T retval);
	EXPORTED void SAS_setWavelengthCalibrationCoefficients(SAS_T c_sas, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void SAS_getWavelengths(SAS_T c_sas, int index, DOUBLEARRAY_T retval);
	EXPORTED void SAS_setWavelengths(SAS_T c_sas, DOUBLEARRAY_T wl, int index);
	EXPORTED void SAS_readStrayLightCorrectionCoefficientFromSpectrometer(SAS_T c_sas, COEFFICIENTSARRAY_T retval);
	EXPORTED void SAS_writeStrayLightCoefficientToSpectrometer(SAS_T c_sas, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void SAS_setStrayLightCorrectionCoefficient(SAS_T c_sas, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void SAS_getStrayLightCorrectionCoefficient(SAS_T c_sas, COEFFICIENTSARRAY_T retval);
	EXPORTED void SAS_setStrayLight(SAS_T c_sas, double strayLight, int index);
	EXPORTED double SAS_getStrayLight(SAS_T c_sas, int index);
	EXPORTED short SAS_isAdvancedVersion(SAS_T c_sas);
	EXPORTED void SAS_addAcquisitionListener(SAS_T c_sas, ACQUISITIONLISTENER_T listener);
	EXPORTED void SAS_removeAcquisitionListener(SAS_T c_sas, ACQUISITIONLISTENER_T listener);
	EXPORTED void SAS_Destroy(SAS_T sas);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED SAS_T STDCALL SAS_Create_stdcall();
	EXPORTED SAS_T STDCALL SAS_Create_stdcall_1(int i);
	EXPORTED void STDCALL SAS_setEndpoints_stdcall(SAS_T c_sas);
	EXPORTED void STDCALL SAS_getEndpoint_stdcall(SAS_T c_sas, int endPoint, USBENDPOINTDESCRIPTOR_T retval);
	EXPORTED void STDCALL SAS_openSpectrometer_stdcall(SAS_T c_sas, int index);
	EXPORTED void STDCALL SAS_getGUIFeatures_stdcall(SAS_T c_sas, GUIPROVIDERARRAY_T retval);
	EXPORTED void STDCALL SAS_getSpectrum_stdcall(SAS_T c_sas, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void STDCALL SAS_getSpectrum_stdcall_1(SAS_T c_sas, SPECTRUM_T retval);
	EXPORTED void STDCALL SAS_getStatus_stdcall(SAS_T c_sas, SPECTROMETERSTATUS_T retval);
	EXPORTED int STDCALL SAS_readIntegrationTime_stdcall(SAS_T c_sas);
	EXPORTED void STDCALL SAS_toString_stdcall(SAS_T c_sas, JSTRING_T retval);
	EXPORTED void STDCALL SAS_setExternalTriggerMode_stdcall(SAS_T c_sas, int mode);
	EXPORTED void STDCALL SAS_getExternalTriggerModes_stdcall(SAS_T c_sas, EXTERNALTRIGGERMODEARRAY_T retval);
	EXPORTED void STDCALL SAS_readNonlinearityCoefficientsFromSpectrometer_stdcall(SAS_T c_sas, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL SAS_writeNonlinearityCoefficientsToSpectrometer_stdcall(SAS_T c_sas, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL SAS_getNonlinearityCoefficients_stdcall(SAS_T c_sas, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL SAS_setNonlinearityCoefficients_stdcall(SAS_T c_sas, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL SAS_getNonlinearityCoefficientsSingleChannel_stdcall(SAS_T c_sas, int index, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL SAS_setNonlinearityCoefficientsSingleChannel_stdcall(SAS_T c_sas, DOUBLEARRAY_T nl, int index);
	EXPORTED void STDCALL SAS_readWavelengthCalibrationCoefficientsFromSpectrometer_stdcall(SAS_T c_sas, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL SAS_writeWavelengthCoefficientsToSpectrometer_stdcall(SAS_T c_sas, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL SAS_getWavelengthCalibrationCoefficients_stdcall(SAS_T c_sas, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL SAS_setWavelengthCalibrationCoefficients_stdcall(SAS_T c_sas, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL SAS_getWavelengths_stdcall(SAS_T c_sas, int index, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL SAS_setWavelengths_stdcall(SAS_T c_sas, DOUBLEARRAY_T wl, int index);
	EXPORTED void STDCALL SAS_readStrayLightCorrectionCoefficientFromSpectrometer_stdcall(SAS_T c_sas, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL SAS_writeStrayLightCoefficientToSpectrometer_stdcall(SAS_T c_sas, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL SAS_setStrayLightCorrectionCoefficient_stdcall(SAS_T c_sas, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL SAS_getStrayLightCorrectionCoefficient_stdcall(SAS_T c_sas, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL SAS_setStrayLight_stdcall(SAS_T c_sas, double strayLight, int index);
	EXPORTED double STDCALL SAS_getStrayLight_stdcall(SAS_T c_sas, int index);
	EXPORTED short STDCALL SAS_isAdvancedVersion_stdcall(SAS_T c_sas);
	EXPORTED void STDCALL SAS_addAcquisitionListener_stdcall(SAS_T c_sas, ACQUISITIONLISTENER_T listener);
	EXPORTED void STDCALL SAS_removeAcquisitionListener_stdcall(SAS_T c_sas, ACQUISITIONLISTENER_T listener);
	EXPORTED void STDCALL SAS_Destroy_stdcall(SAS_T sas);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* SAS_H */
