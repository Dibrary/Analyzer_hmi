/**
 * File: Wrapper.h
 * Autogenerated on Fri Mar 23 13:38:27 EDT 2018 based on
 * Wrapper.java
 * for the Java class
 * com/oceanoptics/omnidriver/api/wrapper/Wrapper
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef WRAPPER_H
#define WRAPPER_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "WrapperExtensions.h"
#include "JString.h"
#include "Bench.h"
#include "Detector.h"
#include "STSBench.h"
#include "Coefficients.h"
#include "GPIO.h"
#include "SaturationThreshold.h"
#include "SPIBus.h"
#include "LightSource.h"
#include "SingleStrobe.h"
#include "ContinuousStrobe.h"
#include "CurrentOut.h"
#include "BoardTemperature.h"
#include "DetectorTemperature.h"
#include "AnalogIn.h"
#include "AnalogOut.h"
#include "LS450_Functions.h"
#include "ExternalTemperatureWrapper.h"
#include "UV_VIS_LightSource.h"
#include "PixelBinningWrapper.h"
#include "NetworkConfigure.h"
#include "SpectrumTypeWrapper.h"
#include "ExternalTriggerDelay.h"
#include "I2CBus.h"
#include "HighGainMode.h"
#include "IrradianceCalibrationFactor.h"
#include "NonlinearityCorrectionProvider.h"
#include "StrayLightCorrection.h"
#include "Version.h"
#include "WavelengthCalibrationProvider.h"
#include "ThermoElectricWrapper.h"
#include "Indy.h"
#include "InternalTriggerWrapper.h"
#include "DataBuffer.h"
#include "HighResTimeStamp.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class WrapperExtensions;
class JString;
class Bench;
class Detector;
class STSBench;
class Coefficients;
class GPIO;
class SaturationThreshold;
class SPIBus;
class LightSource;
class SingleStrobe;
class ContinuousStrobe;
class CurrentOut;
class BoardTemperature;
class DetectorTemperature;
class AnalogIn;
class AnalogOut;
class LS450_Functions;
class ExternalTemperatureWrapper;
class UV_VIS_LightSource;
class PixelBinningWrapper;
class NetworkConfigure;
class SpectrumTypeWrapper;
class ExternalTriggerDelay;
class I2CBus;
class HighGainMode;
class IrradianceCalibrationFactor;
class NonlinearityCorrectionProvider;
class StrayLightCorrection;
class Version;
class WavelengthCalibrationProvider;
class ThermoElectricWrapper;
class Indy;
class InternalTriggerWrapper;
class DataBuffer;
class HighResTimeStamp;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED Wrapper : public BaseJavaClass // CPPClass.tag001
{
public: 
	Wrapper();
	WrapperExtensions getWrapperExtensions();
	short exportToGramsSPC(int spectrometerIndex, JString& outputPathname, DoubleArray& pixels, JString& username);
	short exportToGramsSPC(int spectrometerIndex, int channelIndex, JString& outputPathname, DoubleArray& pixels, JString& username);
	JString getApiVersion();
	int getBuildNumber();
	JString getLastException();
	JString getLastExceptionStackTrace();
	int openNetworkSpectrometer(JString& ipAddress);
	void setNetworkCommunicationParameters(int spectrometerIndex, int socketTimeoutMilliseconds, short checkForBytesAvailable, int spectrumReadThrottleMilliseconds, int spectrumReadRetryLimit);
	int openAllSpectrometers();
	JString getName(int spectrometerIndex);
	int getMaximumIntegrationTime(int spectrometerIndex);
	int getMinimumIntegrationTime(int spectrometerIndex);
	int getIntegrationStepIncrement(int spectrometerIndex);
	int getMaximumIntensity(int spectrometerIndex);
	int getNumberOfSpectrometersFound();
	JString getFirmwareVersion(int spectrometerIndex);
	JString getFirmwareModel(int spectrometerIndex);
	JString getSerialNumber(int spectrometerIndex);
	int getNumberOfPixels(int spectrometerIndex);
	int getNumberOfPixels(int spectrometerIndex, int channelIndex);
	int getNumberOfDarkPixels(int spectrometerIndex);
	int getNumberOfDarkPixels(int spectrometerIndex, int channelIndex);
	CharArray readRawUSB(int spectrometerIndex, int inEP, int length);
	int writeRawUSB(int spectrometerIndex, int outEP, CharArray& message, int length);
	void setIntegrationTime(int spectrometerIndex, int usec);
	void setIntegrationTime(int spectrometerIndex, int channelIndex, int usec);
	int getIntegrationTime(int spectrometerIndex);
	int getIntegrationTime(int spectrometerIndex, int channelIndex);
	void setScansToAverage(int spectrometerIndex, int numberOfScansToAverage);
	void setScansToAverage(int spectrometerIndex, int channelIndex, int numberOfScansToAverage);
	int getScansToAverage(int spectrometerIndex);
	int getScansToAverage(int spectrometerIndex, int channelIndex);
	Bench getBench(int spectrometerIndex);
	Bench getBench(int spectrometerIndex, int channelIndex);
	Detector getDetector(int spectrometerIndex, int channelIndex);
	short saveSTSConfiguration(int spectrometerIndex);
	STSBench getSTSBench(int spectrometerIndex);
	void setBoxcarWidth(int spectrometerIndex, int numberOfPixelsOnEitherSideOfCenter);
	void setBoxcarWidth(int spectrometerIndex, int channelIndex, int numberOfPixelsOnEitherSideOfCenter);
	int getBoxcarWidth(int spectrometerIndex);
	int getBoxcarWidth(int spectrometerIndex, int channelIndex);
	short insertKey(JString& keyValue);
	void removeKey();
	Coefficients getCalibrationCoefficientsFromBuffer(int spectrometerIndex);
	Coefficients getCalibrationCoefficientsFromBuffer(int spectrometerIndex, int channelIndex);
	Coefficients getCalibrationCoefficientsFromEEProm(int spectrometerIndex);
	Coefficients getCalibrationCoefficientsFromEEProm(int spectrometerIndex, int channelIndex);
	short setCalibrationCoefficientsIntoBuffer(int spectrometerIndex, Coefficients& coefficients, short applyWavelengthCoefficients, short applyStrayLightConstant, short applyNonlinearityCoefficients);
	short setCalibrationCoefficientsIntoBuffer(int spectrometerIndex, int channelIndex, Coefficients& newCoefficients, short applyWavelengthCoefficients, short applyStrayLightConstant, short applyNonlinearityCoefficients);
	short setCalibrationCoefficientsIntoEEProm(int spectrometerIndex, Coefficients& coefficients, short applyWavelengthCoefficients, short applyStrayLightConstant, short applyNonlinearityCoefficients);
	short setCalibrationCoefficientsIntoEEProm(int spectrometerIndex, int channelIndex, Coefficients& newCoefficients, short applyWavelengthCoefficients, short applyStrayLightConstants, short applyNonlinearityCoefficients);
	JString getEEPromInfo(int spectrometerIndex, int slot);
	short setEEPromInfo(int spectrometerIndex, int slot, JString& str);
	short setDetectorSetPointCelsius(int spectrometerIndex, double temperatureCelsius);
	void setExternalTriggerMode(int spectrometerIndex, int mode);
	void setExternalTriggerMode(int spectrometerIndex, int channelIndex, int mode);
	int getExternalTriggerMode(int spectrometerIndex);
	int getExternalTriggerMode(int spectrometerIndex, int channelIndex);
	void setCorrectForElectricalDark(int spectrometerIndex, int enable);
	void setCorrectForElectricalDark(int spectrometerIndex, int channelIndex, int enable);
	short getCorrectForElectricalDark(int spectrometerIndex);
	short getCorrectForElectricalDark(int spectrometerIndex, int channelIndex);
	short getCorrectForStrayLight(int spectrometerIndex);
	short getCorrectForStrayLight(int spectrometerIndex, int channelIndex);
	short setCorrectForDetectorNonlinearity(int spectrometerIndex, int enable);
	short setCorrectForDetectorNonlinearity(int spectrometerIndex, int channelIndex, int enable);
	short getCorrectForDetectorNonlinearity(int spectrometerIndex);
	short getCorrectForDetectorNonlinearity(int spectrometerIndex, int channelIndex);
	void setStrobeEnable(int spectrometerIndex, int lampOn);
	void setStrobeEnable(int spectrometerIndex, int channelIndex, int lampOn);
	int getStrobeEnable(int spectrometerIndex);
	int getStrobeEnable(int spectrometerIndex, int channelIndex);
	double getWavelength(int spectrometerIndex, int pixel);
	double getWavelength(int spectrometerIndex, int channelIndex, int pixel);
	DoubleArray getWavelengths(int spectrometerIndex);
	DoubleArray getWavelengths(int spectrometerIndex, int channelIndex);
	double getWavelengthIntercept(int spectrometerIndex);
	double getWavelengthIntercept(int spectrometerIndex, int channelIndex);
	double getWavelengthFirst(int spectrometerIndex);
	double getWavelengthFirst(int spectrometerIndex, int channelIndex);
	double getWavelengthSecond(int spectrometerIndex);
	double getWavelengthSecond(int spectrometerIndex, int channelIndex);
	double getWavelengthThird(int spectrometerIndex);
	double getWavelengthThird(int spectrometerIndex, int channelIndex);
	int setUSBTimeout(int spectrometerIndex, int timeoutMilliseconds);
	short isUSBTimeout(int spectrometerIndex);
	short isUSBTimeout(int spectrometerIndex, int channelIndex);
	short isSpectrumValid(int spectrometerIndex);
	short isSpectrumValid(int spectrometerIndex, int channelIndex);
	DoubleArray getSpectrum(int spectrometerIndex);
	DoubleArray getSpectrum(int spectrometerIndex, int channelIndex);
	void stopAveraging(int spectrometerIndex);
	void stopAveraging(int spectrometerIndex, int channelIndex);
	short isSaturated(int spectrometerIndex);
	short isSaturated(int spectrometerIndex, int channelIndex);
	void closeAllSpectrometers();
	void closeSpectrometer(int spectrometerIndex);
	GPIO getFeatureControllerGPIO(int spectrometerIndex);
	short isFeatureSupportedGPIO(int spectrometerIndex);
	SaturationThreshold getFeatureControllerSaturationThreshold(int spectrometerIndex);
	short isFeatureSupportedSaturationThreshold(int spectrometerIndex);
	SPIBus getFeatureControllerSPIBus(int spectrometerIndex);
	short isFeatureSupportedSPIBus(int spectrometerIndex);
	short sendSimulatedTriggerSignal(int spectrometerIndex);
	short flushSpectrum(int spectrometerIndex);
	LightSource getFeatureControllerLightSource(int spectrometerIndex);
	short isFeatureSupportedLightSource(int spectrometerIndex);
	SingleStrobe getFeatureControllerSingleStrobe(int spectrometerIndex);
	short isFeatureSupportedSingleStrobe(int spectrometerIndex);
	ContinuousStrobe getFeatureControllerContinuousStrobe(int spectrometerIndex);
	short isFeatureSupportedContinuousStrobe(int spectrometerIndex);
	CurrentOut getFeatureControllerCurrentOut(int spectrometerIndex);
	short isFeatureSupportedCurrentOut(int spectrometerIndex);
	BoardTemperature getFeatureControllerBoardTemperature(int spectrometerIndex);
	short isFeatureSupportedBoardTemperature(int spectrometerIndex);
	DetectorTemperature getFeatureControllerDetectorTemperature(int spectrometerIndex);
	short isFeatureSupportedDetectorTemperature(int spectrometerIndex);
	AnalogIn getFeatureControllerAnalogIn(int spectrometerIndex);
	short isFeatureSupportedAnalogIn(int spectrometerIndex);
	AnalogOut getFeatureControllerAnalogOut(int spectrometerIndex);
	short isFeatureSupportedAnalogOut(int spectrometerIndex);
	LS450_Functions getFeatureControllerLS450(int spectrometerIndex);
	short isFeatureSupportedLS450(int spectrometerIndex);
	ExternalTemperatureWrapper getFeatureController_USB_LS450_ExternalTemperature(int spectrometerIndex);
	short isFeatureSupported_USB_LS450_ExternalTemperature(int spectrometerIndex);
	UV_VIS_LightSource getFeatureController_UV_VIS_LightSource(int spectrometerIndex);
	short isFeatureSupported_UV_VIS_LightSource(int spectrometerIndex);
	PixelBinningWrapper getFeatureControllerPixelBinning(int spectrometerIndex);
	short isFeatureSupportedPixelBinning(int spectrometerIndex);
	short isFeatureSupportedNetworkConfigure(int spectrometerIndex);
	NetworkConfigure getFeatureControllerNetworkConfigure(int spectrometerIndex);
	SpectrumTypeWrapper getFeatureControllerSpectrumType(int spectrometerIndex);
	short isFeatureSupportedSpectrumType(int spectrometerIndex);
	ExternalTriggerDelay getFeatureControllerExternalTriggerDelay(int spectrometerIndex);
	short isFeatureSupportedExternalTriggerDelay(int spectrometerIndex);
	I2CBus getFeatureControllerI2CBus(int spectrometerIndex);
	short isFeatureSupportedI2CBus(int spectrometerIndex);
	HighGainMode getFeatureControllerHighGainMode(int spectrometerIndex);
	short isFeatureSupportedHighGainMode(int spectrometerIndex);
	IrradianceCalibrationFactor getFeatureControllerIrradianceCalibrationFactor(int spectrometerIndex);
	short isFeatureSupportedIrradianceCalibrationFactor(int spectrometerIndex);
	NonlinearityCorrectionProvider getFeatureControllerNonlinearityCorrectionProvider(int spectrometerIndex);
	short isFeatureSupportedNonlinearityCorrectionProvider(int spectrometerIndex);
	StrayLightCorrection getFeatureControllerStrayLightCorrection(int spectrometerIndex);
	short isFeatureSupportedStrayLightCorrection(int spectrometerIndex);
	::Version getFeatureControllerVersion(int spectrometerIndex);
	short isFeatureSupportedVersion(int spectrometerIndex);
	WavelengthCalibrationProvider getFeatureControllerWavelengthCalibrationProvider(int spectrometerIndex);
	short isFeatureSupportedWavelengthCalibrationProvider(int spectrometerIndex);
	ThermoElectricWrapper getFeatureControllerThermoElectric(int spectrometerIndex);
	short isFeatureSupportedThermoElectric(int spectrometerIndex);
	Indy getFeatureControllerIndy(int spectrometerIndex);
	short isFeatureSupportedIndy(int spectrometerIndex);
	InternalTriggerWrapper getFeatureControllerInternalTrigger(int spectrometerIndex);
	short isFeatureSupportedInternalTrigger(int spectrometerIndex);
	DataBuffer getFeatureControllerDataBuffer(int spectrometerIndex);
	short isFeatureSupportedDataBuffer(int spectrometerIndex);
	void setAutoToggleStrobeLampEnable(int spectrometerIndex, short enable);
	void setAutoToggleStrobeLampEnable(int spectrometerIndex, int channelIndex, short enable);
	void highSpdAcq_AllocateBuffer(int spectrometerIndex, int numberOfSpectra);
	void highSpdAcq_StartAcquisition(int spectrometerIndex);
	void highSpdAcq_StartAcquisition(int spectrometerIndex, int channelIndex);
	void highSpdAcq_StopAcquisition();
	int highSpdAcq_GetNumberOfSpectraAcquired();
	DoubleArray highSpdAcq_GetSpectrum(int spectrumNumber);
	short highSpdAcq_IsSaturated(int spectrumNumber);
	HighResTimeStamp highSpdAcq_GetTimeStamp(int spectrumNumber);
	~Wrapper();
	// No public Java copy constructor; creating one:
	Wrapper(const Wrapper &that);
	// Creating assignment operator declaration:
	Wrapper &operator=(const Wrapper &that);

private:
	jmethodID mid_Wrapper441;
	jmethodID mid_getWrapperExtensions442;
	jmethodID mid_exportToGramsSPC443;
	jmethodID mid_exportToGramsSPC444;
	jmethodID mid_getApiVersion445;
	jmethodID mid_getBuildNumber446;
	jmethodID mid_getLastException447;
	jmethodID mid_getLastExceptionStackTrace448;
	jmethodID mid_openNetworkSpectrometer449;
	jmethodID mid_setNetworkCommunicationParameters450;
	jmethodID mid_openAllSpectrometers451;
	jmethodID mid_getName452;
	jmethodID mid_getMaximumIntegrationTime453;
	jmethodID mid_getMinimumIntegrationTime454;
	jmethodID mid_getIntegrationStepIncrement455;
	jmethodID mid_getMaximumIntensity456;
	jmethodID mid_getNumberOfSpectrometersFound457;
	jmethodID mid_getFirmwareVersion458;
	jmethodID mid_getFirmwareModel459;
	jmethodID mid_getSerialNumber460;
	jmethodID mid_getNumberOfPixels461;
	jmethodID mid_getNumberOfPixels462;
	jmethodID mid_getNumberOfDarkPixels463;
	jmethodID mid_getNumberOfDarkPixels464;
	jmethodID mid_readRawUSB465;
	jmethodID mid_writeRawUSB466;
	jmethodID mid_setIntegrationTime467;
	jmethodID mid_setIntegrationTime468;
	jmethodID mid_getIntegrationTime469;
	jmethodID mid_getIntegrationTime470;
	jmethodID mid_setScansToAverage471;
	jmethodID mid_setScansToAverage472;
	jmethodID mid_getScansToAverage473;
	jmethodID mid_getScansToAverage474;
	jmethodID mid_getBench475;
	jmethodID mid_getBench476;
	jmethodID mid_getDetector477;
	jmethodID mid_saveSTSConfiguration478;
	jmethodID mid_getSTSBench479;
	jmethodID mid_setBoxcarWidth480;
	jmethodID mid_setBoxcarWidth481;
	jmethodID mid_getBoxcarWidth482;
	jmethodID mid_getBoxcarWidth483;
	jmethodID mid_insertKey484;
	jmethodID mid_removeKey485;
	jmethodID mid_getCalibrationCoefficientsFromBuffer486;
	jmethodID mid_getCalibrationCoefficientsFromBuffer487;
	jmethodID mid_getCalibrationCoefficientsFromEEProm488;
	jmethodID mid_getCalibrationCoefficientsFromEEProm489;
	jmethodID mid_setCalibrationCoefficientsIntoBuffer490;
	jmethodID mid_setCalibrationCoefficientsIntoBuffer491;
	jmethodID mid_setCalibrationCoefficientsIntoEEProm492;
	jmethodID mid_setCalibrationCoefficientsIntoEEProm493;
	jmethodID mid_getEEPromInfo494;
	jmethodID mid_setEEPromInfo495;
	jmethodID mid_setDetectorSetPointCelsius496;
	jmethodID mid_setExternalTriggerMode497;
	jmethodID mid_setExternalTriggerMode498;
	jmethodID mid_getExternalTriggerMode499;
	jmethodID mid_getExternalTriggerMode500;
	jmethodID mid_setCorrectForElectricalDark501;
	jmethodID mid_setCorrectForElectricalDark502;
	jmethodID mid_getCorrectForElectricalDark503;
	jmethodID mid_getCorrectForElectricalDark504;
	jmethodID mid_getCorrectForStrayLight505;
	jmethodID mid_getCorrectForStrayLight506;
	jmethodID mid_setCorrectForDetectorNonlinearity507;
	jmethodID mid_setCorrectForDetectorNonlinearity508;
	jmethodID mid_getCorrectForDetectorNonlinearity509;
	jmethodID mid_getCorrectForDetectorNonlinearity510;
	jmethodID mid_setStrobeEnable511;
	jmethodID mid_setStrobeEnable512;
	jmethodID mid_getStrobeEnable513;
	jmethodID mid_getStrobeEnable514;
	jmethodID mid_getWavelength515;
	jmethodID mid_getWavelength516;
	jmethodID mid_getWavelengths517;
	jmethodID mid_getWavelengths518;
	jmethodID mid_getWavelengthIntercept519;
	jmethodID mid_getWavelengthIntercept520;
	jmethodID mid_getWavelengthFirst521;
	jmethodID mid_getWavelengthFirst522;
	jmethodID mid_getWavelengthSecond523;
	jmethodID mid_getWavelengthSecond524;
	jmethodID mid_getWavelengthThird525;
	jmethodID mid_getWavelengthThird526;
	jmethodID mid_setUSBTimeout527;
	jmethodID mid_isUSBTimeout528;
	jmethodID mid_isUSBTimeout529;
	jmethodID mid_isSpectrumValid530;
	jmethodID mid_isSpectrumValid531;
	jmethodID mid_getSpectrum532;
	jmethodID mid_getSpectrum533;
	jmethodID mid_stopAveraging534;
	jmethodID mid_stopAveraging535;
	jmethodID mid_isSaturated536;
	jmethodID mid_isSaturated537;
	jmethodID mid_closeAllSpectrometers538;
	jmethodID mid_closeSpectrometer539;
	jmethodID mid_getFeatureControllerGPIO540;
	jmethodID mid_isFeatureSupportedGPIO541;
	jmethodID mid_getFeatureControllerSaturationThreshold542;
	jmethodID mid_isFeatureSupportedSaturationThreshold543;
	jmethodID mid_getFeatureControllerSPIBus544;
	jmethodID mid_isFeatureSupportedSPIBus545;
	jmethodID mid_sendSimulatedTriggerSignal546;
	jmethodID mid_flushSpectrum547;
	jmethodID mid_getFeatureControllerLightSource548;
	jmethodID mid_isFeatureSupportedLightSource549;
	jmethodID mid_getFeatureControllerSingleStrobe550;
	jmethodID mid_isFeatureSupportedSingleStrobe551;
	jmethodID mid_getFeatureControllerContinuousStrobe552;
	jmethodID mid_isFeatureSupportedContinuousStrobe553;
	jmethodID mid_getFeatureControllerCurrentOut554;
	jmethodID mid_isFeatureSupportedCurrentOut555;
	jmethodID mid_getFeatureControllerBoardTemperature556;
	jmethodID mid_isFeatureSupportedBoardTemperature557;
	jmethodID mid_getFeatureControllerDetectorTemperature558;
	jmethodID mid_isFeatureSupportedDetectorTemperature559;
	jmethodID mid_getFeatureControllerAnalogIn560;
	jmethodID mid_isFeatureSupportedAnalogIn561;
	jmethodID mid_getFeatureControllerAnalogOut562;
	jmethodID mid_isFeatureSupportedAnalogOut563;
	jmethodID mid_getFeatureControllerLS450564;
	jmethodID mid_isFeatureSupportedLS450565;
	jmethodID mid_getFeatureController_USB_LS450_ExternalTemperature566;
	jmethodID mid_isFeatureSupported_USB_LS450_ExternalTemperature567;
	jmethodID mid_getFeatureController_UV_VIS_LightSource568;
	jmethodID mid_isFeatureSupported_UV_VIS_LightSource569;
	jmethodID mid_getFeatureControllerPixelBinning570;
	jmethodID mid_isFeatureSupportedPixelBinning571;
	jmethodID mid_isFeatureSupportedNetworkConfigure572;
	jmethodID mid_getFeatureControllerNetworkConfigure573;
	jmethodID mid_getFeatureControllerSpectrumType574;
	jmethodID mid_isFeatureSupportedSpectrumType575;
	jmethodID mid_getFeatureControllerExternalTriggerDelay576;
	jmethodID mid_isFeatureSupportedExternalTriggerDelay577;
	jmethodID mid_getFeatureControllerI2CBus578;
	jmethodID mid_isFeatureSupportedI2CBus579;
	jmethodID mid_getFeatureControllerHighGainMode580;
	jmethodID mid_isFeatureSupportedHighGainMode581;
	jmethodID mid_getFeatureControllerIrradianceCalibrationFactor582;
	jmethodID mid_isFeatureSupportedIrradianceCalibrationFactor583;
	jmethodID mid_getFeatureControllerNonlinearityCorrectionProvider584;
	jmethodID mid_isFeatureSupportedNonlinearityCorrectionProvider585;
	jmethodID mid_getFeatureControllerStrayLightCorrection586;
	jmethodID mid_isFeatureSupportedStrayLightCorrection587;
	jmethodID mid_getFeatureControllerVersion588;
	jmethodID mid_isFeatureSupportedVersion589;
	jmethodID mid_getFeatureControllerWavelengthCalibrationProvider590;
	jmethodID mid_isFeatureSupportedWavelengthCalibrationProvider591;
	jmethodID mid_getFeatureControllerThermoElectric592;
	jmethodID mid_isFeatureSupportedThermoElectric593;
	jmethodID mid_getFeatureControllerIndy594;
	jmethodID mid_isFeatureSupportedIndy595;
	jmethodID mid_getFeatureControllerInternalTrigger596;
	jmethodID mid_isFeatureSupportedInternalTrigger597;
	jmethodID mid_getFeatureControllerDataBuffer598;
	jmethodID mid_isFeatureSupportedDataBuffer599;
	jmethodID mid_setAutoToggleStrobeLampEnable600;
	jmethodID mid_setAutoToggleStrobeLampEnable601;
	jmethodID mid_highSpdAcq_AllocateBuffer602;
	jmethodID mid_highSpdAcq_StartAcquisition603;
	jmethodID mid_highSpdAcq_StartAcquisition604;
	jmethodID mid_highSpdAcq_StopAcquisition605;
	jmethodID mid_highSpdAcq_GetNumberOfSpectraAcquired606;
	jmethodID mid_highSpdAcq_GetSpectrum607;
	jmethodID mid_highSpdAcq_IsSaturated608;
	jmethodID mid_highSpdAcq_GetTimeStamp609;
	jfieldID fid_lastException;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_WRAPPEREXTENSIONS_T
#define EXTERN_TYPEDEF_WRAPPEREXTENSIONS_T
	typedef void* WRAPPEREXTENSIONS_T;
#endif /* EXTERN_TYPEDEF_WRAPPEREXTENSIONS_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_BENCH_T
#define EXTERN_TYPEDEF_BENCH_T
	typedef void* BENCH_T;
#endif /* EXTERN_TYPEDEF_BENCH_T */
#ifndef EXTERN_TYPEDEF_DETECTOR_T
#define EXTERN_TYPEDEF_DETECTOR_T
	typedef void* DETECTOR_T;
#endif /* EXTERN_TYPEDEF_DETECTOR_T */
#ifndef EXTERN_TYPEDEF_STSBENCH_T
#define EXTERN_TYPEDEF_STSBENCH_T
	typedef void* STSBENCH_T;
#endif /* EXTERN_TYPEDEF_STSBENCH_T */
#ifndef EXTERN_TYPEDEF_COEFFICIENTS_T
#define EXTERN_TYPEDEF_COEFFICIENTS_T
	typedef void* COEFFICIENTS_T;
#endif /* EXTERN_TYPEDEF_COEFFICIENTS_T */
#ifndef EXTERN_TYPEDEF_GPIO_T
#define EXTERN_TYPEDEF_GPIO_T
	typedef void* GPIO_T;
#endif /* EXTERN_TYPEDEF_GPIO_T */
#ifndef EXTERN_TYPEDEF_SATURATIONTHRESHOLD_T
#define EXTERN_TYPEDEF_SATURATIONTHRESHOLD_T
	typedef void* SATURATIONTHRESHOLD_T;
#endif /* EXTERN_TYPEDEF_SATURATIONTHRESHOLD_T */
#ifndef EXTERN_TYPEDEF_SPIBUS_T
#define EXTERN_TYPEDEF_SPIBUS_T
	typedef void* SPIBUS_T;
#endif /* EXTERN_TYPEDEF_SPIBUS_T */
#ifndef EXTERN_TYPEDEF_LIGHTSOURCE_T
#define EXTERN_TYPEDEF_LIGHTSOURCE_T
	typedef void* LIGHTSOURCE_T;
#endif /* EXTERN_TYPEDEF_LIGHTSOURCE_T */
#ifndef EXTERN_TYPEDEF_SINGLESTROBE_T
#define EXTERN_TYPEDEF_SINGLESTROBE_T
	typedef void* SINGLESTROBE_T;
#endif /* EXTERN_TYPEDEF_SINGLESTROBE_T */
#ifndef EXTERN_TYPEDEF_CONTINUOUSSTROBE_T
#define EXTERN_TYPEDEF_CONTINUOUSSTROBE_T
	typedef void* CONTINUOUSSTROBE_T;
#endif /* EXTERN_TYPEDEF_CONTINUOUSSTROBE_T */
#ifndef EXTERN_TYPEDEF_CURRENTOUT_T
#define EXTERN_TYPEDEF_CURRENTOUT_T
	typedef void* CURRENTOUT_T;
#endif /* EXTERN_TYPEDEF_CURRENTOUT_T */
#ifndef EXTERN_TYPEDEF_BOARDTEMPERATURE_T
#define EXTERN_TYPEDEF_BOARDTEMPERATURE_T
	typedef void* BOARDTEMPERATURE_T;
#endif /* EXTERN_TYPEDEF_BOARDTEMPERATURE_T */
#ifndef EXTERN_TYPEDEF_DETECTORTEMPERATURE_T
#define EXTERN_TYPEDEF_DETECTORTEMPERATURE_T
	typedef void* DETECTORTEMPERATURE_T;
#endif /* EXTERN_TYPEDEF_DETECTORTEMPERATURE_T */
#ifndef EXTERN_TYPEDEF_ANALOGIN_T
#define EXTERN_TYPEDEF_ANALOGIN_T
	typedef void* ANALOGIN_T;
#endif /* EXTERN_TYPEDEF_ANALOGIN_T */
#ifndef EXTERN_TYPEDEF_ANALOGOUT_T
#define EXTERN_TYPEDEF_ANALOGOUT_T
	typedef void* ANALOGOUT_T;
#endif /* EXTERN_TYPEDEF_ANALOGOUT_T */
#ifndef EXTERN_TYPEDEF_LS450_FUNCTIONS_T
#define EXTERN_TYPEDEF_LS450_FUNCTIONS_T
	typedef void* LS450_FUNCTIONS_T;
#endif /* EXTERN_TYPEDEF_LS450_FUNCTIONS_T */
#ifndef EXTERN_TYPEDEF_EXTERNALTEMPERATUREWRAPPER_T
#define EXTERN_TYPEDEF_EXTERNALTEMPERATUREWRAPPER_T
	typedef void* EXTERNALTEMPERATUREWRAPPER_T;
#endif /* EXTERN_TYPEDEF_EXTERNALTEMPERATUREWRAPPER_T */
#ifndef EXTERN_TYPEDEF_UV_VIS_LIGHTSOURCE_T
#define EXTERN_TYPEDEF_UV_VIS_LIGHTSOURCE_T
	typedef void* UV_VIS_LIGHTSOURCE_T;
#endif /* EXTERN_TYPEDEF_UV_VIS_LIGHTSOURCE_T */
#ifndef EXTERN_TYPEDEF_PIXELBINNINGWRAPPER_T
#define EXTERN_TYPEDEF_PIXELBINNINGWRAPPER_T
	typedef void* PIXELBINNINGWRAPPER_T;
#endif /* EXTERN_TYPEDEF_PIXELBINNINGWRAPPER_T */
#ifndef EXTERN_TYPEDEF_NETWORKCONFIGURE_T
#define EXTERN_TYPEDEF_NETWORKCONFIGURE_T
	typedef void* NETWORKCONFIGURE_T;
#endif /* EXTERN_TYPEDEF_NETWORKCONFIGURE_T */
#ifndef EXTERN_TYPEDEF_SPECTRUMTYPEWRAPPER_T
#define EXTERN_TYPEDEF_SPECTRUMTYPEWRAPPER_T
	typedef void* SPECTRUMTYPEWRAPPER_T;
#endif /* EXTERN_TYPEDEF_SPECTRUMTYPEWRAPPER_T */
#ifndef EXTERN_TYPEDEF_EXTERNALTRIGGERDELAY_T
#define EXTERN_TYPEDEF_EXTERNALTRIGGERDELAY_T
	typedef void* EXTERNALTRIGGERDELAY_T;
#endif /* EXTERN_TYPEDEF_EXTERNALTRIGGERDELAY_T */
#ifndef EXTERN_TYPEDEF_I2CBUS_T
#define EXTERN_TYPEDEF_I2CBUS_T
	typedef void* I2CBUS_T;
#endif /* EXTERN_TYPEDEF_I2CBUS_T */
#ifndef EXTERN_TYPEDEF_HIGHGAINMODE_T
#define EXTERN_TYPEDEF_HIGHGAINMODE_T
	typedef void* HIGHGAINMODE_T;
#endif /* EXTERN_TYPEDEF_HIGHGAINMODE_T */
#ifndef EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTOR_T
#define EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTOR_T
	typedef void* IRRADIANCECALIBRATIONFACTOR_T;
#endif /* EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTOR_T */
#ifndef EXTERN_TYPEDEF_NONLINEARITYCORRECTIONPROVIDER_T
#define EXTERN_TYPEDEF_NONLINEARITYCORRECTIONPROVIDER_T
	typedef void* NONLINEARITYCORRECTIONPROVIDER_T;
#endif /* EXTERN_TYPEDEF_NONLINEARITYCORRECTIONPROVIDER_T */
#ifndef EXTERN_TYPEDEF_STRAYLIGHTCORRECTION_T
#define EXTERN_TYPEDEF_STRAYLIGHTCORRECTION_T
	typedef void* STRAYLIGHTCORRECTION_T;
#endif /* EXTERN_TYPEDEF_STRAYLIGHTCORRECTION_T */
#ifndef EXTERN_TYPEDEF_VERSION_T
#define EXTERN_TYPEDEF_VERSION_T
	typedef void* VERSION_T;
#endif /* EXTERN_TYPEDEF_VERSION_T */
#ifndef EXTERN_TYPEDEF_WAVELENGTHCALIBRATIONPROVIDER_T
#define EXTERN_TYPEDEF_WAVELENGTHCALIBRATIONPROVIDER_T
	typedef void* WAVELENGTHCALIBRATIONPROVIDER_T;
#endif /* EXTERN_TYPEDEF_WAVELENGTHCALIBRATIONPROVIDER_T */
#ifndef EXTERN_TYPEDEF_THERMOELECTRICWRAPPER_T
#define EXTERN_TYPEDEF_THERMOELECTRICWRAPPER_T
	typedef void* THERMOELECTRICWRAPPER_T;
#endif /* EXTERN_TYPEDEF_THERMOELECTRICWRAPPER_T */
#ifndef EXTERN_TYPEDEF_INDY_T
#define EXTERN_TYPEDEF_INDY_T
	typedef void* INDY_T;
#endif /* EXTERN_TYPEDEF_INDY_T */
#ifndef EXTERN_TYPEDEF_INTERNALTRIGGERWRAPPER_T
#define EXTERN_TYPEDEF_INTERNALTRIGGERWRAPPER_T
	typedef void* INTERNALTRIGGERWRAPPER_T;
#endif /* EXTERN_TYPEDEF_INTERNALTRIGGERWRAPPER_T */
#ifndef EXTERN_TYPEDEF_DATABUFFER_T
#define EXTERN_TYPEDEF_DATABUFFER_T
	typedef void* DATABUFFER_T;
#endif /* EXTERN_TYPEDEF_DATABUFFER_T */
#ifndef EXTERN_TYPEDEF_HIGHRESTIMESTAMP_T
#define EXTERN_TYPEDEF_HIGHRESTIMESTAMP_T
	typedef void* HIGHRESTIMESTAMP_T;
#endif /* EXTERN_TYPEDEF_HIGHRESTIMESTAMP_T */
#ifndef EXTERN_TYPEDEF_WRAPPER_T
#define EXTERN_TYPEDEF_WRAPPER_T
	typedef void* WRAPPER_T;
#endif /* EXTERN_TYPEDEF_WRAPPER_T */

	EXPORTED WRAPPER_T Wrapper_Create();
	EXPORTED void Wrapper_getWrapperExtensions(WRAPPER_T c_wrapper, WRAPPEREXTENSIONS_T retval);
	EXPORTED short Wrapper_exportToGramsSPC(WRAPPER_T c_wrapper, int spectrometerIndex, JSTRING_T outputPathname, DOUBLEARRAY_T pixels, JSTRING_T username);
	EXPORTED short Wrapper_exportToGramsSPC_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, JSTRING_T outputPathname, DOUBLEARRAY_T pixels, JSTRING_T username);
	EXPORTED void Wrapper_getApiVersion(WRAPPER_T c_wrapper, JSTRING_T retval);
	EXPORTED int Wrapper_getBuildNumber(WRAPPER_T c_wrapper);
	EXPORTED void Wrapper_getLastException(WRAPPER_T c_wrapper, JSTRING_T retval);
	EXPORTED void Wrapper_getLastExceptionStackTrace(WRAPPER_T c_wrapper, JSTRING_T retval);
	EXPORTED int Wrapper_openNetworkSpectrometer(WRAPPER_T c_wrapper, JSTRING_T ipAddress);
	EXPORTED void Wrapper_setNetworkCommunicationParameters(WRAPPER_T c_wrapper, int spectrometerIndex, int socketTimeoutMilliseconds, short checkForBytesAvailable, int spectrumReadThrottleMilliseconds, int spectrumReadRetryLimit);
	EXPORTED int Wrapper_openAllSpectrometers(WRAPPER_T c_wrapper);
	EXPORTED void Wrapper_getName(WRAPPER_T c_wrapper, int spectrometerIndex, JSTRING_T retval);
	EXPORTED int Wrapper_getMaximumIntegrationTime(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int Wrapper_getMinimumIntegrationTime(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int Wrapper_getIntegrationStepIncrement(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int Wrapper_getMaximumIntensity(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int Wrapper_getNumberOfSpectrometersFound(WRAPPER_T c_wrapper);
	EXPORTED void Wrapper_getFirmwareVersion(WRAPPER_T c_wrapper, int spectrometerIndex, JSTRING_T retval);
	EXPORTED void Wrapper_getFirmwareModel(WRAPPER_T c_wrapper, int spectrometerIndex, JSTRING_T retval);
	EXPORTED void Wrapper_getSerialNumber(WRAPPER_T c_wrapper, int spectrometerIndex, JSTRING_T retval);
	EXPORTED int Wrapper_getNumberOfPixels(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int Wrapper_getNumberOfPixels_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED int Wrapper_getNumberOfDarkPixels(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int Wrapper_getNumberOfDarkPixels_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED void Wrapper_readRawUSB(WRAPPER_T c_wrapper, int spectrometerIndex, int inEP, int length, CHARARRAY_T retval);
	EXPORTED int Wrapper_writeRawUSB(WRAPPER_T c_wrapper, int spectrometerIndex, int outEP, CHARARRAY_T message, int length);
	EXPORTED void Wrapper_setIntegrationTime(WRAPPER_T c_wrapper, int spectrometerIndex, int usec);
	EXPORTED void Wrapper_setIntegrationTime_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, int usec);
	EXPORTED int Wrapper_getIntegrationTime(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int Wrapper_getIntegrationTime_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED void Wrapper_setScansToAverage(WRAPPER_T c_wrapper, int spectrometerIndex, int numberOfScansToAverage);
	EXPORTED void Wrapper_setScansToAverage_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, int numberOfScansToAverage);
	EXPORTED int Wrapper_getScansToAverage(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int Wrapper_getScansToAverage_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED void Wrapper_getBench(WRAPPER_T c_wrapper, int spectrometerIndex, BENCH_T retval);
	EXPORTED void Wrapper_getBench_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, BENCH_T retval);
	EXPORTED void Wrapper_getDetector(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, DETECTOR_T retval);
	EXPORTED short Wrapper_saveSTSConfiguration(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getSTSBench(WRAPPER_T c_wrapper, int spectrometerIndex, STSBENCH_T retval);
	EXPORTED void Wrapper_setBoxcarWidth(WRAPPER_T c_wrapper, int spectrometerIndex, int numberOfPixelsOnEitherSideOfCenter);
	EXPORTED void Wrapper_setBoxcarWidth_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, int numberOfPixelsOnEitherSideOfCenter);
	EXPORTED int Wrapper_getBoxcarWidth(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int Wrapper_getBoxcarWidth_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED short Wrapper_insertKey(WRAPPER_T c_wrapper, JSTRING_T keyValue);
	EXPORTED void Wrapper_removeKey(WRAPPER_T c_wrapper);
	EXPORTED void Wrapper_getCalibrationCoefficientsFromBuffer(WRAPPER_T c_wrapper, int spectrometerIndex, COEFFICIENTS_T retval);
	EXPORTED void Wrapper_getCalibrationCoefficientsFromBuffer_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, COEFFICIENTS_T retval);
	EXPORTED void Wrapper_getCalibrationCoefficientsFromEEProm(WRAPPER_T c_wrapper, int spectrometerIndex, COEFFICIENTS_T retval);
	EXPORTED void Wrapper_getCalibrationCoefficientsFromEEProm_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, COEFFICIENTS_T retval);
	EXPORTED short Wrapper_setCalibrationCoefficientsIntoBuffer(WRAPPER_T c_wrapper, int spectrometerIndex, COEFFICIENTS_T coefficients, short applyWavelengthCoefficients, short applyStrayLightConstant, short applyNonlinearityCoefficients);
	EXPORTED short Wrapper_setCalibrationCoefficientsIntoBuffer_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, COEFFICIENTS_T newCoefficients, short applyWavelengthCoefficients, short applyStrayLightConstant, short applyNonlinearityCoefficients);
	EXPORTED short Wrapper_setCalibrationCoefficientsIntoEEProm(WRAPPER_T c_wrapper, int spectrometerIndex, COEFFICIENTS_T coefficients, short applyWavelengthCoefficients, short applyStrayLightConstant, short applyNonlinearityCoefficients);
	EXPORTED short Wrapper_setCalibrationCoefficientsIntoEEProm_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, COEFFICIENTS_T newCoefficients, short applyWavelengthCoefficients, short applyStrayLightConstants, short applyNonlinearityCoefficients);
	EXPORTED void Wrapper_getEEPromInfo(WRAPPER_T c_wrapper, int spectrometerIndex, int slot, JSTRING_T retval);
	EXPORTED short Wrapper_setEEPromInfo(WRAPPER_T c_wrapper, int spectrometerIndex, int slot, JSTRING_T str);
	EXPORTED short Wrapper_setDetectorSetPointCelsius(WRAPPER_T c_wrapper, int spectrometerIndex, double temperatureCelsius);
	EXPORTED void Wrapper_setExternalTriggerMode(WRAPPER_T c_wrapper, int spectrometerIndex, int mode);
	EXPORTED void Wrapper_setExternalTriggerMode_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, int mode);
	EXPORTED int Wrapper_getExternalTriggerMode(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int Wrapper_getExternalTriggerMode_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED void Wrapper_setCorrectForElectricalDark(WRAPPER_T c_wrapper, int spectrometerIndex, int enable);
	EXPORTED void Wrapper_setCorrectForElectricalDark_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, int enable);
	EXPORTED short Wrapper_getCorrectForElectricalDark(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED short Wrapper_getCorrectForElectricalDark_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED short Wrapper_getCorrectForStrayLight(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED short Wrapper_getCorrectForStrayLight_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED short Wrapper_setCorrectForDetectorNonlinearity(WRAPPER_T c_wrapper, int spectrometerIndex, int enable);
	EXPORTED short Wrapper_setCorrectForDetectorNonlinearity_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, int enable);
	EXPORTED short Wrapper_getCorrectForDetectorNonlinearity(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED short Wrapper_getCorrectForDetectorNonlinearity_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED void Wrapper_setStrobeEnable(WRAPPER_T c_wrapper, int spectrometerIndex, int lampOn);
	EXPORTED void Wrapper_setStrobeEnable_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, int lampOn);
	EXPORTED int Wrapper_getStrobeEnable(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int Wrapper_getStrobeEnable_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED double Wrapper_getWavelength(WRAPPER_T c_wrapper, int spectrometerIndex, int pixel);
	EXPORTED double Wrapper_getWavelength_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, int pixel);
	EXPORTED void Wrapper_getWavelengths(WRAPPER_T c_wrapper, int spectrometerIndex, DOUBLEARRAY_T retval);
	EXPORTED void Wrapper_getWavelengths_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, DOUBLEARRAY_T retval);
	EXPORTED double Wrapper_getWavelengthIntercept(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED double Wrapper_getWavelengthIntercept_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED double Wrapper_getWavelengthFirst(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED double Wrapper_getWavelengthFirst_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED double Wrapper_getWavelengthSecond(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED double Wrapper_getWavelengthSecond_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED double Wrapper_getWavelengthThird(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED double Wrapper_getWavelengthThird_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED int Wrapper_setUSBTimeout(WRAPPER_T c_wrapper, int spectrometerIndex, int timeoutMilliseconds);
	EXPORTED short Wrapper_isUSBTimeout(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED short Wrapper_isUSBTimeout_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED short Wrapper_isSpectrumValid(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED short Wrapper_isSpectrumValid_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED void Wrapper_getSpectrum(WRAPPER_T c_wrapper, int spectrometerIndex, DOUBLEARRAY_T retval);
	EXPORTED void Wrapper_getSpectrum_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, DOUBLEARRAY_T retval);
	EXPORTED void Wrapper_stopAveraging(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_stopAveraging_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED short Wrapper_isSaturated(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED short Wrapper_isSaturated_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED void Wrapper_closeAllSpectrometers(WRAPPER_T c_wrapper);
	EXPORTED void Wrapper_closeSpectrometer(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerGPIO(WRAPPER_T c_wrapper, int spectrometerIndex, GPIO_T retval);
	EXPORTED short Wrapper_isFeatureSupportedGPIO(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerSaturationThreshold(WRAPPER_T c_wrapper, int spectrometerIndex, SATURATIONTHRESHOLD_T retval);
	EXPORTED short Wrapper_isFeatureSupportedSaturationThreshold(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerSPIBus(WRAPPER_T c_wrapper, int spectrometerIndex, SPIBUS_T retval);
	EXPORTED short Wrapper_isFeatureSupportedSPIBus(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED short Wrapper_sendSimulatedTriggerSignal(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED short Wrapper_flushSpectrum(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerLightSource(WRAPPER_T c_wrapper, int spectrometerIndex, LIGHTSOURCE_T retval);
	EXPORTED short Wrapper_isFeatureSupportedLightSource(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerSingleStrobe(WRAPPER_T c_wrapper, int spectrometerIndex, SINGLESTROBE_T retval);
	EXPORTED short Wrapper_isFeatureSupportedSingleStrobe(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerContinuousStrobe(WRAPPER_T c_wrapper, int spectrometerIndex, CONTINUOUSSTROBE_T retval);
	EXPORTED short Wrapper_isFeatureSupportedContinuousStrobe(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerCurrentOut(WRAPPER_T c_wrapper, int spectrometerIndex, CURRENTOUT_T retval);
	EXPORTED short Wrapper_isFeatureSupportedCurrentOut(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerBoardTemperature(WRAPPER_T c_wrapper, int spectrometerIndex, BOARDTEMPERATURE_T retval);
	EXPORTED short Wrapper_isFeatureSupportedBoardTemperature(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerDetectorTemperature(WRAPPER_T c_wrapper, int spectrometerIndex, DETECTORTEMPERATURE_T retval);
	EXPORTED short Wrapper_isFeatureSupportedDetectorTemperature(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerAnalogIn(WRAPPER_T c_wrapper, int spectrometerIndex, ANALOGIN_T retval);
	EXPORTED short Wrapper_isFeatureSupportedAnalogIn(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerAnalogOut(WRAPPER_T c_wrapper, int spectrometerIndex, ANALOGOUT_T retval);
	EXPORTED short Wrapper_isFeatureSupportedAnalogOut(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerLS450(WRAPPER_T c_wrapper, int spectrometerIndex, LS450_FUNCTIONS_T retval);
	EXPORTED short Wrapper_isFeatureSupportedLS450(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureController_USB_LS450_ExternalTemperature(WRAPPER_T c_wrapper, int spectrometerIndex, EXTERNALTEMPERATUREWRAPPER_T retval);
	EXPORTED short Wrapper_isFeatureSupported_USB_LS450_ExternalTemperature(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureController_UV_VIS_LightSource(WRAPPER_T c_wrapper, int spectrometerIndex, UV_VIS_LIGHTSOURCE_T retval);
	EXPORTED short Wrapper_isFeatureSupported_UV_VIS_LightSource(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerPixelBinning(WRAPPER_T c_wrapper, int spectrometerIndex, PIXELBINNINGWRAPPER_T retval);
	EXPORTED short Wrapper_isFeatureSupportedPixelBinning(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED short Wrapper_isFeatureSupportedNetworkConfigure(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerNetworkConfigure(WRAPPER_T c_wrapper, int spectrometerIndex, NETWORKCONFIGURE_T retval);
	EXPORTED void Wrapper_getFeatureControllerSpectrumType(WRAPPER_T c_wrapper, int spectrometerIndex, SPECTRUMTYPEWRAPPER_T retval);
	EXPORTED short Wrapper_isFeatureSupportedSpectrumType(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerExternalTriggerDelay(WRAPPER_T c_wrapper, int spectrometerIndex, EXTERNALTRIGGERDELAY_T retval);
	EXPORTED short Wrapper_isFeatureSupportedExternalTriggerDelay(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerI2CBus(WRAPPER_T c_wrapper, int spectrometerIndex, I2CBUS_T retval);
	EXPORTED short Wrapper_isFeatureSupportedI2CBus(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerHighGainMode(WRAPPER_T c_wrapper, int spectrometerIndex, HIGHGAINMODE_T retval);
	EXPORTED short Wrapper_isFeatureSupportedHighGainMode(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerIrradianceCalibrationFactor(WRAPPER_T c_wrapper, int spectrometerIndex, IRRADIANCECALIBRATIONFACTOR_T retval);
	EXPORTED short Wrapper_isFeatureSupportedIrradianceCalibrationFactor(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerNonlinearityCorrectionProvider(WRAPPER_T c_wrapper, int spectrometerIndex, NONLINEARITYCORRECTIONPROVIDER_T retval);
	EXPORTED short Wrapper_isFeatureSupportedNonlinearityCorrectionProvider(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerStrayLightCorrection(WRAPPER_T c_wrapper, int spectrometerIndex, STRAYLIGHTCORRECTION_T retval);
	EXPORTED short Wrapper_isFeatureSupportedStrayLightCorrection(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerVersion(WRAPPER_T c_wrapper, int spectrometerIndex, VERSION_T retval);
	EXPORTED short Wrapper_isFeatureSupportedVersion(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerWavelengthCalibrationProvider(WRAPPER_T c_wrapper, int spectrometerIndex, WAVELENGTHCALIBRATIONPROVIDER_T retval);
	EXPORTED short Wrapper_isFeatureSupportedWavelengthCalibrationProvider(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerThermoElectric(WRAPPER_T c_wrapper, int spectrometerIndex, THERMOELECTRICWRAPPER_T retval);
	EXPORTED short Wrapper_isFeatureSupportedThermoElectric(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerIndy(WRAPPER_T c_wrapper, int spectrometerIndex, INDY_T retval);
	EXPORTED short Wrapper_isFeatureSupportedIndy(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerInternalTrigger(WRAPPER_T c_wrapper, int spectrometerIndex, INTERNALTRIGGERWRAPPER_T retval);
	EXPORTED short Wrapper_isFeatureSupportedInternalTrigger(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_getFeatureControllerDataBuffer(WRAPPER_T c_wrapper, int spectrometerIndex, DATABUFFER_T retval);
	EXPORTED short Wrapper_isFeatureSupportedDataBuffer(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_setAutoToggleStrobeLampEnable(WRAPPER_T c_wrapper, int spectrometerIndex, short enable);
	EXPORTED void Wrapper_setAutoToggleStrobeLampEnable_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, short enable);
	EXPORTED void Wrapper_highSpdAcq_AllocateBuffer(WRAPPER_T c_wrapper, int spectrometerIndex, int numberOfSpectra);
	EXPORTED void Wrapper_highSpdAcq_StartAcquisition(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void Wrapper_highSpdAcq_StartAcquisition_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED void Wrapper_highSpdAcq_StopAcquisition(WRAPPER_T c_wrapper);
	EXPORTED int Wrapper_highSpdAcq_GetNumberOfSpectraAcquired(WRAPPER_T c_wrapper);
	EXPORTED void Wrapper_highSpdAcq_GetSpectrum(WRAPPER_T c_wrapper, int spectrumNumber, DOUBLEARRAY_T retval);
	EXPORTED short Wrapper_highSpdAcq_IsSaturated(WRAPPER_T c_wrapper, int spectrumNumber);
	EXPORTED void Wrapper_highSpdAcq_GetTimeStamp(WRAPPER_T c_wrapper, int spectrumNumber, HIGHRESTIMESTAMP_T retval);
	EXPORTED void Wrapper_Destroy(WRAPPER_T wrapper);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED WRAPPER_T STDCALL Wrapper_Create_stdcall();
	EXPORTED void STDCALL Wrapper_getWrapperExtensions_stdcall(WRAPPER_T c_wrapper, WRAPPEREXTENSIONS_T retval);
	EXPORTED short STDCALL Wrapper_exportToGramsSPC_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, JSTRING_T outputPathname, DOUBLEARRAY_T pixels, JSTRING_T username);
	EXPORTED short STDCALL Wrapper_exportToGramsSPC_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, JSTRING_T outputPathname, DOUBLEARRAY_T pixels, JSTRING_T username);
	EXPORTED void STDCALL Wrapper_getApiVersion_stdcall(WRAPPER_T c_wrapper, JSTRING_T retval);
	EXPORTED int STDCALL Wrapper_getBuildNumber_stdcall(WRAPPER_T c_wrapper);
	EXPORTED void STDCALL Wrapper_getLastException_stdcall(WRAPPER_T c_wrapper, JSTRING_T retval);
	EXPORTED void STDCALL Wrapper_getLastExceptionStackTrace_stdcall(WRAPPER_T c_wrapper, JSTRING_T retval);
	EXPORTED int STDCALL Wrapper_openNetworkSpectrometer_stdcall(WRAPPER_T c_wrapper, JSTRING_T ipAddress);
	EXPORTED void STDCALL Wrapper_setNetworkCommunicationParameters_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, int socketTimeoutMilliseconds, short checkForBytesAvailable, int spectrumReadThrottleMilliseconds, int spectrumReadRetryLimit);
	EXPORTED int STDCALL Wrapper_openAllSpectrometers_stdcall(WRAPPER_T c_wrapper);
	EXPORTED void STDCALL Wrapper_getName_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, JSTRING_T retval);
	EXPORTED int STDCALL Wrapper_getMaximumIntegrationTime_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int STDCALL Wrapper_getMinimumIntegrationTime_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int STDCALL Wrapper_getIntegrationStepIncrement_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int STDCALL Wrapper_getMaximumIntensity_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int STDCALL Wrapper_getNumberOfSpectrometersFound_stdcall(WRAPPER_T c_wrapper);
	EXPORTED void STDCALL Wrapper_getFirmwareVersion_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, JSTRING_T retval);
	EXPORTED void STDCALL Wrapper_getFirmwareModel_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, JSTRING_T retval);
	EXPORTED void STDCALL Wrapper_getSerialNumber_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, JSTRING_T retval);
	EXPORTED int STDCALL Wrapper_getNumberOfPixels_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int STDCALL Wrapper_getNumberOfPixels_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED int STDCALL Wrapper_getNumberOfDarkPixels_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int STDCALL Wrapper_getNumberOfDarkPixels_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED void STDCALL Wrapper_readRawUSB_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, int inEP, int length, CHARARRAY_T retval);
	EXPORTED int STDCALL Wrapper_writeRawUSB_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, int outEP, CHARARRAY_T message, int length);
	EXPORTED void STDCALL Wrapper_setIntegrationTime_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, int usec);
	EXPORTED void STDCALL Wrapper_setIntegrationTime_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, int usec);
	EXPORTED int STDCALL Wrapper_getIntegrationTime_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int STDCALL Wrapper_getIntegrationTime_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED void STDCALL Wrapper_setScansToAverage_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, int numberOfScansToAverage);
	EXPORTED void STDCALL Wrapper_setScansToAverage_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, int numberOfScansToAverage);
	EXPORTED int STDCALL Wrapper_getScansToAverage_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int STDCALL Wrapper_getScansToAverage_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED void STDCALL Wrapper_getBench_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, BENCH_T retval);
	EXPORTED void STDCALL Wrapper_getBench_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, BENCH_T retval);
	EXPORTED void STDCALL Wrapper_getDetector_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, DETECTOR_T retval);
	EXPORTED short STDCALL Wrapper_saveSTSConfiguration_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getSTSBench_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, STSBENCH_T retval);
	EXPORTED void STDCALL Wrapper_setBoxcarWidth_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, int numberOfPixelsOnEitherSideOfCenter);
	EXPORTED void STDCALL Wrapper_setBoxcarWidth_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, int numberOfPixelsOnEitherSideOfCenter);
	EXPORTED int STDCALL Wrapper_getBoxcarWidth_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int STDCALL Wrapper_getBoxcarWidth_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED short STDCALL Wrapper_insertKey_stdcall(WRAPPER_T c_wrapper, JSTRING_T keyValue);
	EXPORTED void STDCALL Wrapper_removeKey_stdcall(WRAPPER_T c_wrapper);
	EXPORTED void STDCALL Wrapper_getCalibrationCoefficientsFromBuffer_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, COEFFICIENTS_T retval);
	EXPORTED void STDCALL Wrapper_getCalibrationCoefficientsFromBuffer_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, COEFFICIENTS_T retval);
	EXPORTED void STDCALL Wrapper_getCalibrationCoefficientsFromEEProm_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, COEFFICIENTS_T retval);
	EXPORTED void STDCALL Wrapper_getCalibrationCoefficientsFromEEProm_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, COEFFICIENTS_T retval);
	EXPORTED short STDCALL Wrapper_setCalibrationCoefficientsIntoBuffer_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, COEFFICIENTS_T coefficients, short applyWavelengthCoefficients, short applyStrayLightConstant, short applyNonlinearityCoefficients);
	EXPORTED short STDCALL Wrapper_setCalibrationCoefficientsIntoBuffer_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, COEFFICIENTS_T newCoefficients, short applyWavelengthCoefficients, short applyStrayLightConstant, short applyNonlinearityCoefficients);
	EXPORTED short STDCALL Wrapper_setCalibrationCoefficientsIntoEEProm_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, COEFFICIENTS_T coefficients, short applyWavelengthCoefficients, short applyStrayLightConstant, short applyNonlinearityCoefficients);
	EXPORTED short STDCALL Wrapper_setCalibrationCoefficientsIntoEEProm_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, COEFFICIENTS_T newCoefficients, short applyWavelengthCoefficients, short applyStrayLightConstants, short applyNonlinearityCoefficients);
	EXPORTED void STDCALL Wrapper_getEEPromInfo_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, int slot, JSTRING_T retval);
	EXPORTED short STDCALL Wrapper_setEEPromInfo_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, int slot, JSTRING_T str);
	EXPORTED short STDCALL Wrapper_setDetectorSetPointCelsius_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, double temperatureCelsius);
	EXPORTED void STDCALL Wrapper_setExternalTriggerMode_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, int mode);
	EXPORTED void STDCALL Wrapper_setExternalTriggerMode_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, int mode);
	EXPORTED int STDCALL Wrapper_getExternalTriggerMode_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int STDCALL Wrapper_getExternalTriggerMode_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED void STDCALL Wrapper_setCorrectForElectricalDark_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, int enable);
	EXPORTED void STDCALL Wrapper_setCorrectForElectricalDark_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, int enable);
	EXPORTED short STDCALL Wrapper_getCorrectForElectricalDark_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED short STDCALL Wrapper_getCorrectForElectricalDark_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED short STDCALL Wrapper_getCorrectForStrayLight_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED short STDCALL Wrapper_getCorrectForStrayLight_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED short STDCALL Wrapper_setCorrectForDetectorNonlinearity_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, int enable);
	EXPORTED short STDCALL Wrapper_setCorrectForDetectorNonlinearity_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, int enable);
	EXPORTED short STDCALL Wrapper_getCorrectForDetectorNonlinearity_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED short STDCALL Wrapper_getCorrectForDetectorNonlinearity_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED void STDCALL Wrapper_setStrobeEnable_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, int lampOn);
	EXPORTED void STDCALL Wrapper_setStrobeEnable_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, int lampOn);
	EXPORTED int STDCALL Wrapper_getStrobeEnable_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED int STDCALL Wrapper_getStrobeEnable_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED double STDCALL Wrapper_getWavelength_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, int pixel);
	EXPORTED double STDCALL Wrapper_getWavelength_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, int pixel);
	EXPORTED void STDCALL Wrapper_getWavelengths_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL Wrapper_getWavelengths_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, DOUBLEARRAY_T retval);
	EXPORTED double STDCALL Wrapper_getWavelengthIntercept_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED double STDCALL Wrapper_getWavelengthIntercept_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED double STDCALL Wrapper_getWavelengthFirst_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED double STDCALL Wrapper_getWavelengthFirst_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED double STDCALL Wrapper_getWavelengthSecond_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED double STDCALL Wrapper_getWavelengthSecond_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED double STDCALL Wrapper_getWavelengthThird_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED double STDCALL Wrapper_getWavelengthThird_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED int STDCALL Wrapper_setUSBTimeout_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, int timeoutMilliseconds);
	EXPORTED short STDCALL Wrapper_isUSBTimeout_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED short STDCALL Wrapper_isUSBTimeout_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED short STDCALL Wrapper_isSpectrumValid_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED short STDCALL Wrapper_isSpectrumValid_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED void STDCALL Wrapper_getSpectrum_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL Wrapper_getSpectrum_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL Wrapper_stopAveraging_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_stopAveraging_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED short STDCALL Wrapper_isSaturated_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED short STDCALL Wrapper_isSaturated_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED void STDCALL Wrapper_closeAllSpectrometers_stdcall(WRAPPER_T c_wrapper);
	EXPORTED void STDCALL Wrapper_closeSpectrometer_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerGPIO_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, GPIO_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedGPIO_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerSaturationThreshold_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, SATURATIONTHRESHOLD_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedSaturationThreshold_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerSPIBus_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, SPIBUS_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedSPIBus_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED short STDCALL Wrapper_sendSimulatedTriggerSignal_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED short STDCALL Wrapper_flushSpectrum_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerLightSource_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, LIGHTSOURCE_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedLightSource_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerSingleStrobe_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, SINGLESTROBE_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedSingleStrobe_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerContinuousStrobe_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, CONTINUOUSSTROBE_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedContinuousStrobe_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerCurrentOut_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, CURRENTOUT_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedCurrentOut_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerBoardTemperature_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, BOARDTEMPERATURE_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedBoardTemperature_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerDetectorTemperature_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, DETECTORTEMPERATURE_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedDetectorTemperature_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerAnalogIn_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, ANALOGIN_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedAnalogIn_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerAnalogOut_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, ANALOGOUT_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedAnalogOut_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerLS450_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, LS450_FUNCTIONS_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedLS450_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureController_USB_LS450_ExternalTemperature_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, EXTERNALTEMPERATUREWRAPPER_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupported_USB_LS450_ExternalTemperature_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureController_UV_VIS_LightSource_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, UV_VIS_LIGHTSOURCE_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupported_UV_VIS_LightSource_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerPixelBinning_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, PIXELBINNINGWRAPPER_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedPixelBinning_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedNetworkConfigure_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerNetworkConfigure_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, NETWORKCONFIGURE_T retval);
	EXPORTED void STDCALL Wrapper_getFeatureControllerSpectrumType_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, SPECTRUMTYPEWRAPPER_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedSpectrumType_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerExternalTriggerDelay_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, EXTERNALTRIGGERDELAY_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedExternalTriggerDelay_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerI2CBus_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, I2CBUS_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedI2CBus_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerHighGainMode_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, HIGHGAINMODE_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedHighGainMode_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerIrradianceCalibrationFactor_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, IRRADIANCECALIBRATIONFACTOR_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedIrradianceCalibrationFactor_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerNonlinearityCorrectionProvider_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, NONLINEARITYCORRECTIONPROVIDER_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedNonlinearityCorrectionProvider_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerStrayLightCorrection_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, STRAYLIGHTCORRECTION_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedStrayLightCorrection_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerVersion_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, VERSION_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedVersion_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerWavelengthCalibrationProvider_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, WAVELENGTHCALIBRATIONPROVIDER_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedWavelengthCalibrationProvider_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerThermoElectric_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, THERMOELECTRICWRAPPER_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedThermoElectric_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerIndy_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, INDY_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedIndy_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerInternalTrigger_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, INTERNALTRIGGERWRAPPER_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedInternalTrigger_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_getFeatureControllerDataBuffer_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, DATABUFFER_T retval);
	EXPORTED short STDCALL Wrapper_isFeatureSupportedDataBuffer_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_setAutoToggleStrobeLampEnable_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, short enable);
	EXPORTED void STDCALL Wrapper_setAutoToggleStrobeLampEnable_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex, short enable);
	EXPORTED void STDCALL Wrapper_highSpdAcq_AllocateBuffer_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex, int numberOfSpectra);
	EXPORTED void STDCALL Wrapper_highSpdAcq_StartAcquisition_stdcall(WRAPPER_T c_wrapper, int spectrometerIndex);
	EXPORTED void STDCALL Wrapper_highSpdAcq_StartAcquisition_stdcall_1(WRAPPER_T c_wrapper, int spectrometerIndex, int channelIndex);
	EXPORTED void STDCALL Wrapper_highSpdAcq_StopAcquisition_stdcall(WRAPPER_T c_wrapper);
	EXPORTED int STDCALL Wrapper_highSpdAcq_GetNumberOfSpectraAcquired_stdcall(WRAPPER_T c_wrapper);
	EXPORTED void STDCALL Wrapper_highSpdAcq_GetSpectrum_stdcall(WRAPPER_T c_wrapper, int spectrumNumber, DOUBLEARRAY_T retval);
	EXPORTED short STDCALL Wrapper_highSpdAcq_IsSaturated_stdcall(WRAPPER_T c_wrapper, int spectrumNumber);
	EXPORTED void STDCALL Wrapper_highSpdAcq_GetTimeStamp_stdcall(WRAPPER_T c_wrapper, int spectrumNumber, HIGHRESTIMESTAMP_T retval);
	EXPORTED void STDCALL Wrapper_Destroy_stdcall(WRAPPER_T wrapper);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* WRAPPER_H */
