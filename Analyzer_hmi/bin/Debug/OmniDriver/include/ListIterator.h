/**
 * File: ListIterator.h
 * Autogenerated on Mon Aug 04 16:04:22 EDT 2008 based on
 * ListIterator.java
 * for the Java class
 * java/util/ListIterator
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef LISTITERATOR_H
#define LISTITERATOR_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#endif /* INCLUDES_IN_HEADER */


CLASS_TOKEN EXPORTED ListIterator : public BaseJavaClass // CPPClass.getClassDeclaration
{
public: 
	int nextIndex();
	int previousIndex();
	void remove();
	unsigned char hasNext();
	unsigned char hasPrevious();
	~ListIterator();
	// No public default Java constructor; creating one:
	ListIterator();
	// No public Java copy constructor; creating one:
	ListIterator(const ListIterator &that);
	// Creating assignment operator declaration:
	ListIterator &operator=(const ListIterator &that);

private:
	jmethodID mid_nextIndex114;
	jmethodID mid_previousIndex115;
	jmethodID mid_remove116;
	jmethodID mid_hasNext117;
	jmethodID mid_hasPrevious118;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_LISTITERATOR_T
#define EXTERN_TYPEDEF_LISTITERATOR_T
	typedef void* LISTITERATOR_T;
#endif /* EXTERN_TYPEDEF_LISTITERATOR_T */

	// No public default Java constructor; creating one:
	EXPORTED LISTITERATOR_T ListIterator_Create();
	EXPORTED int ListIterator_nextIndex(LISTITERATOR_T c_list_iterator);
	EXPORTED int ListIterator_previousIndex(LISTITERATOR_T c_list_iterator);
	EXPORTED void ListIterator_remove(LISTITERATOR_T c_list_iterator);
	EXPORTED unsigned char ListIterator_hasNext(LISTITERATOR_T c_list_iterator);
	EXPORTED unsigned char ListIterator_hasPrevious(LISTITERATOR_T c_list_iterator);
	EXPORTED void ListIterator_Destroy(LISTITERATOR_T list_iterator);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED int STDCALL ListIterator_nextIndex_stdcall(LISTITERATOR_T c_list_iterator);
	EXPORTED int STDCALL ListIterator_previousIndex_stdcall(LISTITERATOR_T c_list_iterator);
	EXPORTED void STDCALL ListIterator_remove_stdcall(LISTITERATOR_T c_list_iterator);
	EXPORTED unsigned char STDCALL ListIterator_hasNext_stdcall(LISTITERATOR_T c_list_iterator);
	EXPORTED unsigned char STDCALL ListIterator_hasPrevious_stdcall(LISTITERATOR_T c_list_iterator);
	EXPORTED void STDCALL ListIterator_Destroy_stdcall(LISTITERATOR_T list_iterator);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* LISTITERATOR_H */
