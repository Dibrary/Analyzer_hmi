/**
 * File: AnalogOutImpl_ADC1000.h
 * Autogenerated on Fri Mar 23 13:38:30 EDT 2018 based on
 * AnalogOutImpl_ADC1000.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/analogout/AnalogOutImpl_ADC1000
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef ANALOGOUTIMPL_ADC1000_H
#define ANALOGOUTIMPL_ADC1000_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "AnalogOutImpl.h"
#include "USBInterface.h"
#include "JStringArray.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class AnalogOutImpl;
class USBInterface;
class JStringArray;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED AnalogOutImpl_ADC1000 : public AnalogOutImpl // CPPClass.tag001
{
public: 
	AnalogOutImpl_ADC1000(USBInterface& usbInt, int fw, int pins);
	short isFirmwareValid();
	short isDACPresent();
	void setDACCounts(int counts, int channel);
	int readDACCounts(int channel);
	double analogOutCountsToVolts(int counts);
	int getDACMinimum();
	int getDACMaximum();
	int getDACIncrement();
	int getDACPins();
	JStringArray getFeatureGUIClassnames();
	~AnalogOutImpl_ADC1000();
	// No public default Java constructor; creating one:
	AnalogOutImpl_ADC1000();
	// No public Java copy constructor; creating one:
	AnalogOutImpl_ADC1000(const AnalogOutImpl_ADC1000 &that);
	// Creating assignment operator declaration:
	AnalogOutImpl_ADC1000 &operator=(const AnalogOutImpl_ADC1000 &that);

private:
	jmethodID mid_AnalogOutImpl_ADC1000808;
	jmethodID mid_isFirmwareValid809;
	jmethodID mid_isDACPresent810;
	jmethodID mid_setDACCounts811;
	jmethodID mid_readDACCounts812;
	jmethodID mid_analogOutCountsToVolts813;
	jmethodID mid_getDACMinimum814;
	jmethodID mid_getDACMaximum815;
	jmethodID mid_getDACIncrement816;
	jmethodID mid_getDACPins817;
	jmethodID mid_getFeatureGUIClassnames818;
	jfieldID fid_dataOutEndPoint;
	jfieldID fid_lowSpeedInEndPoint;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_ANALOGOUTIMPL_T
#define EXTERN_TYPEDEF_ANALOGOUTIMPL_T
	typedef void* ANALOGOUTIMPL_T;
#endif /* EXTERN_TYPEDEF_ANALOGOUTIMPL_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_JSTRINGARRAY_T
#define EXTERN_TYPEDEF_JSTRINGARRAY_T
	typedef void* JSTRINGARRAY_T;
#endif /* EXTERN_TYPEDEF_JSTRINGARRAY_T */
#ifndef EXTERN_TYPEDEF_ANALOGOUTIMPL_ADC1000_T
#define EXTERN_TYPEDEF_ANALOGOUTIMPL_ADC1000_T
	typedef void* ANALOGOUTIMPL_ADC1000_T;
#endif /* EXTERN_TYPEDEF_ANALOGOUTIMPL_ADC1000_T */

	// No public default Java constructor; creating one:
	EXPORTED ANALOGOUTIMPL_ADC1000_T AnalogOutImpl_ADC1000_Create();
	EXPORTED ANALOGOUTIMPL_ADC1000_T AnalogOutImpl_ADC1000_Create_1(USBINTERFACE_T usbInt, int fw, int pins);
	EXPORTED short AnalogOutImpl_ADC1000_isFirmwareValid(ANALOGOUTIMPL_ADC1000_T c_analog_out_impl_a_d_c1000);
	EXPORTED short AnalogOutImpl_ADC1000_isDACPresent(ANALOGOUTIMPL_ADC1000_T c_analog_out_impl_a_d_c1000);
	EXPORTED void AnalogOutImpl_ADC1000_setDACCounts(ANALOGOUTIMPL_ADC1000_T c_analog_out_impl_a_d_c1000, int counts, int channel);
	EXPORTED int AnalogOutImpl_ADC1000_readDACCounts(ANALOGOUTIMPL_ADC1000_T c_analog_out_impl_a_d_c1000, int channel);
	EXPORTED double AnalogOutImpl_ADC1000_analogOutCountsToVolts(ANALOGOUTIMPL_ADC1000_T c_analog_out_impl_a_d_c1000, int counts);
	EXPORTED int AnalogOutImpl_ADC1000_getDACMinimum(ANALOGOUTIMPL_ADC1000_T c_analog_out_impl_a_d_c1000);
	EXPORTED int AnalogOutImpl_ADC1000_getDACMaximum(ANALOGOUTIMPL_ADC1000_T c_analog_out_impl_a_d_c1000);
	EXPORTED int AnalogOutImpl_ADC1000_getDACIncrement(ANALOGOUTIMPL_ADC1000_T c_analog_out_impl_a_d_c1000);
	EXPORTED int AnalogOutImpl_ADC1000_getDACPins(ANALOGOUTIMPL_ADC1000_T c_analog_out_impl_a_d_c1000);
	EXPORTED void AnalogOutImpl_ADC1000_getFeatureGUIClassnames(ANALOGOUTIMPL_ADC1000_T c_analog_out_impl_a_d_c1000, JSTRINGARRAY_T retval);
	EXPORTED void AnalogOutImpl_ADC1000_Destroy(ANALOGOUTIMPL_ADC1000_T analog_out_impl_a_d_c1000);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED ANALOGOUTIMPL_ADC1000_T STDCALL AnalogOutImpl_ADC1000_Create_stdcall_1(USBINTERFACE_T usbInt, int fw, int pins);
	EXPORTED short STDCALL AnalogOutImpl_ADC1000_isFirmwareValid_stdcall(ANALOGOUTIMPL_ADC1000_T c_analog_out_impl_a_d_c1000);
	EXPORTED short STDCALL AnalogOutImpl_ADC1000_isDACPresent_stdcall(ANALOGOUTIMPL_ADC1000_T c_analog_out_impl_a_d_c1000);
	EXPORTED void STDCALL AnalogOutImpl_ADC1000_setDACCounts_stdcall(ANALOGOUTIMPL_ADC1000_T c_analog_out_impl_a_d_c1000, int counts, int channel);
	EXPORTED int STDCALL AnalogOutImpl_ADC1000_readDACCounts_stdcall(ANALOGOUTIMPL_ADC1000_T c_analog_out_impl_a_d_c1000, int channel);
	EXPORTED double STDCALL AnalogOutImpl_ADC1000_analogOutCountsToVolts_stdcall(ANALOGOUTIMPL_ADC1000_T c_analog_out_impl_a_d_c1000, int counts);
	EXPORTED int STDCALL AnalogOutImpl_ADC1000_getDACMinimum_stdcall(ANALOGOUTIMPL_ADC1000_T c_analog_out_impl_a_d_c1000);
	EXPORTED int STDCALL AnalogOutImpl_ADC1000_getDACMaximum_stdcall(ANALOGOUTIMPL_ADC1000_T c_analog_out_impl_a_d_c1000);
	EXPORTED int STDCALL AnalogOutImpl_ADC1000_getDACIncrement_stdcall(ANALOGOUTIMPL_ADC1000_T c_analog_out_impl_a_d_c1000);
	EXPORTED int STDCALL AnalogOutImpl_ADC1000_getDACPins_stdcall(ANALOGOUTIMPL_ADC1000_T c_analog_out_impl_a_d_c1000);
	EXPORTED void STDCALL AnalogOutImpl_ADC1000_getFeatureGUIClassnames_stdcall(ANALOGOUTIMPL_ADC1000_T c_analog_out_impl_a_d_c1000, JSTRINGARRAY_T retval);
	EXPORTED void STDCALL AnalogOutImpl_ADC1000_Destroy_stdcall(ANALOGOUTIMPL_ADC1000_T analog_out_impl_a_d_c1000);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* ANALOGOUTIMPL_ADC1000_H */
