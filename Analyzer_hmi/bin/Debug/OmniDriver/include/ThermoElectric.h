/**
 * File: ThermoElectric.h
 * Autogenerated on Fri Mar 23 13:38:40 EDT 2018 based on
 * ThermoElectric.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/thermoelectric/ThermoElectric
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef THERMOELECTRIC_H
#define THERMOELECTRIC_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED ThermoElectric : public BaseJavaClass // CPPClass.tag001
{
public: 
	int getSaturationIntensity();
	short setSaturationIntensity(int param0, JString& param1);
	void setTECEnable(short param0);
	void setFanEnable(short param0);
	double getDetectorTemperatureCelsius();
	double getDetectorTemperatureSetPointCelsius();
	void setDetectorSetPointCelsius(double param0);
	double getSetPointMinimumCelsius();
	double getSetPointMaximumCelsius();
	double getSetPointIncrementCelsius();
	short isSaveTECStateEnabled();
	void saveTECState();
	~ThermoElectric();
	// No public default Java constructor; creating one:
	ThermoElectric();
	// No public Java copy constructor; creating one:
	ThermoElectric(const ThermoElectric &that);
	// Creating assignment operator declaration:
	ThermoElectric &operator=(const ThermoElectric &that);

private:
	jmethodID mid_getSaturationIntensity2112;
	jmethodID mid_setSaturationIntensity2113;
	jmethodID mid_setTECEnable2114;
	jmethodID mid_setFanEnable2115;
	jmethodID mid_getDetectorTemperatureCelsius2116;
	jmethodID mid_getDetectorTemperatureSetPointCelsius2117;
	jmethodID mid_setDetectorSetPointCelsius2118;
	jmethodID mid_getSetPointMinimumCelsius2119;
	jmethodID mid_getSetPointMaximumCelsius2120;
	jmethodID mid_getSetPointIncrementCelsius2121;
	jmethodID mid_isSaveTECStateEnabled2122;
	jmethodID mid_saveTECState2123;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_THERMOELECTRIC_T
#define EXTERN_TYPEDEF_THERMOELECTRIC_T
	typedef void* THERMOELECTRIC_T;
#endif /* EXTERN_TYPEDEF_THERMOELECTRIC_T */

	// No public default Java constructor; creating one:
	EXPORTED THERMOELECTRIC_T ThermoElectric_Create();
	EXPORTED int ThermoElectric_getSaturationIntensity(THERMOELECTRIC_T c_thermo_electric);
	EXPORTED short ThermoElectric_setSaturationIntensity(THERMOELECTRIC_T c_thermo_electric, int param0, JSTRING_T param1);
	EXPORTED void ThermoElectric_setTECEnable(THERMOELECTRIC_T c_thermo_electric, short param0);
	EXPORTED void ThermoElectric_setFanEnable(THERMOELECTRIC_T c_thermo_electric, short param0);
	EXPORTED double ThermoElectric_getDetectorTemperatureCelsius(THERMOELECTRIC_T c_thermo_electric);
	EXPORTED double ThermoElectric_getDetectorTemperatureSetPointCelsius(THERMOELECTRIC_T c_thermo_electric);
	EXPORTED void ThermoElectric_setDetectorSetPointCelsius(THERMOELECTRIC_T c_thermo_electric, double param0);
	EXPORTED double ThermoElectric_getSetPointMinimumCelsius(THERMOELECTRIC_T c_thermo_electric);
	EXPORTED double ThermoElectric_getSetPointMaximumCelsius(THERMOELECTRIC_T c_thermo_electric);
	EXPORTED double ThermoElectric_getSetPointIncrementCelsius(THERMOELECTRIC_T c_thermo_electric);
	EXPORTED short ThermoElectric_isSaveTECStateEnabled(THERMOELECTRIC_T c_thermo_electric);
	EXPORTED void ThermoElectric_saveTECState(THERMOELECTRIC_T c_thermo_electric);
	EXPORTED void ThermoElectric_Destroy(THERMOELECTRIC_T thermo_electric);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED int STDCALL ThermoElectric_getSaturationIntensity_stdcall(THERMOELECTRIC_T c_thermo_electric);
	EXPORTED short STDCALL ThermoElectric_setSaturationIntensity_stdcall(THERMOELECTRIC_T c_thermo_electric, int param0, JSTRING_T param1);
	EXPORTED void STDCALL ThermoElectric_setTECEnable_stdcall(THERMOELECTRIC_T c_thermo_electric, short param0);
	EXPORTED void STDCALL ThermoElectric_setFanEnable_stdcall(THERMOELECTRIC_T c_thermo_electric, short param0);
	EXPORTED double STDCALL ThermoElectric_getDetectorTemperatureCelsius_stdcall(THERMOELECTRIC_T c_thermo_electric);
	EXPORTED double STDCALL ThermoElectric_getDetectorTemperatureSetPointCelsius_stdcall(THERMOELECTRIC_T c_thermo_electric);
	EXPORTED void STDCALL ThermoElectric_setDetectorSetPointCelsius_stdcall(THERMOELECTRIC_T c_thermo_electric, double param0);
	EXPORTED double STDCALL ThermoElectric_getSetPointMinimumCelsius_stdcall(THERMOELECTRIC_T c_thermo_electric);
	EXPORTED double STDCALL ThermoElectric_getSetPointMaximumCelsius_stdcall(THERMOELECTRIC_T c_thermo_electric);
	EXPORTED double STDCALL ThermoElectric_getSetPointIncrementCelsius_stdcall(THERMOELECTRIC_T c_thermo_electric);
	EXPORTED short STDCALL ThermoElectric_isSaveTECStateEnabled_stdcall(THERMOELECTRIC_T c_thermo_electric);
	EXPORTED void STDCALL ThermoElectric_saveTECState_stdcall(THERMOELECTRIC_T c_thermo_electric);
	EXPORTED void STDCALL ThermoElectric_Destroy_stdcall(THERMOELECTRIC_T thermo_electric);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* THERMOELECTRIC_H */
