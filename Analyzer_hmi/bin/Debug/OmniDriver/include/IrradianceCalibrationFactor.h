/**
 * File: IrradianceCalibrationFactor.h
 * Autogenerated on Fri Mar 23 13:38:37 EDT 2018 based on
 * IrradianceCalibrationFactor.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/irradiancecalibrationfactor/IrradianceCalibrationFactor
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef IRRADIANCECALIBRATIONFACTOR_H
#define IRRADIANCECALIBRATIONFACTOR_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#endif /* INCLUDES_IN_HEADER */


CLASS_TOKEN EXPORTED IrradianceCalibrationFactor : public BaseJavaClass // CPPClass.tag001
{
public: 
	DoubleArray getIrradianceCalibrationFactors();
	void setIrradianceCalibrationFactors(DoubleArray& param0);
	double getCollectionArea();
	void setCollectionArea(double param0);
	short hasCollectionArea();
	~IrradianceCalibrationFactor();
	// No public default Java constructor; creating one:
	IrradianceCalibrationFactor();
	// No public Java copy constructor; creating one:
	IrradianceCalibrationFactor(const IrradianceCalibrationFactor &that);
	// Creating assignment operator declaration:
	IrradianceCalibrationFactor &operator=(const IrradianceCalibrationFactor &that);

private:
	jmethodID mid_getIrradianceCalibrationFactors1602;
	jmethodID mid_setIrradianceCalibrationFactors1603;
	jmethodID mid_getCollectionArea1604;
	jmethodID mid_setCollectionArea1605;
	jmethodID mid_hasCollectionArea1606;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTOR_T
#define EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTOR_T
	typedef void* IRRADIANCECALIBRATIONFACTOR_T;
#endif /* EXTERN_TYPEDEF_IRRADIANCECALIBRATIONFACTOR_T */

	// No public default Java constructor; creating one:
	EXPORTED IRRADIANCECALIBRATIONFACTOR_T IrradianceCalibrationFactor_Create();
	EXPORTED void IrradianceCalibrationFactor_getIrradianceCalibrationFactors(IRRADIANCECALIBRATIONFACTOR_T c_irradiance_calibration_factor, DOUBLEARRAY_T retval);
	EXPORTED void IrradianceCalibrationFactor_setIrradianceCalibrationFactors(IRRADIANCECALIBRATIONFACTOR_T c_irradiance_calibration_factor, DOUBLEARRAY_T param0);
	EXPORTED double IrradianceCalibrationFactor_getCollectionArea(IRRADIANCECALIBRATIONFACTOR_T c_irradiance_calibration_factor);
	EXPORTED void IrradianceCalibrationFactor_setCollectionArea(IRRADIANCECALIBRATIONFACTOR_T c_irradiance_calibration_factor, double param0);
	EXPORTED short IrradianceCalibrationFactor_hasCollectionArea(IRRADIANCECALIBRATIONFACTOR_T c_irradiance_calibration_factor);
	EXPORTED void IrradianceCalibrationFactor_Destroy(IRRADIANCECALIBRATIONFACTOR_T irradiance_calibration_factor);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED void STDCALL IrradianceCalibrationFactor_getIrradianceCalibrationFactors_stdcall(IRRADIANCECALIBRATIONFACTOR_T c_irradiance_calibration_factor, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL IrradianceCalibrationFactor_setIrradianceCalibrationFactors_stdcall(IRRADIANCECALIBRATIONFACTOR_T c_irradiance_calibration_factor, DOUBLEARRAY_T param0);
	EXPORTED double STDCALL IrradianceCalibrationFactor_getCollectionArea_stdcall(IRRADIANCECALIBRATIONFACTOR_T c_irradiance_calibration_factor);
	EXPORTED void STDCALL IrradianceCalibrationFactor_setCollectionArea_stdcall(IRRADIANCECALIBRATIONFACTOR_T c_irradiance_calibration_factor, double param0);
	EXPORTED short STDCALL IrradianceCalibrationFactor_hasCollectionArea_stdcall(IRRADIANCECALIBRATIONFACTOR_T c_irradiance_calibration_factor);
	EXPORTED void STDCALL IrradianceCalibrationFactor_Destroy_stdcall(IRRADIANCECALIBRATIONFACTOR_T irradiance_calibration_factor);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* IRRADIANCECALIBRATIONFACTOR_H */
