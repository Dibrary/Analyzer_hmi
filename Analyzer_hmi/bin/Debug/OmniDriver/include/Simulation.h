/**
 * File: Simulation.h
 * Autogenerated on Fri Mar 23 13:39:12 EDT 2018 based on
 * Simulation.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/simulation/Simulation
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef SIMULATION_H
#define SIMULATION_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBSpectrometer.h"
#include "GUIProviderArray.h"
#include "Spectrum.h"
#include "JString.h"
#include "CoefficientsArray.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBSpectrometer;
class GUIProviderArray;
class Spectrum;
class JString;
class CoefficientsArray;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED Simulation : public USBSpectrometer // CPPClass.tag001
{
public: 
	Simulation(int i);
	void openSpectrometer(int index);
	GUIProviderArray getGUIFeatures();
	Spectrum getSpectrum(Spectrum& spectrum);
	void setNumberOfPixels(int pixels, int dark);
	void setSpectrumType(int type);
	JString getTest(JString& test);
	JString getSerialNumber();
	JString getFirmwareVersion();
	void setStrobeEnable(short strobe);
	void setIntegrationTime(int intTime);
	void closeSpectrometer();
	JString getInfo(int slot);
	CoefficientsArray readWavelengthCalibrationCoefficientsFromSpectrometer();
	void writeWavelengthCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	CoefficientsArray getWavelengthCalibrationCoefficients();
	void setWavelengthCalibrationCoefficients(CoefficientsArray& coefficients);
	DoubleArray getWavelengths(int index);
	void setWavelengths(DoubleArray& wl, int index);
	~Simulation();
	// No public default Java constructor; creating one:
	Simulation();
	// No public Java copy constructor; creating one:
	Simulation(const Simulation &that);
	// Creating assignment operator declaration:
	Simulation &operator=(const Simulation &that);

private:
	jmethodID mid_Simulation5621;
	jmethodID mid_openSpectrometer5622;
	jmethodID mid_getGUIFeatures5623;
	jmethodID mid_getSpectrum5624;
	jmethodID mid_setNumberOfPixels5625;
	jmethodID mid_setSpectrumType5626;
	jmethodID mid_getTest5627;
	jmethodID mid_getSerialNumber5628;
	jmethodID mid_getFirmwareVersion5629;
	jmethodID mid_setStrobeEnable5630;
	jmethodID mid_setIntegrationTime5631;
	jmethodID mid_closeSpectrometer5632;
	jmethodID mid_getInfo5633;
	jmethodID mid_readWavelengthCalibrationCoefficientsFromSpectrometer5634;
	jmethodID mid_writeWavelengthCoefficientsToSpectrometer5635;
	jmethodID mid_getWavelengthCalibrationCoefficients5636;
	jmethodID mid_setWavelengthCalibrationCoefficients5637;
	jmethodID mid_getWavelengths5638;
	jmethodID mid_setWavelengths5639;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBSPECTROMETER_T
#define EXTERN_TYPEDEF_USBSPECTROMETER_T
	typedef void* USBSPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_USBSPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
#define EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
	typedef void* GUIPROVIDERARRAY_T;
#endif /* EXTERN_TYPEDEF_GUIPROVIDERARRAY_T */
#ifndef EXTERN_TYPEDEF_SPECTRUM_T
#define EXTERN_TYPEDEF_SPECTRUM_T
	typedef void* SPECTRUM_T;
#endif /* EXTERN_TYPEDEF_SPECTRUM_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
#define EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
	typedef void* COEFFICIENTSARRAY_T;
#endif /* EXTERN_TYPEDEF_COEFFICIENTSARRAY_T */
#ifndef EXTERN_TYPEDEF_SIMULATION_T
#define EXTERN_TYPEDEF_SIMULATION_T
	typedef void* SIMULATION_T;
#endif /* EXTERN_TYPEDEF_SIMULATION_T */

	// No public default Java constructor; creating one:
	EXPORTED SIMULATION_T Simulation_Create();
	EXPORTED SIMULATION_T Simulation_Create_1(int i);
	EXPORTED void Simulation_openSpectrometer(SIMULATION_T c_simulation, int index);
	EXPORTED void Simulation_getGUIFeatures(SIMULATION_T c_simulation, GUIPROVIDERARRAY_T retval);
	EXPORTED void Simulation_getSpectrum(SIMULATION_T c_simulation, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void Simulation_setNumberOfPixels(SIMULATION_T c_simulation, int pixels, int dark);
	EXPORTED void Simulation_setSpectrumType(SIMULATION_T c_simulation, int type);
	EXPORTED void Simulation_getTest(SIMULATION_T c_simulation, JSTRING_T test, JSTRING_T retval);
	EXPORTED void Simulation_getSerialNumber(SIMULATION_T c_simulation, JSTRING_T retval);
	EXPORTED void Simulation_getFirmwareVersion(SIMULATION_T c_simulation, JSTRING_T retval);
	EXPORTED void Simulation_setStrobeEnable(SIMULATION_T c_simulation, short strobe);
	EXPORTED void Simulation_setIntegrationTime(SIMULATION_T c_simulation, int intTime);
	EXPORTED void Simulation_closeSpectrometer(SIMULATION_T c_simulation);
	EXPORTED void Simulation_getInfo(SIMULATION_T c_simulation, int slot, JSTRING_T retval);
	EXPORTED void Simulation_readWavelengthCalibrationCoefficientsFromSpectrometer(SIMULATION_T c_simulation, COEFFICIENTSARRAY_T retval);
	EXPORTED void Simulation_writeWavelengthCoefficientsToSpectrometer(SIMULATION_T c_simulation, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void Simulation_getWavelengthCalibrationCoefficients(SIMULATION_T c_simulation, COEFFICIENTSARRAY_T retval);
	EXPORTED void Simulation_setWavelengthCalibrationCoefficients(SIMULATION_T c_simulation, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void Simulation_getWavelengths(SIMULATION_T c_simulation, int index, DOUBLEARRAY_T retval);
	EXPORTED void Simulation_setWavelengths(SIMULATION_T c_simulation, DOUBLEARRAY_T wl, int index);
	EXPORTED void Simulation_Destroy(SIMULATION_T simulation);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED SIMULATION_T STDCALL Simulation_Create_stdcall_1(int i);
	EXPORTED void STDCALL Simulation_openSpectrometer_stdcall(SIMULATION_T c_simulation, int index);
	EXPORTED void STDCALL Simulation_getGUIFeatures_stdcall(SIMULATION_T c_simulation, GUIPROVIDERARRAY_T retval);
	EXPORTED void STDCALL Simulation_getSpectrum_stdcall(SIMULATION_T c_simulation, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void STDCALL Simulation_setNumberOfPixels_stdcall(SIMULATION_T c_simulation, int pixels, int dark);
	EXPORTED void STDCALL Simulation_setSpectrumType_stdcall(SIMULATION_T c_simulation, int type);
	EXPORTED void STDCALL Simulation_getTest_stdcall(SIMULATION_T c_simulation, JSTRING_T test, JSTRING_T retval);
	EXPORTED void STDCALL Simulation_getSerialNumber_stdcall(SIMULATION_T c_simulation, JSTRING_T retval);
	EXPORTED void STDCALL Simulation_getFirmwareVersion_stdcall(SIMULATION_T c_simulation, JSTRING_T retval);
	EXPORTED void STDCALL Simulation_setStrobeEnable_stdcall(SIMULATION_T c_simulation, short strobe);
	EXPORTED void STDCALL Simulation_setIntegrationTime_stdcall(SIMULATION_T c_simulation, int intTime);
	EXPORTED void STDCALL Simulation_closeSpectrometer_stdcall(SIMULATION_T c_simulation);
	EXPORTED void STDCALL Simulation_getInfo_stdcall(SIMULATION_T c_simulation, int slot, JSTRING_T retval);
	EXPORTED void STDCALL Simulation_readWavelengthCalibrationCoefficientsFromSpectrometer_stdcall(SIMULATION_T c_simulation, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL Simulation_writeWavelengthCoefficientsToSpectrometer_stdcall(SIMULATION_T c_simulation, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL Simulation_getWavelengthCalibrationCoefficients_stdcall(SIMULATION_T c_simulation, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL Simulation_setWavelengthCalibrationCoefficients_stdcall(SIMULATION_T c_simulation, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL Simulation_getWavelengths_stdcall(SIMULATION_T c_simulation, int index, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL Simulation_setWavelengths_stdcall(SIMULATION_T c_simulation, DOUBLEARRAY_T wl, int index);
	EXPORTED void STDCALL Simulation_Destroy_stdcall(SIMULATION_T simulation);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* SIMULATION_H */
