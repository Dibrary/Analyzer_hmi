/**
 * File: AnalogOutImpl.h
 * Autogenerated on Fri Mar 23 13:38:30 EDT 2018 based on
 * AnalogOutImpl.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/analogout/AnalogOutImpl
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef ANALOGOUTIMPL_H
#define ANALOGOUTIMPL_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBFeature.h"
#include "USBInterface.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBFeature;
class USBInterface;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED AnalogOutImpl : public USBFeature // CPPClass.tag001
{
public: 
	AnalogOutImpl(USBInterface& usbInt);
	void setDACCounts(int param0, int param1);
	int getDACMinimum();
	int getDACMaximum();
	int getDACIncrement();
	double analogOutCountsToVolts(int param0);
	short isDACPresent();
	int getDACPins();
	~AnalogOutImpl();
	// No public default Java constructor; creating one:
	AnalogOutImpl();
	// No public Java copy constructor; creating one:
	AnalogOutImpl(const AnalogOutImpl &that);
	// Creating assignment operator declaration:
	AnalogOutImpl &operator=(const AnalogOutImpl &that);

private:
	jmethodID mid_AnalogOutImpl800;
	jmethodID mid_setDACCounts801;
	jmethodID mid_getDACMinimum802;
	jmethodID mid_getDACMaximum803;
	jmethodID mid_getDACIncrement804;
	jmethodID mid_analogOutCountsToVolts805;
	jmethodID mid_isDACPresent806;
	jmethodID mid_getDACPins807;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBFEATURE_T
#define EXTERN_TYPEDEF_USBFEATURE_T
	typedef void* USBFEATURE_T;
#endif /* EXTERN_TYPEDEF_USBFEATURE_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_ANALOGOUTIMPL_T
#define EXTERN_TYPEDEF_ANALOGOUTIMPL_T
	typedef void* ANALOGOUTIMPL_T;
#endif /* EXTERN_TYPEDEF_ANALOGOUTIMPL_T */

	// No public default Java constructor; creating one:
	EXPORTED ANALOGOUTIMPL_T AnalogOutImpl_Create();
	EXPORTED ANALOGOUTIMPL_T AnalogOutImpl_Create_1(USBINTERFACE_T usbInt);
	EXPORTED void AnalogOutImpl_setDACCounts(ANALOGOUTIMPL_T c_analog_out_impl, int param0, int param1);
	EXPORTED int AnalogOutImpl_getDACMinimum(ANALOGOUTIMPL_T c_analog_out_impl);
	EXPORTED int AnalogOutImpl_getDACMaximum(ANALOGOUTIMPL_T c_analog_out_impl);
	EXPORTED int AnalogOutImpl_getDACIncrement(ANALOGOUTIMPL_T c_analog_out_impl);
	EXPORTED double AnalogOutImpl_analogOutCountsToVolts(ANALOGOUTIMPL_T c_analog_out_impl, int param0);
	EXPORTED short AnalogOutImpl_isDACPresent(ANALOGOUTIMPL_T c_analog_out_impl);
	EXPORTED int AnalogOutImpl_getDACPins(ANALOGOUTIMPL_T c_analog_out_impl);
	EXPORTED void AnalogOutImpl_Destroy(ANALOGOUTIMPL_T analog_out_impl);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED ANALOGOUTIMPL_T STDCALL AnalogOutImpl_Create_stdcall_1(USBINTERFACE_T usbInt);
	EXPORTED void STDCALL AnalogOutImpl_setDACCounts_stdcall(ANALOGOUTIMPL_T c_analog_out_impl, int param0, int param1);
	EXPORTED int STDCALL AnalogOutImpl_getDACMinimum_stdcall(ANALOGOUTIMPL_T c_analog_out_impl);
	EXPORTED int STDCALL AnalogOutImpl_getDACMaximum_stdcall(ANALOGOUTIMPL_T c_analog_out_impl);
	EXPORTED int STDCALL AnalogOutImpl_getDACIncrement_stdcall(ANALOGOUTIMPL_T c_analog_out_impl);
	EXPORTED double STDCALL AnalogOutImpl_analogOutCountsToVolts_stdcall(ANALOGOUTIMPL_T c_analog_out_impl, int param0);
	EXPORTED short STDCALL AnalogOutImpl_isDACPresent_stdcall(ANALOGOUTIMPL_T c_analog_out_impl);
	EXPORTED int STDCALL AnalogOutImpl_getDACPins_stdcall(ANALOGOUTIMPL_T c_analog_out_impl);
	EXPORTED void STDCALL AnalogOutImpl_Destroy_stdcall(ANALOGOUTIMPL_T analog_out_impl);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* ANALOGOUTIMPL_H */
