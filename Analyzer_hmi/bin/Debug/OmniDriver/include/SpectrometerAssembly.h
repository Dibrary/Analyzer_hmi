/**
 * File: SpectrometerAssembly.h
 * Autogenerated on Fri Mar 23 13:38:46 EDT 2018 based on
 * SpectrometerAssembly.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/SpectrometerAssembly
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef SPECTROMETERASSEMBLY_H
#define SPECTROMETERASSEMBLY_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "Spectrometer.h"
#include "SpectrometerChannel.h"
#include "SpectralProcessor.h"
#include "Spectrum.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class Spectrometer;
class SpectrometerChannel;
class SpectralProcessor;
class Spectrum;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED SpectrometerAssembly : public BaseJavaClass // CPPClass.tag001
{
public: 
	SpectrometerAssembly(Spectrometer& spectrometerObject);
	void closeSpectrometer();
	int getNumberOfChannels();
	short isChannelEnabled(int channelIndex);
	SpectrometerChannel getChannel(int channelIndex);
	SpectralProcessor getSpectralProcessor(int channelIndex);
	Spectrometer getSpectrometer();
	Spectrum getSpectrumBuffer(int channelIndex);
	short isSpectrumValid(int channelIndex);
	void setSpectrumValidity(int channelIndex, short isValid);
	void setSaturationState(int channelIndex, short saturationFlag);
	short getSaturationState(int channelIndex);
	void setTimeoutState(int channelIndex, short timeoutFlag);
	short getTimeoutState(int channelIndex);
	~SpectrometerAssembly();
	// No public default Java constructor; creating one:
	SpectrometerAssembly();
	// No public Java copy constructor; creating one:
	SpectrometerAssembly(const SpectrometerAssembly &that);
	// Creating assignment operator declaration:
	SpectrometerAssembly &operator=(const SpectrometerAssembly &that);

private:
	jmethodID mid_SpectrometerAssembly2967;
	jmethodID mid_closeSpectrometer2968;
	jmethodID mid_getNumberOfChannels2969;
	jmethodID mid_isChannelEnabled2970;
	jmethodID mid_getChannel2971;
	jmethodID mid_getSpectralProcessor2972;
	jmethodID mid_getSpectrometer2973;
	jmethodID mid_getSpectrumBuffer2974;
	jmethodID mid_isSpectrumValid2975;
	jmethodID mid_setSpectrumValidity2976;
	jmethodID mid_setSaturationState2977;
	jmethodID mid_getSaturationState2978;
	jmethodID mid_setTimeoutState2979;
	jmethodID mid_getTimeoutState2980;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_SPECTROMETER_T
#define EXTERN_TYPEDEF_SPECTROMETER_T
	typedef void* SPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETERCHANNEL_T
#define EXTERN_TYPEDEF_SPECTROMETERCHANNEL_T
	typedef void* SPECTROMETERCHANNEL_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERCHANNEL_T */
#ifndef EXTERN_TYPEDEF_SPECTRALPROCESSOR_T
#define EXTERN_TYPEDEF_SPECTRALPROCESSOR_T
	typedef void* SPECTRALPROCESSOR_T;
#endif /* EXTERN_TYPEDEF_SPECTRALPROCESSOR_T */
#ifndef EXTERN_TYPEDEF_SPECTRUM_T
#define EXTERN_TYPEDEF_SPECTRUM_T
	typedef void* SPECTRUM_T;
#endif /* EXTERN_TYPEDEF_SPECTRUM_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETERASSEMBLY_T
#define EXTERN_TYPEDEF_SPECTROMETERASSEMBLY_T
	typedef void* SPECTROMETERASSEMBLY_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERASSEMBLY_T */

	// No public default Java constructor; creating one:
	EXPORTED SPECTROMETERASSEMBLY_T SpectrometerAssembly_Create();
	EXPORTED SPECTROMETERASSEMBLY_T SpectrometerAssembly_Create_1(SPECTROMETER_T spectrometerObject);
	EXPORTED void SpectrometerAssembly_closeSpectrometer(SPECTROMETERASSEMBLY_T c_spectrometer_assembly);
	EXPORTED int SpectrometerAssembly_getNumberOfChannels(SPECTROMETERASSEMBLY_T c_spectrometer_assembly);
	EXPORTED short SpectrometerAssembly_isChannelEnabled(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, int channelIndex);
	EXPORTED void SpectrometerAssembly_getChannel(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, int channelIndex, SPECTROMETERCHANNEL_T retval);
	EXPORTED void SpectrometerAssembly_getSpectralProcessor(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, int channelIndex, SPECTRALPROCESSOR_T retval);
	EXPORTED void SpectrometerAssembly_getSpectrometer(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, SPECTROMETER_T retval);
	EXPORTED void SpectrometerAssembly_getSpectrumBuffer(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, int channelIndex, SPECTRUM_T retval);
	EXPORTED short SpectrometerAssembly_isSpectrumValid(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, int channelIndex);
	EXPORTED void SpectrometerAssembly_setSpectrumValidity(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, int channelIndex, short isValid);
	EXPORTED void SpectrometerAssembly_setSaturationState(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, int channelIndex, short saturationFlag);
	EXPORTED short SpectrometerAssembly_getSaturationState(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, int channelIndex);
	EXPORTED void SpectrometerAssembly_setTimeoutState(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, int channelIndex, short timeoutFlag);
	EXPORTED short SpectrometerAssembly_getTimeoutState(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, int channelIndex);
	EXPORTED void SpectrometerAssembly_Destroy(SPECTROMETERASSEMBLY_T spectrometer_assembly);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED SPECTROMETERASSEMBLY_T STDCALL SpectrometerAssembly_Create_stdcall_1(SPECTROMETER_T spectrometerObject);
	EXPORTED void STDCALL SpectrometerAssembly_closeSpectrometer_stdcall(SPECTROMETERASSEMBLY_T c_spectrometer_assembly);
	EXPORTED int STDCALL SpectrometerAssembly_getNumberOfChannels_stdcall(SPECTROMETERASSEMBLY_T c_spectrometer_assembly);
	EXPORTED short STDCALL SpectrometerAssembly_isChannelEnabled_stdcall(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, int channelIndex);
	EXPORTED void STDCALL SpectrometerAssembly_getChannel_stdcall(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, int channelIndex, SPECTROMETERCHANNEL_T retval);
	EXPORTED void STDCALL SpectrometerAssembly_getSpectralProcessor_stdcall(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, int channelIndex, SPECTRALPROCESSOR_T retval);
	EXPORTED void STDCALL SpectrometerAssembly_getSpectrometer_stdcall(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, SPECTROMETER_T retval);
	EXPORTED void STDCALL SpectrometerAssembly_getSpectrumBuffer_stdcall(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, int channelIndex, SPECTRUM_T retval);
	EXPORTED short STDCALL SpectrometerAssembly_isSpectrumValid_stdcall(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, int channelIndex);
	EXPORTED void STDCALL SpectrometerAssembly_setSpectrumValidity_stdcall(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, int channelIndex, short isValid);
	EXPORTED void STDCALL SpectrometerAssembly_setSaturationState_stdcall(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, int channelIndex, short saturationFlag);
	EXPORTED short STDCALL SpectrometerAssembly_getSaturationState_stdcall(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, int channelIndex);
	EXPORTED void STDCALL SpectrometerAssembly_setTimeoutState_stdcall(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, int channelIndex, short timeoutFlag);
	EXPORTED short STDCALL SpectrometerAssembly_getTimeoutState_stdcall(SPECTROMETERASSEMBLY_T c_spectrometer_assembly, int channelIndex);
	EXPORTED void STDCALL SpectrometerAssembly_Destroy_stdcall(SPECTROMETERASSEMBLY_T spectrometer_assembly);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* SPECTROMETERASSEMBLY_H */
