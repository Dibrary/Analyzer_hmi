/**
 * File: DataBufferImpl_Blaze.h
 * Autogenerated on Fri Mar 23 13:38:31 EDT 2018 based on
 * DataBufferImpl_Blaze.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/buffer/DataBufferImpl_Blaze
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef DATABUFFERIMPL_BLAZE_H
#define DATABUFFERIMPL_BLAZE_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "DataBufferImpl.h"
#include "OceanBinaryProtocolProvider.h"
#include "USBInterface.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class DataBufferImpl;
class OceanBinaryProtocolProvider;
class USBInterface;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED DataBufferImpl_Blaze : public DataBufferImpl // CPPClass.tag001
{
public: 
	DataBufferImpl_Blaze(OceanBinaryProtocolProvider& bn, USBInterface& usbInt);
	void clearBuffer();
	int getBufferCapacity();
	int getBufferCapacityMaximum();
	int getBufferCapacityMinimum();
	int getNumberOfElements();
	void setBufferCapacity(int bufferSize);
	void abortAcquisition();
	void startAcquisition();
	void enableBuffer(short value);
	short isEnableBuffer();
	~DataBufferImpl_Blaze();
	// No public default Java constructor; creating one:
	DataBufferImpl_Blaze();
	// No public Java copy constructor; creating one:
	DataBufferImpl_Blaze(const DataBufferImpl_Blaze &that);
	// Creating assignment operator declaration:
	DataBufferImpl_Blaze &operator=(const DataBufferImpl_Blaze &that);

private:
	jmethodID mid_DataBufferImpl_Blaze958;
	jmethodID mid_clearBuffer959;
	jmethodID mid_getBufferCapacity960;
	jmethodID mid_getBufferCapacityMaximum961;
	jmethodID mid_getBufferCapacityMinimum962;
	jmethodID mid_getNumberOfElements963;
	jmethodID mid_setBufferCapacity964;
	jmethodID mid_abortAcquisition965;
	jmethodID mid_startAcquisition966;
	jmethodID mid_enableBuffer967;
	jmethodID mid_isEnableBuffer968;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_DATABUFFERIMPL_T
#define EXTERN_TYPEDEF_DATABUFFERIMPL_T
	typedef void* DATABUFFERIMPL_T;
#endif /* EXTERN_TYPEDEF_DATABUFFERIMPL_T */
#ifndef EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T
#define EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T
	typedef void* OCEANBINARYPROTOCOLPROVIDER_T;
#endif /* EXTERN_TYPEDEF_OCEANBINARYPROTOCOLPROVIDER_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_DATABUFFERIMPL_BLAZE_T
#define EXTERN_TYPEDEF_DATABUFFERIMPL_BLAZE_T
	typedef void* DATABUFFERIMPL_BLAZE_T;
#endif /* EXTERN_TYPEDEF_DATABUFFERIMPL_BLAZE_T */

	// No public default Java constructor; creating one:
	EXPORTED DATABUFFERIMPL_BLAZE_T DataBufferImpl_Blaze_Create();
	EXPORTED DATABUFFERIMPL_BLAZE_T DataBufferImpl_Blaze_Create_1(OCEANBINARYPROTOCOLPROVIDER_T bn, USBINTERFACE_T usbInt);
	EXPORTED void DataBufferImpl_Blaze_clearBuffer(DATABUFFERIMPL_BLAZE_T c_data_buffer_impl_blaze);
	EXPORTED int DataBufferImpl_Blaze_getBufferCapacity(DATABUFFERIMPL_BLAZE_T c_data_buffer_impl_blaze);
	EXPORTED int DataBufferImpl_Blaze_getBufferCapacityMaximum(DATABUFFERIMPL_BLAZE_T c_data_buffer_impl_blaze);
	EXPORTED int DataBufferImpl_Blaze_getBufferCapacityMinimum(DATABUFFERIMPL_BLAZE_T c_data_buffer_impl_blaze);
	EXPORTED int DataBufferImpl_Blaze_getNumberOfElements(DATABUFFERIMPL_BLAZE_T c_data_buffer_impl_blaze);
	EXPORTED void DataBufferImpl_Blaze_setBufferCapacity(DATABUFFERIMPL_BLAZE_T c_data_buffer_impl_blaze, int bufferSize);
	EXPORTED void DataBufferImpl_Blaze_abortAcquisition(DATABUFFERIMPL_BLAZE_T c_data_buffer_impl_blaze);
	EXPORTED void DataBufferImpl_Blaze_startAcquisition(DATABUFFERIMPL_BLAZE_T c_data_buffer_impl_blaze);
	EXPORTED void DataBufferImpl_Blaze_enableBuffer(DATABUFFERIMPL_BLAZE_T c_data_buffer_impl_blaze, short value);
	EXPORTED short DataBufferImpl_Blaze_isEnableBuffer(DATABUFFERIMPL_BLAZE_T c_data_buffer_impl_blaze);
	EXPORTED void DataBufferImpl_Blaze_Destroy(DATABUFFERIMPL_BLAZE_T data_buffer_impl_blaze);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED DATABUFFERIMPL_BLAZE_T STDCALL DataBufferImpl_Blaze_Create_stdcall_1(OCEANBINARYPROTOCOLPROVIDER_T bn, USBINTERFACE_T usbInt);
	EXPORTED void STDCALL DataBufferImpl_Blaze_clearBuffer_stdcall(DATABUFFERIMPL_BLAZE_T c_data_buffer_impl_blaze);
	EXPORTED int STDCALL DataBufferImpl_Blaze_getBufferCapacity_stdcall(DATABUFFERIMPL_BLAZE_T c_data_buffer_impl_blaze);
	EXPORTED int STDCALL DataBufferImpl_Blaze_getBufferCapacityMaximum_stdcall(DATABUFFERIMPL_BLAZE_T c_data_buffer_impl_blaze);
	EXPORTED int STDCALL DataBufferImpl_Blaze_getBufferCapacityMinimum_stdcall(DATABUFFERIMPL_BLAZE_T c_data_buffer_impl_blaze);
	EXPORTED int STDCALL DataBufferImpl_Blaze_getNumberOfElements_stdcall(DATABUFFERIMPL_BLAZE_T c_data_buffer_impl_blaze);
	EXPORTED void STDCALL DataBufferImpl_Blaze_setBufferCapacity_stdcall(DATABUFFERIMPL_BLAZE_T c_data_buffer_impl_blaze, int bufferSize);
	EXPORTED void STDCALL DataBufferImpl_Blaze_abortAcquisition_stdcall(DATABUFFERIMPL_BLAZE_T c_data_buffer_impl_blaze);
	EXPORTED void STDCALL DataBufferImpl_Blaze_startAcquisition_stdcall(DATABUFFERIMPL_BLAZE_T c_data_buffer_impl_blaze);
	EXPORTED void STDCALL DataBufferImpl_Blaze_enableBuffer_stdcall(DATABUFFERIMPL_BLAZE_T c_data_buffer_impl_blaze, short value);
	EXPORTED short STDCALL DataBufferImpl_Blaze_isEnableBuffer_stdcall(DATABUFFERIMPL_BLAZE_T c_data_buffer_impl_blaze);
	EXPORTED void STDCALL DataBufferImpl_Blaze_Destroy_stdcall(DATABUFFERIMPL_BLAZE_T data_buffer_impl_blaze);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* DATABUFFERIMPL_BLAZE_H */
