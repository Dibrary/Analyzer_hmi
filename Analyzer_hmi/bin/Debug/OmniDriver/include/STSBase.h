/**
 * File: STSBase.h
 * Autogenerated on Fri Mar 23 13:39:13 EDT 2018 based on
 * STSBase.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/sts/STSBase
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef STSBASE_H
#define STSBASE_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBSpectrometer.h"
#include "USBInterface.h"
#include "JString.h"
#include "CoefficientsArray.h"
#include "Spectrum.h"
#include "SpectrumType.h"
#include "SpectrumTypeArray.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBSpectrometer;
class USBInterface;
class JString;
class CoefficientsArray;
class Spectrum;
class SpectrumType;
class SpectrumTypeArray;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED STSBase : public USBSpectrometer // CPPClass.tag001
{
public: 
	void setEndpoints();
	void openSpectrometer(int index);
	void initFeatures(USBInterface& usb);
	JString getFirmwareVersion();
	JString getInfo(int slot);
	CharArray getInfoBytes(int slot);
	CharArray getStatusArray();
	void initialize();
	void setInfo(int slot, JString& str);
	void setInfoBytes(int slot, CharArray& byteArray);
	void setIntegrationTime(int intTime);
	void setStrobeEnable(short enable);
	CharArray readBenchID();
	void writeBenchID(CharArray& id);
	CharArray readBenchSerialNumber();
	void writeBenchSerialNumber(CharArray& sn);
	void writeSlitWidthMicrons(short microns);
	void writeFiberDiameterMicrons(short microns);
	CharArray readGrating();
	void writeGrating(CharArray& grating);
	CharArray readCoating();
	void writeCoating(CharArray& coating);
	CharArray readFilter();
	void writeFilter(CharArray& filter);
	void writeShutterUsable(short usable);
	CharArray queryDevice(int messageType, CharArray& payload);
	short sendCommandToDevice(int messageType, CharArray& payload, int endPointNumber);
	short sendCommandToDevice(int messageType, CharArray& payload);
	short sendCommandToDeviceORIGINAL(int messageType, CharArray& payload);
	void readSpectrum();
	void setCurrentSpectrumType(int type);
	CoefficientsArray getWavelengthCalibrationCoefficients();
	DoubleArray getWavelengths(int index);
	CoefficientsArray readWavelengthCalibrationCoefficientsFromSpectrometer();
	void setWavelengthCalibrationCoefficients(CoefficientsArray& coefficients);
	void setWavelengths(DoubleArray& wavelengths, int index);
	void writeWavelengthCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	double getBoardTemperatureCelsius();
	double getDetectorTemperatureCelsius();
	IntArray getAllPixels();
	IntArray getBadPixels();
	IntArray getBadPixelsFromSpectrometer();
	int getNumberOfBadPixels();
	int getMaximumBadPixels();
	Spectrum removeBadPixels(Spectrum& spectrum);
	void setBadPixels(IntArray& pixels);
	void setBadPixelsToSpectrometer();
	DoubleArray getIrradianceCalibrationFactors();
	void setIrradianceCalibrationFactors(DoubleArray& data);
	double getCollectionArea();
	short hasCollectionArea();
	void setCollectionArea(double area);
	void setSpectrumType(int type);
	void setSpectrumType(SpectrumType& type);
	SpectrumTypeArray getAllSpectrumTypes();
	int getPixelBinningFactor();
	int getMaximumBinningFactor();
	int getMinimumBinningFactor();
	void setPixelBinningFactor(int factor);
	void updateBinningFactor();
	int getPixelCountForBinningFactor(int factor);
	DoubleArray getWavelengthsForBinningFactor(int factor);
	~STSBase();
	// No public default Java constructor; creating one:
	STSBase();
	// No public Java copy constructor; creating one:
	STSBase(const STSBase &that);
	// Creating assignment operator declaration:
	STSBase &operator=(const STSBase &that);

private:
	jmethodID mid_setEndpoints5742;
	jmethodID mid_openSpectrometer5743;
	jmethodID mid_initFeatures5744;
	jmethodID mid_getFirmwareVersion5745;
	jmethodID mid_getInfo5746;
	jmethodID mid_getInfoBytes5747;
	jmethodID mid_getStatusArray5748;
	jmethodID mid_initialize5749;
	jmethodID mid_setInfo5750;
	jmethodID mid_setInfoBytes5751;
	jmethodID mid_setIntegrationTime5752;
	jmethodID mid_setStrobeEnable5753;
	jmethodID mid_readBenchID5754;
	jmethodID mid_writeBenchID5755;
	jmethodID mid_readBenchSerialNumber5756;
	jmethodID mid_writeBenchSerialNumber5757;
	jmethodID mid_writeSlitWidthMicrons5758;
	jmethodID mid_writeFiberDiameterMicrons5759;
	jmethodID mid_readGrating5760;
	jmethodID mid_writeGrating5761;
	jmethodID mid_readCoating5762;
	jmethodID mid_writeCoating5763;
	jmethodID mid_readFilter5764;
	jmethodID mid_writeFilter5765;
	jmethodID mid_writeShutterUsable5766;
	jmethodID mid_queryDevice5767;
	jmethodID mid_sendCommandToDevice5768;
	jmethodID mid_sendCommandToDevice5769;
	jmethodID mid_sendCommandToDeviceORIGINAL5770;
	jmethodID mid_readSpectrum5771;
	jmethodID mid_setCurrentSpectrumType5772;
	jmethodID mid_getWavelengthCalibrationCoefficients5773;
	jmethodID mid_getWavelengths5774;
	jmethodID mid_readWavelengthCalibrationCoefficientsFromSpectrometer5775;
	jmethodID mid_setWavelengthCalibrationCoefficients5776;
	jmethodID mid_setWavelengths5777;
	jmethodID mid_writeWavelengthCoefficientsToSpectrometer5778;
	jmethodID mid_getBoardTemperatureCelsius5779;
	jmethodID mid_getDetectorTemperatureCelsius5780;
	jmethodID mid_getAllPixels5781;
	jmethodID mid_getBadPixels5782;
	jmethodID mid_getBadPixelsFromSpectrometer5783;
	jmethodID mid_getNumberOfBadPixels5784;
	jmethodID mid_getMaximumBadPixels5785;
	jmethodID mid_removeBadPixels5786;
	jmethodID mid_setBadPixels5787;
	jmethodID mid_setBadPixelsToSpectrometer5788;
	jmethodID mid_getIrradianceCalibrationFactors5789;
	jmethodID mid_setIrradianceCalibrationFactors5790;
	jmethodID mid_getCollectionArea5791;
	jmethodID mid_hasCollectionArea5792;
	jmethodID mid_setCollectionArea5793;
	jmethodID mid_setSpectrumType5794;
	jmethodID mid_setSpectrumType5795;
	jmethodID mid_getAllSpectrumTypes5796;
	jmethodID mid_getPixelBinningFactor5797;
	jmethodID mid_getMaximumBinningFactor5798;
	jmethodID mid_getMinimumBinningFactor5799;
	jmethodID mid_setPixelBinningFactor5800;
	jmethodID mid_updateBinningFactor5801;
	jmethodID mid_getPixelCountForBinningFactor5802;
	jmethodID mid_getWavelengthsForBinningFactor5803;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBSPECTROMETER_T
#define EXTERN_TYPEDEF_USBSPECTROMETER_T
	typedef void* USBSPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_USBSPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
#define EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
	typedef void* COEFFICIENTSARRAY_T;
#endif /* EXTERN_TYPEDEF_COEFFICIENTSARRAY_T */
#ifndef EXTERN_TYPEDEF_SPECTRUM_T
#define EXTERN_TYPEDEF_SPECTRUM_T
	typedef void* SPECTRUM_T;
#endif /* EXTERN_TYPEDEF_SPECTRUM_T */
#ifndef EXTERN_TYPEDEF_SPECTRUMTYPE_T
#define EXTERN_TYPEDEF_SPECTRUMTYPE_T
	typedef void* SPECTRUMTYPE_T;
#endif /* EXTERN_TYPEDEF_SPECTRUMTYPE_T */
#ifndef EXTERN_TYPEDEF_SPECTRUMTYPEARRAY_T
#define EXTERN_TYPEDEF_SPECTRUMTYPEARRAY_T
	typedef void* SPECTRUMTYPEARRAY_T;
#endif /* EXTERN_TYPEDEF_SPECTRUMTYPEARRAY_T */
#ifndef EXTERN_TYPEDEF_STSBASE_T
#define EXTERN_TYPEDEF_STSBASE_T
	typedef void* STSBASE_T;
#endif /* EXTERN_TYPEDEF_STSBASE_T */

	// No public default Java constructor; creating one:
	EXPORTED STSBASE_T STSBase_Create();
	EXPORTED void STSBase_setEndpoints(STSBASE_T c_stsbase);
	EXPORTED void STSBase_openSpectrometer(STSBASE_T c_stsbase, int index);
	EXPORTED void STSBase_initFeatures(STSBASE_T c_stsbase, USBINTERFACE_T usb);
	EXPORTED void STSBase_getFirmwareVersion(STSBASE_T c_stsbase, JSTRING_T retval);
	EXPORTED void STSBase_getInfo(STSBASE_T c_stsbase, int slot, JSTRING_T retval);
	EXPORTED void STSBase_getInfoBytes(STSBASE_T c_stsbase, int slot, CHARARRAY_T retval);
	EXPORTED void STSBase_getStatusArray(STSBASE_T c_stsbase, CHARARRAY_T retval);
	EXPORTED void STSBase_initialize(STSBASE_T c_stsbase);
	EXPORTED void STSBase_setInfo(STSBASE_T c_stsbase, int slot, JSTRING_T str);
	EXPORTED void STSBase_setInfoBytes(STSBASE_T c_stsbase, int slot, CHARARRAY_T byteArray);
	EXPORTED void STSBase_setIntegrationTime(STSBASE_T c_stsbase, int intTime);
	EXPORTED void STSBase_setStrobeEnable(STSBASE_T c_stsbase, short enable);
	EXPORTED void STSBase_readBenchID(STSBASE_T c_stsbase, CHARARRAY_T retval);
	EXPORTED void STSBase_writeBenchID(STSBASE_T c_stsbase, CHARARRAY_T id);
	EXPORTED void STSBase_readBenchSerialNumber(STSBASE_T c_stsbase, CHARARRAY_T retval);
	EXPORTED void STSBase_writeBenchSerialNumber(STSBASE_T c_stsbase, CHARARRAY_T sn);
	EXPORTED void STSBase_writeSlitWidthMicrons(STSBASE_T c_stsbase, short microns);
	EXPORTED void STSBase_writeFiberDiameterMicrons(STSBASE_T c_stsbase, short microns);
	EXPORTED void STSBase_readGrating(STSBASE_T c_stsbase, CHARARRAY_T retval);
	EXPORTED void STSBase_writeGrating(STSBASE_T c_stsbase, CHARARRAY_T grating);
	EXPORTED void STSBase_readCoating(STSBASE_T c_stsbase, CHARARRAY_T retval);
	EXPORTED void STSBase_writeCoating(STSBASE_T c_stsbase, CHARARRAY_T coating);
	EXPORTED void STSBase_readFilter(STSBASE_T c_stsbase, CHARARRAY_T retval);
	EXPORTED void STSBase_writeFilter(STSBASE_T c_stsbase, CHARARRAY_T filter);
	EXPORTED void STSBase_writeShutterUsable(STSBASE_T c_stsbase, short usable);
	EXPORTED void STSBase_queryDevice(STSBASE_T c_stsbase, int messageType, CHARARRAY_T payload, CHARARRAY_T retval);
	EXPORTED short STSBase_sendCommandToDevice(STSBASE_T c_stsbase, int messageType, CHARARRAY_T payload, int endPointNumber);
	EXPORTED short STSBase_sendCommandToDevice_1(STSBASE_T c_stsbase, int messageType, CHARARRAY_T payload);
	EXPORTED short STSBase_sendCommandToDeviceORIGINAL(STSBASE_T c_stsbase, int messageType, CHARARRAY_T payload);
	EXPORTED void STSBase_readSpectrum(STSBASE_T c_stsbase);
	EXPORTED void STSBase_setCurrentSpectrumType(STSBASE_T c_stsbase, int type);
	EXPORTED void STSBase_getWavelengthCalibrationCoefficients(STSBASE_T c_stsbase, COEFFICIENTSARRAY_T retval);
	EXPORTED void STSBase_getWavelengths(STSBASE_T c_stsbase, int index, DOUBLEARRAY_T retval);
	EXPORTED void STSBase_readWavelengthCalibrationCoefficientsFromSpectrometer(STSBASE_T c_stsbase, COEFFICIENTSARRAY_T retval);
	EXPORTED void STSBase_setWavelengthCalibrationCoefficients(STSBASE_T c_stsbase, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STSBase_setWavelengths(STSBASE_T c_stsbase, DOUBLEARRAY_T wavelengths, int index);
	EXPORTED void STSBase_writeWavelengthCoefficientsToSpectrometer(STSBASE_T c_stsbase, COEFFICIENTSARRAY_T coefficients);
	EXPORTED double STSBase_getBoardTemperatureCelsius(STSBASE_T c_stsbase);
	EXPORTED double STSBase_getDetectorTemperatureCelsius(STSBASE_T c_stsbase);
	EXPORTED void STSBase_getAllPixels(STSBASE_T c_stsbase, INTARRAY_T retval);
	EXPORTED void STSBase_getBadPixels(STSBASE_T c_stsbase, INTARRAY_T retval);
	EXPORTED void STSBase_getBadPixelsFromSpectrometer(STSBASE_T c_stsbase, INTARRAY_T retval);
	EXPORTED int STSBase_getNumberOfBadPixels(STSBASE_T c_stsbase);
	EXPORTED int STSBase_getMaximumBadPixels(STSBASE_T c_stsbase);
	EXPORTED void STSBase_removeBadPixels(STSBASE_T c_stsbase, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void STSBase_setBadPixels(STSBASE_T c_stsbase, INTARRAY_T pixels);
	EXPORTED void STSBase_setBadPixelsToSpectrometer(STSBASE_T c_stsbase);
	EXPORTED void STSBase_getIrradianceCalibrationFactors(STSBASE_T c_stsbase, DOUBLEARRAY_T retval);
	EXPORTED void STSBase_setIrradianceCalibrationFactors(STSBASE_T c_stsbase, DOUBLEARRAY_T data);
	EXPORTED double STSBase_getCollectionArea(STSBASE_T c_stsbase);
	EXPORTED short STSBase_hasCollectionArea(STSBASE_T c_stsbase);
	EXPORTED void STSBase_setCollectionArea(STSBASE_T c_stsbase, double area);
	EXPORTED void STSBase_setSpectrumType(STSBASE_T c_stsbase, int type);
	EXPORTED void STSBase_setSpectrumType_1(STSBASE_T c_stsbase, SPECTRUMTYPE_T type);
	EXPORTED void STSBase_getAllSpectrumTypes(STSBASE_T c_stsbase, SPECTRUMTYPEARRAY_T retval);
	EXPORTED int STSBase_getPixelBinningFactor(STSBASE_T c_stsbase);
	EXPORTED int STSBase_getMaximumBinningFactor(STSBASE_T c_stsbase);
	EXPORTED int STSBase_getMinimumBinningFactor(STSBASE_T c_stsbase);
	EXPORTED void STSBase_setPixelBinningFactor(STSBASE_T c_stsbase, int factor);
	EXPORTED void STSBase_updateBinningFactor(STSBASE_T c_stsbase);
	EXPORTED int STSBase_getPixelCountForBinningFactor(STSBASE_T c_stsbase, int factor);
	EXPORTED void STSBase_getWavelengthsForBinningFactor(STSBASE_T c_stsbase, int factor, DOUBLEARRAY_T retval);
	EXPORTED void STSBase_Destroy(STSBASE_T stsbase);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED void STDCALL STSBase_setEndpoints_stdcall(STSBASE_T c_stsbase);
	EXPORTED void STDCALL STSBase_openSpectrometer_stdcall(STSBASE_T c_stsbase, int index);
	EXPORTED void STDCALL STSBase_initFeatures_stdcall(STSBASE_T c_stsbase, USBINTERFACE_T usb);
	EXPORTED void STDCALL STSBase_getFirmwareVersion_stdcall(STSBASE_T c_stsbase, JSTRING_T retval);
	EXPORTED void STDCALL STSBase_getInfo_stdcall(STSBASE_T c_stsbase, int slot, JSTRING_T retval);
	EXPORTED void STDCALL STSBase_getInfoBytes_stdcall(STSBASE_T c_stsbase, int slot, CHARARRAY_T retval);
	EXPORTED void STDCALL STSBase_getStatusArray_stdcall(STSBASE_T c_stsbase, CHARARRAY_T retval);
	EXPORTED void STDCALL STSBase_initialize_stdcall(STSBASE_T c_stsbase);
	EXPORTED void STDCALL STSBase_setInfo_stdcall(STSBASE_T c_stsbase, int slot, JSTRING_T str);
	EXPORTED void STDCALL STSBase_setInfoBytes_stdcall(STSBASE_T c_stsbase, int slot, CHARARRAY_T byteArray);
	EXPORTED void STDCALL STSBase_setIntegrationTime_stdcall(STSBASE_T c_stsbase, int intTime);
	EXPORTED void STDCALL STSBase_setStrobeEnable_stdcall(STSBASE_T c_stsbase, short enable);
	EXPORTED void STDCALL STSBase_readBenchID_stdcall(STSBASE_T c_stsbase, CHARARRAY_T retval);
	EXPORTED void STDCALL STSBase_writeBenchID_stdcall(STSBASE_T c_stsbase, CHARARRAY_T id);
	EXPORTED void STDCALL STSBase_readBenchSerialNumber_stdcall(STSBASE_T c_stsbase, CHARARRAY_T retval);
	EXPORTED void STDCALL STSBase_writeBenchSerialNumber_stdcall(STSBASE_T c_stsbase, CHARARRAY_T sn);
	EXPORTED void STDCALL STSBase_writeSlitWidthMicrons_stdcall(STSBASE_T c_stsbase, short microns);
	EXPORTED void STDCALL STSBase_writeFiberDiameterMicrons_stdcall(STSBASE_T c_stsbase, short microns);
	EXPORTED void STDCALL STSBase_readGrating_stdcall(STSBASE_T c_stsbase, CHARARRAY_T retval);
	EXPORTED void STDCALL STSBase_writeGrating_stdcall(STSBASE_T c_stsbase, CHARARRAY_T grating);
	EXPORTED void STDCALL STSBase_readCoating_stdcall(STSBASE_T c_stsbase, CHARARRAY_T retval);
	EXPORTED void STDCALL STSBase_writeCoating_stdcall(STSBASE_T c_stsbase, CHARARRAY_T coating);
	EXPORTED void STDCALL STSBase_readFilter_stdcall(STSBASE_T c_stsbase, CHARARRAY_T retval);
	EXPORTED void STDCALL STSBase_writeFilter_stdcall(STSBASE_T c_stsbase, CHARARRAY_T filter);
	EXPORTED void STDCALL STSBase_writeShutterUsable_stdcall(STSBASE_T c_stsbase, short usable);
	EXPORTED void STDCALL STSBase_queryDevice_stdcall(STSBASE_T c_stsbase, int messageType, CHARARRAY_T payload, CHARARRAY_T retval);
	EXPORTED short STDCALL STSBase_sendCommandToDevice_stdcall(STSBASE_T c_stsbase, int messageType, CHARARRAY_T payload, int endPointNumber);
	EXPORTED short STDCALL STSBase_sendCommandToDevice_stdcall_1(STSBASE_T c_stsbase, int messageType, CHARARRAY_T payload);
	EXPORTED short STDCALL STSBase_sendCommandToDeviceORIGINAL_stdcall(STSBASE_T c_stsbase, int messageType, CHARARRAY_T payload);
	EXPORTED void STDCALL STSBase_readSpectrum_stdcall(STSBASE_T c_stsbase);
	EXPORTED void STDCALL STSBase_setCurrentSpectrumType_stdcall(STSBASE_T c_stsbase, int type);
	EXPORTED void STDCALL STSBase_getWavelengthCalibrationCoefficients_stdcall(STSBASE_T c_stsbase, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL STSBase_getWavelengths_stdcall(STSBASE_T c_stsbase, int index, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL STSBase_readWavelengthCalibrationCoefficientsFromSpectrometer_stdcall(STSBASE_T c_stsbase, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL STSBase_setWavelengthCalibrationCoefficients_stdcall(STSBASE_T c_stsbase, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL STSBase_setWavelengths_stdcall(STSBASE_T c_stsbase, DOUBLEARRAY_T wavelengths, int index);
	EXPORTED void STDCALL STSBase_writeWavelengthCoefficientsToSpectrometer_stdcall(STSBASE_T c_stsbase, COEFFICIENTSARRAY_T coefficients);
	EXPORTED double STDCALL STSBase_getBoardTemperatureCelsius_stdcall(STSBASE_T c_stsbase);
	EXPORTED double STDCALL STSBase_getDetectorTemperatureCelsius_stdcall(STSBASE_T c_stsbase);
	EXPORTED void STDCALL STSBase_getAllPixels_stdcall(STSBASE_T c_stsbase, INTARRAY_T retval);
	EXPORTED void STDCALL STSBase_getBadPixels_stdcall(STSBASE_T c_stsbase, INTARRAY_T retval);
	EXPORTED void STDCALL STSBase_getBadPixelsFromSpectrometer_stdcall(STSBASE_T c_stsbase, INTARRAY_T retval);
	EXPORTED int STDCALL STSBase_getNumberOfBadPixels_stdcall(STSBASE_T c_stsbase);
	EXPORTED int STDCALL STSBase_getMaximumBadPixels_stdcall(STSBASE_T c_stsbase);
	EXPORTED void STDCALL STSBase_removeBadPixels_stdcall(STSBASE_T c_stsbase, SPECTRUM_T spectrum, SPECTRUM_T retval);
	EXPORTED void STDCALL STSBase_setBadPixels_stdcall(STSBASE_T c_stsbase, INTARRAY_T pixels);
	EXPORTED void STDCALL STSBase_setBadPixelsToSpectrometer_stdcall(STSBASE_T c_stsbase);
	EXPORTED void STDCALL STSBase_getIrradianceCalibrationFactors_stdcall(STSBASE_T c_stsbase, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL STSBase_setIrradianceCalibrationFactors_stdcall(STSBASE_T c_stsbase, DOUBLEARRAY_T data);
	EXPORTED double STDCALL STSBase_getCollectionArea_stdcall(STSBASE_T c_stsbase);
	EXPORTED short STDCALL STSBase_hasCollectionArea_stdcall(STSBASE_T c_stsbase);
	EXPORTED void STDCALL STSBase_setCollectionArea_stdcall(STSBASE_T c_stsbase, double area);
	EXPORTED void STDCALL STSBase_setSpectrumType_stdcall(STSBASE_T c_stsbase, int type);
	EXPORTED void STDCALL STSBase_setSpectrumType_stdcall_1(STSBASE_T c_stsbase, SPECTRUMTYPE_T type);
	EXPORTED void STDCALL STSBase_getAllSpectrumTypes_stdcall(STSBASE_T c_stsbase, SPECTRUMTYPEARRAY_T retval);
	EXPORTED int STDCALL STSBase_getPixelBinningFactor_stdcall(STSBASE_T c_stsbase);
	EXPORTED int STDCALL STSBase_getMaximumBinningFactor_stdcall(STSBASE_T c_stsbase);
	EXPORTED int STDCALL STSBase_getMinimumBinningFactor_stdcall(STSBASE_T c_stsbase);
	EXPORTED void STDCALL STSBase_setPixelBinningFactor_stdcall(STSBASE_T c_stsbase, int factor);
	EXPORTED void STDCALL STSBase_updateBinningFactor_stdcall(STSBASE_T c_stsbase);
	EXPORTED int STDCALL STSBase_getPixelCountForBinningFactor_stdcall(STSBASE_T c_stsbase, int factor);
	EXPORTED void STDCALL STSBase_getWavelengthsForBinningFactor_stdcall(STSBASE_T c_stsbase, int factor, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL STSBase_Destroy_stdcall(STSBASE_T stsbase);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* STSBASE_H */
