/**
 * File: AnalogDac.h
 * Autogenerated on Fri Mar 23 13:38:32 EDT 2018 based on
 * AnalogDac.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/dac/AnalogDac
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef ANALOGDAC_H
#define ANALOGDAC_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "OffsetConstraints.h"
#include "ReferenceConstraints.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class OffsetConstraints;
class ReferenceConstraints;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED AnalogDac : public BaseJavaClass // CPPClass.tag001
{
public: 
	void setOffsetCount(int param0);
	void setReferenceCount(int param0);
	int getReferenceCount();
	int getOffsetCount();
	OffsetConstraints getOffsetConstraints();
	ReferenceConstraints getReferenceConstraints();
	~AnalogDac();
	// No public default Java constructor; creating one:
	AnalogDac();
	// No public Java copy constructor; creating one:
	AnalogDac(const AnalogDac &that);
	// Creating assignment operator declaration:
	AnalogDac &operator=(const AnalogDac &that);

private:
	jmethodID mid_setOffsetCount1126;
	jmethodID mid_setReferenceCount1127;
	jmethodID mid_getReferenceCount1128;
	jmethodID mid_getOffsetCount1129;
	jmethodID mid_getOffsetConstraints1130;
	jmethodID mid_getReferenceConstraints1131;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_OFFSETCONSTRAINTS_T
#define EXTERN_TYPEDEF_OFFSETCONSTRAINTS_T
	typedef void* OFFSETCONSTRAINTS_T;
#endif /* EXTERN_TYPEDEF_OFFSETCONSTRAINTS_T */
#ifndef EXTERN_TYPEDEF_REFERENCECONSTRAINTS_T
#define EXTERN_TYPEDEF_REFERENCECONSTRAINTS_T
	typedef void* REFERENCECONSTRAINTS_T;
#endif /* EXTERN_TYPEDEF_REFERENCECONSTRAINTS_T */
#ifndef EXTERN_TYPEDEF_ANALOGDAC_T
#define EXTERN_TYPEDEF_ANALOGDAC_T
	typedef void* ANALOGDAC_T;
#endif /* EXTERN_TYPEDEF_ANALOGDAC_T */

	// No public default Java constructor; creating one:
	EXPORTED ANALOGDAC_T AnalogDac_Create();
	EXPORTED void AnalogDac_setOffsetCount(ANALOGDAC_T c_analog_dac, int param0);
	EXPORTED void AnalogDac_setReferenceCount(ANALOGDAC_T c_analog_dac, int param0);
	EXPORTED int AnalogDac_getReferenceCount(ANALOGDAC_T c_analog_dac);
	EXPORTED int AnalogDac_getOffsetCount(ANALOGDAC_T c_analog_dac);
	EXPORTED void AnalogDac_getOffsetConstraints(ANALOGDAC_T c_analog_dac, OFFSETCONSTRAINTS_T retval);
	EXPORTED void AnalogDac_getReferenceConstraints(ANALOGDAC_T c_analog_dac, REFERENCECONSTRAINTS_T retval);
	EXPORTED void AnalogDac_Destroy(ANALOGDAC_T analog_dac);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED void STDCALL AnalogDac_setOffsetCount_stdcall(ANALOGDAC_T c_analog_dac, int param0);
	EXPORTED void STDCALL AnalogDac_setReferenceCount_stdcall(ANALOGDAC_T c_analog_dac, int param0);
	EXPORTED int STDCALL AnalogDac_getReferenceCount_stdcall(ANALOGDAC_T c_analog_dac);
	EXPORTED int STDCALL AnalogDac_getOffsetCount_stdcall(ANALOGDAC_T c_analog_dac);
	EXPORTED void STDCALL AnalogDac_getOffsetConstraints_stdcall(ANALOGDAC_T c_analog_dac, OFFSETCONSTRAINTS_T retval);
	EXPORTED void STDCALL AnalogDac_getReferenceConstraints_stdcall(ANALOGDAC_T c_analog_dac, REFERENCECONSTRAINTS_T retval);
	EXPORTED void STDCALL AnalogDac_Destroy_stdcall(ANALOGDAC_T analog_dac);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* ANALOGDAC_H */
