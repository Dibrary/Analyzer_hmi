/**
 * File: ArcoptixTransport.h
 * Autogenerated on Fri Mar 23 13:38:50 EDT 2018 based on
 * ArcoptixTransport.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/arcoptix/ArcoptixTransport
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef ARCOPTIXTRANSPORT_H
#define ARCOPTIXTRANSPORT_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED ArcoptixTransport : public BaseJavaClass // CPPClass.tag001
{
public: 
	ArcoptixTransport();
	short isClaimed();
	short claimSpectrometer(JString& serialNumber);
	short reconnectToHub(JString& ipAddress, int portNumber);
	short connectToHub(JString& ipAddress, int portNumber);
	void disconnect();
	int discoverAllSpectrometers();
	JString getIPAddress();
	int getPort();
	int getMaximumIntensity();
	int getNumberOfDiscoveredSpectrometers();
	JString getSerialNumberOfClaimedSpectrometer();
	JString getSerialNumber(int indexPosition);
	int getTotalNumberOfPixels();
	DoubleArray getWavelengths();
	JString getFirmwareVersion();
	int getGain();
	short setGain(int gainValue);
	double getSaturationFromSpectrometer();
	double getSaturationRatio();
	DoubleArray getSpectrum();
	short isConnected();
	short nop();
	~ArcoptixTransport();
	// No public Java copy constructor; creating one:
	ArcoptixTransport(const ArcoptixTransport &that);
	// Creating assignment operator declaration:
	ArcoptixTransport &operator=(const ArcoptixTransport &that);

private:
	jmethodID mid_ArcoptixTransport3259;
	jmethodID mid_isClaimed3260;
	jmethodID mid_claimSpectrometer3261;
	jmethodID mid_reconnectToHub3262;
	jmethodID mid_connectToHub3263;
	jmethodID mid_disconnect3264;
	jmethodID mid_discoverAllSpectrometers3265;
	jmethodID mid_getIPAddress3266;
	jmethodID mid_getPort3267;
	jmethodID mid_getMaximumIntensity3268;
	jmethodID mid_getNumberOfDiscoveredSpectrometers3269;
	jmethodID mid_getSerialNumberOfClaimedSpectrometer3270;
	jmethodID mid_getSerialNumber3271;
	jmethodID mid_getTotalNumberOfPixels3272;
	jmethodID mid_getWavelengths3273;
	jmethodID mid_getFirmwareVersion3274;
	jmethodID mid_getGain3275;
	jmethodID mid_setGain3276;
	jmethodID mid_getSaturationFromSpectrometer3277;
	jmethodID mid_getSaturationRatio3278;
	jmethodID mid_getSpectrum3279;
	jmethodID mid_isConnected3280;
	jmethodID mid_nop3281;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_ARCOPTIXTRANSPORT_T
#define EXTERN_TYPEDEF_ARCOPTIXTRANSPORT_T
	typedef void* ARCOPTIXTRANSPORT_T;
#endif /* EXTERN_TYPEDEF_ARCOPTIXTRANSPORT_T */

	EXPORTED ARCOPTIXTRANSPORT_T ArcoptixTransport_Create();
	EXPORTED short ArcoptixTransport_isClaimed(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED short ArcoptixTransport_claimSpectrometer(ARCOPTIXTRANSPORT_T c_arcoptix_transport, JSTRING_T serialNumber);
	EXPORTED short ArcoptixTransport_reconnectToHub(ARCOPTIXTRANSPORT_T c_arcoptix_transport, JSTRING_T ipAddress, int portNumber);
	EXPORTED short ArcoptixTransport_connectToHub(ARCOPTIXTRANSPORT_T c_arcoptix_transport, JSTRING_T ipAddress, int portNumber);
	EXPORTED void ArcoptixTransport_disconnect(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED int ArcoptixTransport_discoverAllSpectrometers(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED void ArcoptixTransport_getIPAddress(ARCOPTIXTRANSPORT_T c_arcoptix_transport, JSTRING_T retval);
	EXPORTED int ArcoptixTransport_getPort(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED int ArcoptixTransport_getMaximumIntensity(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED int ArcoptixTransport_getNumberOfDiscoveredSpectrometers(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED void ArcoptixTransport_getSerialNumberOfClaimedSpectrometer(ARCOPTIXTRANSPORT_T c_arcoptix_transport, JSTRING_T retval);
	EXPORTED void ArcoptixTransport_getSerialNumber(ARCOPTIXTRANSPORT_T c_arcoptix_transport, int indexPosition, JSTRING_T retval);
	EXPORTED int ArcoptixTransport_getTotalNumberOfPixels(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED void ArcoptixTransport_getWavelengths(ARCOPTIXTRANSPORT_T c_arcoptix_transport, DOUBLEARRAY_T retval);
	EXPORTED void ArcoptixTransport_getFirmwareVersion(ARCOPTIXTRANSPORT_T c_arcoptix_transport, JSTRING_T retval);
	EXPORTED int ArcoptixTransport_getGain(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED short ArcoptixTransport_setGain(ARCOPTIXTRANSPORT_T c_arcoptix_transport, int gainValue);
	EXPORTED double ArcoptixTransport_getSaturationFromSpectrometer(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED double ArcoptixTransport_getSaturationRatio(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED void ArcoptixTransport_getSpectrum(ARCOPTIXTRANSPORT_T c_arcoptix_transport, DOUBLEARRAY_T retval);
	EXPORTED short ArcoptixTransport_isConnected(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED short ArcoptixTransport_nop(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED void ArcoptixTransport_Destroy(ARCOPTIXTRANSPORT_T arcoptix_transport);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED ARCOPTIXTRANSPORT_T STDCALL ArcoptixTransport_Create_stdcall();
	EXPORTED short STDCALL ArcoptixTransport_isClaimed_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED short STDCALL ArcoptixTransport_claimSpectrometer_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport, JSTRING_T serialNumber);
	EXPORTED short STDCALL ArcoptixTransport_reconnectToHub_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport, JSTRING_T ipAddress, int portNumber);
	EXPORTED short STDCALL ArcoptixTransport_connectToHub_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport, JSTRING_T ipAddress, int portNumber);
	EXPORTED void STDCALL ArcoptixTransport_disconnect_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED int STDCALL ArcoptixTransport_discoverAllSpectrometers_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED void STDCALL ArcoptixTransport_getIPAddress_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport, JSTRING_T retval);
	EXPORTED int STDCALL ArcoptixTransport_getPort_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED int STDCALL ArcoptixTransport_getMaximumIntensity_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED int STDCALL ArcoptixTransport_getNumberOfDiscoveredSpectrometers_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED void STDCALL ArcoptixTransport_getSerialNumberOfClaimedSpectrometer_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport, JSTRING_T retval);
	EXPORTED void STDCALL ArcoptixTransport_getSerialNumber_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport, int indexPosition, JSTRING_T retval);
	EXPORTED int STDCALL ArcoptixTransport_getTotalNumberOfPixels_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED void STDCALL ArcoptixTransport_getWavelengths_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL ArcoptixTransport_getFirmwareVersion_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport, JSTRING_T retval);
	EXPORTED int STDCALL ArcoptixTransport_getGain_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED short STDCALL ArcoptixTransport_setGain_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport, int gainValue);
	EXPORTED double STDCALL ArcoptixTransport_getSaturationFromSpectrometer_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED double STDCALL ArcoptixTransport_getSaturationRatio_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED void STDCALL ArcoptixTransport_getSpectrum_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport, DOUBLEARRAY_T retval);
	EXPORTED short STDCALL ArcoptixTransport_isConnected_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED short STDCALL ArcoptixTransport_nop_stdcall(ARCOPTIXTRANSPORT_T c_arcoptix_transport);
	EXPORTED void STDCALL ArcoptixTransport_Destroy_stdcall(ARCOPTIXTRANSPORT_T arcoptix_transport);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* ARCOPTIXTRANSPORT_H */
