/**
 * File: PlugInProviderImpl.h
 * Autogenerated on Fri Mar 23 13:38:39 EDT 2018 based on
 * PlugInProviderImpl.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/pluginprovider/PlugInProviderImpl
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef PLUGINPROVIDERIMPL_H
#define PLUGINPROVIDERIMPL_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBFeature.h"
#include "USBInterface.h"
#include "Spectrometer.h"
#include "SpectrometerPlugInArray.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBFeature;
class USBInterface;
class Spectrometer;
class SpectrometerPlugInArray;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED PlugInProviderImpl : public USBFeature // CPPClass.tag001
{
public: 
	PlugInProviderImpl(USBInterface& usbInt, Spectrometer& spec);
	void detectPlugIns();
	int getNumberOfPlugIns();
	CharArray initializePlugIns();
	short isPlugInDetected(int id);
	SpectrometerPlugInArray getPlugIns();
	~PlugInProviderImpl();
	// No public default Java constructor; creating one:
	PlugInProviderImpl();
	// No public Java copy constructor; creating one:
	PlugInProviderImpl(const PlugInProviderImpl &that);
	// Creating assignment operator declaration:
	PlugInProviderImpl &operator=(const PlugInProviderImpl &that);

private:
	jmethodID mid_PlugInProviderImpl1937;
	jmethodID mid_detectPlugIns1938;
	jmethodID mid_getNumberOfPlugIns1939;
	jmethodID mid_initializePlugIns1940;
	jmethodID mid_isPlugInDetected1941;
	jmethodID mid_getPlugIns1942;
	jfieldID fid_dataOutEndPoint;
	jfieldID fid_lowSpeedInEndPoint;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBFEATURE_T
#define EXTERN_TYPEDEF_USBFEATURE_T
	typedef void* USBFEATURE_T;
#endif /* EXTERN_TYPEDEF_USBFEATURE_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETER_T
#define EXTERN_TYPEDEF_SPECTROMETER_T
	typedef void* SPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETERPLUGINARRAY_T
#define EXTERN_TYPEDEF_SPECTROMETERPLUGINARRAY_T
	typedef void* SPECTROMETERPLUGINARRAY_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERPLUGINARRAY_T */
#ifndef EXTERN_TYPEDEF_PLUGINPROVIDERIMPL_T
#define EXTERN_TYPEDEF_PLUGINPROVIDERIMPL_T
	typedef void* PLUGINPROVIDERIMPL_T;
#endif /* EXTERN_TYPEDEF_PLUGINPROVIDERIMPL_T */

	// No public default Java constructor; creating one:
	EXPORTED PLUGINPROVIDERIMPL_T PlugInProviderImpl_Create();
	EXPORTED PLUGINPROVIDERIMPL_T PlugInProviderImpl_Create_1(USBINTERFACE_T usbInt, SPECTROMETER_T spec);
	EXPORTED void PlugInProviderImpl_detectPlugIns(PLUGINPROVIDERIMPL_T c_plug_in_provider_impl);
	EXPORTED int PlugInProviderImpl_getNumberOfPlugIns(PLUGINPROVIDERIMPL_T c_plug_in_provider_impl);
	EXPORTED void PlugInProviderImpl_initializePlugIns(PLUGINPROVIDERIMPL_T c_plug_in_provider_impl, CHARARRAY_T retval);
	EXPORTED short PlugInProviderImpl_isPlugInDetected(PLUGINPROVIDERIMPL_T c_plug_in_provider_impl, int id);
	EXPORTED void PlugInProviderImpl_getPlugIns(PLUGINPROVIDERIMPL_T c_plug_in_provider_impl, SPECTROMETERPLUGINARRAY_T retval);
	EXPORTED void PlugInProviderImpl_Destroy(PLUGINPROVIDERIMPL_T plug_in_provider_impl);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED PLUGINPROVIDERIMPL_T STDCALL PlugInProviderImpl_Create_stdcall_1(USBINTERFACE_T usbInt, SPECTROMETER_T spec);
	EXPORTED void STDCALL PlugInProviderImpl_detectPlugIns_stdcall(PLUGINPROVIDERIMPL_T c_plug_in_provider_impl);
	EXPORTED int STDCALL PlugInProviderImpl_getNumberOfPlugIns_stdcall(PLUGINPROVIDERIMPL_T c_plug_in_provider_impl);
	EXPORTED void STDCALL PlugInProviderImpl_initializePlugIns_stdcall(PLUGINPROVIDERIMPL_T c_plug_in_provider_impl, CHARARRAY_T retval);
	EXPORTED short STDCALL PlugInProviderImpl_isPlugInDetected_stdcall(PLUGINPROVIDERIMPL_T c_plug_in_provider_impl, int id);
	EXPORTED void STDCALL PlugInProviderImpl_getPlugIns_stdcall(PLUGINPROVIDERIMPL_T c_plug_in_provider_impl, SPECTROMETERPLUGINARRAY_T retval);
	EXPORTED void STDCALL PlugInProviderImpl_Destroy_stdcall(PLUGINPROVIDERIMPL_T plug_in_provider_impl);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* PLUGINPROVIDERIMPL_H */
