/**
 * File: Vector.h
 * Autogenerated on Mon Aug 04 16:04:22 EDT 2008 based on
 * Vector.java
 * for the Java class
 * java/util/Vector
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef VECTOR_H
#define VECTOR_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "AbstractList.h"
#include "JString.h"
#include "Collection.h"
#include "Enumeration.h"
#include "List.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class AbstractList;
class JString;
class Collection;
class Enumeration;
class List;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED Vector : public AbstractList // CPPClass.getClassDeclaration
{
public: 
	int capacity();
	int hashCode();
	int size();
	Vector();
	void clear();
	void removeAllElements();
	void trimToSize();
	unsigned char isEmpty();
	Vector(int param0);
	void ensureCapacity(int param0);
	void removeElementAt(int param0);
	void setSize(int param0);
	Vector(int param0, int param1);
	JString toString();
	unsigned char addAll(int param0, Collection& param1);
	Vector(Collection& param0);
	unsigned char addAll(Collection& param0);
	unsigned char containsAll(Collection& param0);
	unsigned char removeAll(Collection& param0);
	unsigned char retainAll(Collection& param0);
	Enumeration elements();
	List subList(int param0, int param1);
	~Vector();
	// No public Java copy constructor; creating one:
	Vector(const Vector &that);
	// Creating assignment operator declaration:
	Vector &operator=(const Vector &that);

private:
	jmethodID mid_capacity119;
	jmethodID mid_hashCode120;
	jmethodID mid_size121;
	jmethodID mid_Vector122;
	jmethodID mid_clear123;
	jmethodID mid_removeAllElements124;
	jmethodID mid_trimToSize125;
	jmethodID mid_isEmpty126;
	jmethodID mid_Vector127;
	jmethodID mid_ensureCapacity128;
	jmethodID mid_removeElementAt129;
	jmethodID mid_setSize130;
	jmethodID mid_Vector131;
	jmethodID mid_toString132;
	jmethodID mid_addAll133;
	jmethodID mid_Vector134;
	jmethodID mid_addAll135;
	jmethodID mid_containsAll136;
	jmethodID mid_removeAll137;
	jmethodID mid_retainAll138;
	jmethodID mid_elements139;
	jmethodID mid_subList140;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_ABSTRACTLIST_T
#define EXTERN_TYPEDEF_ABSTRACTLIST_T
	typedef void* ABSTRACTLIST_T;
#endif /* EXTERN_TYPEDEF_ABSTRACTLIST_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_COLLECTION_T
#define EXTERN_TYPEDEF_COLLECTION_T
	typedef void* COLLECTION_T;
#endif /* EXTERN_TYPEDEF_COLLECTION_T */
#ifndef EXTERN_TYPEDEF_ENUMERATION_T
#define EXTERN_TYPEDEF_ENUMERATION_T
	typedef void* ENUMERATION_T;
#endif /* EXTERN_TYPEDEF_ENUMERATION_T */
#ifndef EXTERN_TYPEDEF_LIST_T
#define EXTERN_TYPEDEF_LIST_T
	typedef void* LIST_T;
#endif /* EXTERN_TYPEDEF_LIST_T */
#ifndef EXTERN_TYPEDEF_VECTOR_T
#define EXTERN_TYPEDEF_VECTOR_T
	typedef void* VECTOR_T;
#endif /* EXTERN_TYPEDEF_VECTOR_T */

	EXPORTED int Vector_capacity(VECTOR_T c_vector);
	EXPORTED int Vector_hashCode(VECTOR_T c_vector);
	EXPORTED int Vector_size(VECTOR_T c_vector);
	EXPORTED VECTOR_T Vector_Create();
	EXPORTED void Vector_clear(VECTOR_T c_vector);
	EXPORTED void Vector_removeAllElements(VECTOR_T c_vector);
	EXPORTED void Vector_trimToSize(VECTOR_T c_vector);
	EXPORTED unsigned char Vector_isEmpty(VECTOR_T c_vector);
	EXPORTED VECTOR_T Vector_Create_1(int param0);
	EXPORTED void Vector_ensureCapacity(VECTOR_T c_vector, int param0);
	EXPORTED void Vector_removeElementAt(VECTOR_T c_vector, int param0);
	EXPORTED void Vector_setSize(VECTOR_T c_vector, int param0);
	EXPORTED VECTOR_T Vector_Create_2(int param0, int param1);
	EXPORTED void Vector_toString(VECTOR_T c_vector, JSTRING_T retval);
	EXPORTED unsigned char Vector_addAll(VECTOR_T c_vector, int param0, COLLECTION_T param1);
	EXPORTED VECTOR_T Vector_Create_3(COLLECTION_T param0);
	EXPORTED unsigned char Vector_addAll_1(VECTOR_T c_vector, COLLECTION_T param0);
	EXPORTED unsigned char Vector_containsAll(VECTOR_T c_vector, COLLECTION_T param0);
	EXPORTED unsigned char Vector_removeAll(VECTOR_T c_vector, COLLECTION_T param0);
	EXPORTED unsigned char Vector_retainAll(VECTOR_T c_vector, COLLECTION_T param0);
	EXPORTED void Vector_elements(VECTOR_T c_vector, ENUMERATION_T retval);
	EXPORTED void Vector_subList(VECTOR_T c_vector, int param0, int param1, LIST_T retval);
	EXPORTED void Vector_Destroy(VECTOR_T vector);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED int STDCALL Vector_capacity_stdcall(VECTOR_T c_vector);
	EXPORTED int STDCALL Vector_hashCode_stdcall(VECTOR_T c_vector);
	EXPORTED int STDCALL Vector_size_stdcall(VECTOR_T c_vector);
	EXPORTED VECTOR_T STDCALL Vector_Create_stdcall();
	EXPORTED void STDCALL Vector_clear_stdcall(VECTOR_T c_vector);
	EXPORTED void STDCALL Vector_removeAllElements_stdcall(VECTOR_T c_vector);
	EXPORTED void STDCALL Vector_trimToSize_stdcall(VECTOR_T c_vector);
	EXPORTED unsigned char STDCALL Vector_isEmpty_stdcall(VECTOR_T c_vector);
	EXPORTED VECTOR_T STDCALL Vector_Create_stdcall_1(int param0);
	EXPORTED void STDCALL Vector_ensureCapacity_stdcall(VECTOR_T c_vector, int param0);
	EXPORTED void STDCALL Vector_removeElementAt_stdcall(VECTOR_T c_vector, int param0);
	EXPORTED void STDCALL Vector_setSize_stdcall(VECTOR_T c_vector, int param0);
	EXPORTED VECTOR_T STDCALL Vector_Create_stdcall_2(int param0, int param1);
	EXPORTED void STDCALL Vector_toString_stdcall(VECTOR_T c_vector, JSTRING_T retval);
	EXPORTED unsigned char STDCALL Vector_addAll_stdcall(VECTOR_T c_vector, int param0, COLLECTION_T param1);
	EXPORTED VECTOR_T STDCALL Vector_Create_stdcall_3(COLLECTION_T param0);
	EXPORTED unsigned char STDCALL Vector_addAll_stdcall_1(VECTOR_T c_vector, COLLECTION_T param0);
	EXPORTED unsigned char STDCALL Vector_containsAll_stdcall(VECTOR_T c_vector, COLLECTION_T param0);
	EXPORTED unsigned char STDCALL Vector_removeAll_stdcall(VECTOR_T c_vector, COLLECTION_T param0);
	EXPORTED unsigned char STDCALL Vector_retainAll_stdcall(VECTOR_T c_vector, COLLECTION_T param0);
	EXPORTED void STDCALL Vector_elements_stdcall(VECTOR_T c_vector, ENUMERATION_T retval);
	EXPORTED void STDCALL Vector_subList_stdcall(VECTOR_T c_vector, int param0, int param1, LIST_T retval);
	EXPORTED void STDCALL Vector_Destroy_stdcall(VECTOR_T vector);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* VECTOR_H */
