/**
 * File: ThermoElectricImpl.h
 * Autogenerated on Fri Mar 23 13:38:40 EDT 2018 based on
 * ThermoElectricImpl.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/thermoelectric/ThermoElectricImpl
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef THERMOELECTRICIMPL_H
#define THERMOELECTRICIMPL_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBFeature.h"
#include "USBInterface.h"
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBFeature;
class USBInterface;
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED ThermoElectricImpl : public USBFeature // CPPClass.tag001
{
public: 
	ThermoElectricImpl(USBInterface& usbInt);
	int getSaturationIntensity();
	short setSaturationIntensity(int saturationIntensity, JString& key);
	void setTECEnable(short param0);
	void setFanEnable(short param0);
	double getDetectorTemperatureCelsius();
	double getDetectorTemperatureSetPointCelsius();
	void setDetectorSetPointCelsius(double param0);
	double getSetPointMinimumCelsius();
	double getSetPointMaximumCelsius();
	double getSetPointIncrementCelsius();
	short isSaveTECStateEnabled();
	void saveTECState();
	~ThermoElectricImpl();
	// No public default Java constructor; creating one:
	ThermoElectricImpl();
	// No public Java copy constructor; creating one:
	ThermoElectricImpl(const ThermoElectricImpl &that);
	// Creating assignment operator declaration:
	ThermoElectricImpl &operator=(const ThermoElectricImpl &that);

private:
	jmethodID mid_ThermoElectricImpl2124;
	jmethodID mid_getSaturationIntensity2125;
	jmethodID mid_setSaturationIntensity2126;
	jmethodID mid_setTECEnable2127;
	jmethodID mid_setFanEnable2128;
	jmethodID mid_getDetectorTemperatureCelsius2129;
	jmethodID mid_getDetectorTemperatureSetPointCelsius2130;
	jmethodID mid_setDetectorSetPointCelsius2131;
	jmethodID mid_getSetPointMinimumCelsius2132;
	jmethodID mid_getSetPointMaximumCelsius2133;
	jmethodID mid_getSetPointIncrementCelsius2134;
	jmethodID mid_isSaveTECStateEnabled2135;
	jmethodID mid_saveTECState2136;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBFEATURE_T
#define EXTERN_TYPEDEF_USBFEATURE_T
	typedef void* USBFEATURE_T;
#endif /* EXTERN_TYPEDEF_USBFEATURE_T */
#ifndef EXTERN_TYPEDEF_USBINTERFACE_T
#define EXTERN_TYPEDEF_USBINTERFACE_T
	typedef void* USBINTERFACE_T;
#endif /* EXTERN_TYPEDEF_USBINTERFACE_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_THERMOELECTRICIMPL_T
#define EXTERN_TYPEDEF_THERMOELECTRICIMPL_T
	typedef void* THERMOELECTRICIMPL_T;
#endif /* EXTERN_TYPEDEF_THERMOELECTRICIMPL_T */

	// No public default Java constructor; creating one:
	EXPORTED THERMOELECTRICIMPL_T ThermoElectricImpl_Create();
	EXPORTED THERMOELECTRICIMPL_T ThermoElectricImpl_Create_1(USBINTERFACE_T usbInt);
	EXPORTED int ThermoElectricImpl_getSaturationIntensity(THERMOELECTRICIMPL_T c_thermo_electric_impl);
	EXPORTED short ThermoElectricImpl_setSaturationIntensity(THERMOELECTRICIMPL_T c_thermo_electric_impl, int saturationIntensity, JSTRING_T key);
	EXPORTED void ThermoElectricImpl_setTECEnable(THERMOELECTRICIMPL_T c_thermo_electric_impl, short param0);
	EXPORTED void ThermoElectricImpl_setFanEnable(THERMOELECTRICIMPL_T c_thermo_electric_impl, short param0);
	EXPORTED double ThermoElectricImpl_getDetectorTemperatureCelsius(THERMOELECTRICIMPL_T c_thermo_electric_impl);
	EXPORTED double ThermoElectricImpl_getDetectorTemperatureSetPointCelsius(THERMOELECTRICIMPL_T c_thermo_electric_impl);
	EXPORTED void ThermoElectricImpl_setDetectorSetPointCelsius(THERMOELECTRICIMPL_T c_thermo_electric_impl, double param0);
	EXPORTED double ThermoElectricImpl_getSetPointMinimumCelsius(THERMOELECTRICIMPL_T c_thermo_electric_impl);
	EXPORTED double ThermoElectricImpl_getSetPointMaximumCelsius(THERMOELECTRICIMPL_T c_thermo_electric_impl);
	EXPORTED double ThermoElectricImpl_getSetPointIncrementCelsius(THERMOELECTRICIMPL_T c_thermo_electric_impl);
	EXPORTED short ThermoElectricImpl_isSaveTECStateEnabled(THERMOELECTRICIMPL_T c_thermo_electric_impl);
	EXPORTED void ThermoElectricImpl_saveTECState(THERMOELECTRICIMPL_T c_thermo_electric_impl);
	EXPORTED void ThermoElectricImpl_Destroy(THERMOELECTRICIMPL_T thermo_electric_impl);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED THERMOELECTRICIMPL_T STDCALL ThermoElectricImpl_Create_stdcall_1(USBINTERFACE_T usbInt);
	EXPORTED int STDCALL ThermoElectricImpl_getSaturationIntensity_stdcall(THERMOELECTRICIMPL_T c_thermo_electric_impl);
	EXPORTED short STDCALL ThermoElectricImpl_setSaturationIntensity_stdcall(THERMOELECTRICIMPL_T c_thermo_electric_impl, int saturationIntensity, JSTRING_T key);
	EXPORTED void STDCALL ThermoElectricImpl_setTECEnable_stdcall(THERMOELECTRICIMPL_T c_thermo_electric_impl, short param0);
	EXPORTED void STDCALL ThermoElectricImpl_setFanEnable_stdcall(THERMOELECTRICIMPL_T c_thermo_electric_impl, short param0);
	EXPORTED double STDCALL ThermoElectricImpl_getDetectorTemperatureCelsius_stdcall(THERMOELECTRICIMPL_T c_thermo_electric_impl);
	EXPORTED double STDCALL ThermoElectricImpl_getDetectorTemperatureSetPointCelsius_stdcall(THERMOELECTRICIMPL_T c_thermo_electric_impl);
	EXPORTED void STDCALL ThermoElectricImpl_setDetectorSetPointCelsius_stdcall(THERMOELECTRICIMPL_T c_thermo_electric_impl, double param0);
	EXPORTED double STDCALL ThermoElectricImpl_getSetPointMinimumCelsius_stdcall(THERMOELECTRICIMPL_T c_thermo_electric_impl);
	EXPORTED double STDCALL ThermoElectricImpl_getSetPointMaximumCelsius_stdcall(THERMOELECTRICIMPL_T c_thermo_electric_impl);
	EXPORTED double STDCALL ThermoElectricImpl_getSetPointIncrementCelsius_stdcall(THERMOELECTRICIMPL_T c_thermo_electric_impl);
	EXPORTED short STDCALL ThermoElectricImpl_isSaveTECStateEnabled_stdcall(THERMOELECTRICIMPL_T c_thermo_electric_impl);
	EXPORTED void STDCALL ThermoElectricImpl_saveTECState_stdcall(THERMOELECTRICIMPL_T c_thermo_electric_impl);
	EXPORTED void STDCALL ThermoElectricImpl_Destroy_stdcall(THERMOELECTRICIMPL_T thermo_electric_impl);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* THERMOELECTRICIMPL_H */
