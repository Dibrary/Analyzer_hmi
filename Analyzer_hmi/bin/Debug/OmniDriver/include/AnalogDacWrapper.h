/**
 * File: AnalogDacWrapper.h
 * Autogenerated on Fri Mar 23 13:38:32 EDT 2018 based on
 * AnalogDacWrapper.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/dac/AnalogDacWrapper
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef ANALOGDACWRAPPER_H
#define ANALOGDACWRAPPER_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "AnalogDac.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class AnalogDac;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED AnalogDacWrapper : public BaseJavaClass // CPPClass.tag001
{
public: 
	AnalogDacWrapper(AnalogDac& analogDAC);
	int getOffsetCount();
	void setOffsetCount(int baselineOffset);
	int getReferenceCount();
	void setReferenceCount(int referenceCnt);
	int getMinOffsetValueDAC();
	float getMinOffsetValueVolts();
	int getMaxOffsetValueDAC();
	float getMaxOffsetValueVolts();
	float getMinReferenceValueVolts();
	float getMaxReferenceValueVolts();
	int getMinReferenceValueDAC();
	int getMaxReferenceValueDAC();
	~AnalogDacWrapper();
	// No public default Java constructor; creating one:
	AnalogDacWrapper();
	// No public Java copy constructor; creating one:
	AnalogDacWrapper(const AnalogDacWrapper &that);
	// Creating assignment operator declaration:
	AnalogDacWrapper &operator=(const AnalogDacWrapper &that);

private:
	jmethodID mid_AnalogDacWrapper1140;
	jmethodID mid_getOffsetCount1141;
	jmethodID mid_setOffsetCount1142;
	jmethodID mid_getReferenceCount1143;
	jmethodID mid_setReferenceCount1144;
	jmethodID mid_getMinOffsetValueDAC1145;
	jmethodID mid_getMinOffsetValueVolts1146;
	jmethodID mid_getMaxOffsetValueDAC1147;
	jmethodID mid_getMaxOffsetValueVolts1148;
	jmethodID mid_getMinReferenceValueVolts1149;
	jmethodID mid_getMaxReferenceValueVolts1150;
	jmethodID mid_getMinReferenceValueDAC1151;
	jmethodID mid_getMaxReferenceValueDAC1152;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_ANALOGDAC_T
#define EXTERN_TYPEDEF_ANALOGDAC_T
	typedef void* ANALOGDAC_T;
#endif /* EXTERN_TYPEDEF_ANALOGDAC_T */
#ifndef EXTERN_TYPEDEF_ANALOGDACWRAPPER_T
#define EXTERN_TYPEDEF_ANALOGDACWRAPPER_T
	typedef void* ANALOGDACWRAPPER_T;
#endif /* EXTERN_TYPEDEF_ANALOGDACWRAPPER_T */

	// No public default Java constructor; creating one:
	EXPORTED ANALOGDACWRAPPER_T AnalogDacWrapper_Create();
	EXPORTED ANALOGDACWRAPPER_T AnalogDacWrapper_Create_1(ANALOGDAC_T analogDAC);
	EXPORTED int AnalogDacWrapper_getOffsetCount(ANALOGDACWRAPPER_T c_analog_dac_wrapper);
	EXPORTED void AnalogDacWrapper_setOffsetCount(ANALOGDACWRAPPER_T c_analog_dac_wrapper, int baselineOffset);
	EXPORTED int AnalogDacWrapper_getReferenceCount(ANALOGDACWRAPPER_T c_analog_dac_wrapper);
	EXPORTED void AnalogDacWrapper_setReferenceCount(ANALOGDACWRAPPER_T c_analog_dac_wrapper, int referenceCnt);
	EXPORTED int AnalogDacWrapper_getMinOffsetValueDAC(ANALOGDACWRAPPER_T c_analog_dac_wrapper);
	EXPORTED float AnalogDacWrapper_getMinOffsetValueVolts(ANALOGDACWRAPPER_T c_analog_dac_wrapper);
	EXPORTED int AnalogDacWrapper_getMaxOffsetValueDAC(ANALOGDACWRAPPER_T c_analog_dac_wrapper);
	EXPORTED float AnalogDacWrapper_getMaxOffsetValueVolts(ANALOGDACWRAPPER_T c_analog_dac_wrapper);
	EXPORTED float AnalogDacWrapper_getMinReferenceValueVolts(ANALOGDACWRAPPER_T c_analog_dac_wrapper);
	EXPORTED float AnalogDacWrapper_getMaxReferenceValueVolts(ANALOGDACWRAPPER_T c_analog_dac_wrapper);
	EXPORTED int AnalogDacWrapper_getMinReferenceValueDAC(ANALOGDACWRAPPER_T c_analog_dac_wrapper);
	EXPORTED int AnalogDacWrapper_getMaxReferenceValueDAC(ANALOGDACWRAPPER_T c_analog_dac_wrapper);
	EXPORTED void AnalogDacWrapper_Destroy(ANALOGDACWRAPPER_T analog_dac_wrapper);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED ANALOGDACWRAPPER_T STDCALL AnalogDacWrapper_Create_stdcall_1(ANALOGDAC_T analogDAC);
	EXPORTED int STDCALL AnalogDacWrapper_getOffsetCount_stdcall(ANALOGDACWRAPPER_T c_analog_dac_wrapper);
	EXPORTED void STDCALL AnalogDacWrapper_setOffsetCount_stdcall(ANALOGDACWRAPPER_T c_analog_dac_wrapper, int baselineOffset);
	EXPORTED int STDCALL AnalogDacWrapper_getReferenceCount_stdcall(ANALOGDACWRAPPER_T c_analog_dac_wrapper);
	EXPORTED void STDCALL AnalogDacWrapper_setReferenceCount_stdcall(ANALOGDACWRAPPER_T c_analog_dac_wrapper, int referenceCnt);
	EXPORTED int STDCALL AnalogDacWrapper_getMinOffsetValueDAC_stdcall(ANALOGDACWRAPPER_T c_analog_dac_wrapper);
	EXPORTED float STDCALL AnalogDacWrapper_getMinOffsetValueVolts_stdcall(ANALOGDACWRAPPER_T c_analog_dac_wrapper);
	EXPORTED int STDCALL AnalogDacWrapper_getMaxOffsetValueDAC_stdcall(ANALOGDACWRAPPER_T c_analog_dac_wrapper);
	EXPORTED float STDCALL AnalogDacWrapper_getMaxOffsetValueVolts_stdcall(ANALOGDACWRAPPER_T c_analog_dac_wrapper);
	EXPORTED float STDCALL AnalogDacWrapper_getMinReferenceValueVolts_stdcall(ANALOGDACWRAPPER_T c_analog_dac_wrapper);
	EXPORTED float STDCALL AnalogDacWrapper_getMaxReferenceValueVolts_stdcall(ANALOGDACWRAPPER_T c_analog_dac_wrapper);
	EXPORTED int STDCALL AnalogDacWrapper_getMinReferenceValueDAC_stdcall(ANALOGDACWRAPPER_T c_analog_dac_wrapper);
	EXPORTED int STDCALL AnalogDacWrapper_getMaxReferenceValueDAC_stdcall(ANALOGDACWRAPPER_T c_analog_dac_wrapper);
	EXPORTED void STDCALL AnalogDacWrapper_Destroy_stdcall(ANALOGDACWRAPPER_T analog_dac_wrapper);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* ANALOGDACWRAPPER_H */
