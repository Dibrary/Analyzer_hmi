/**
 * File: HR2000.h
 * Autogenerated on Fri Mar 23 13:38:51 EDT 2018 based on
 * HR2000.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/hr2000/HR2000
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef HR2000_H
#define HR2000_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBSpectrometer.h"
#include "USBEndpointDescriptor.h"
#include "GUIProviderArray.h"
#include "SpectrometerPlugInArray.h"
#include "ExternalTriggerModeArray.h"
#include "CoefficientsArray.h"
#include "AcquisitionListener.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBSpectrometer;
class USBEndpointDescriptor;
class GUIProviderArray;
class SpectrometerPlugInArray;
class ExternalTriggerModeArray;
class CoefficientsArray;
class AcquisitionListener;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED HR2000 : public USBSpectrometer // CPPClass.tag001
{
public: 
	HR2000();
	HR2000(int i);
	void setEndpoints();
	USBEndpointDescriptor getEndpoint(int endPoint);
	short allowWriteToEEPROM(int privilegeLevel, int slot);
	void openSpectrometer(int index);
	GUIProviderArray getGUIFeatures();
	int getActualIntegrationTime();
	int setI2CBytes(signed char address, signed char numBytes, CharArray& message);
	CharArray getI2CBytes(signed char address, signed char numBytes);
	short isPlugInDetected(int id);
	SpectrometerPlugInArray getPlugIns();
	int getNumberOfPlugIns();
	CharArray initializePlugIns();
	void detectPlugIns();
	void setExternalTriggerMode(int mode);
	ExternalTriggerModeArray getExternalTriggerModes();
	CoefficientsArray readNonlinearityCoefficientsFromSpectrometer();
	void writeNonlinearityCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	CoefficientsArray getNonlinearityCoefficients();
	void setNonlinearityCoefficients(CoefficientsArray& coefficients);
	DoubleArray getNonlinearityCoefficientsSingleChannel(int index);
	void setNonlinearityCoefficientsSingleChannel(DoubleArray& nl, int index);
	CoefficientsArray readWavelengthCalibrationCoefficientsFromSpectrometer();
	void writeWavelengthCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	CoefficientsArray getWavelengthCalibrationCoefficients();
	void setWavelengthCalibrationCoefficients(CoefficientsArray& coefficients);
	DoubleArray getWavelengths(int index);
	void setWavelengths(DoubleArray& wl, int index);
	CoefficientsArray readStrayLightCorrectionCoefficientFromSpectrometer();
	void writeStrayLightCoefficientToSpectrometer(CoefficientsArray& coefficients);
	void setStrayLightCorrectionCoefficient(CoefficientsArray& coefficients);
	CoefficientsArray getStrayLightCorrectionCoefficient();
	void setStrayLight(double strayLight, int index);
	double getStrayLight(int index);
	short isAdvancedVersion();
	void addAcquisitionListener(AcquisitionListener& listener);
	void removeAcquisitionListener(AcquisitionListener& listener);
	~HR2000();
	// No public Java copy constructor; creating one:
	HR2000(const HR2000 &that);
	// Creating assignment operator declaration:
	HR2000 &operator=(const HR2000 &that);

private:
	jmethodID mid_HR20003360;
	jmethodID mid_HR20003361;
	jmethodID mid_setEndpoints3362;
	jmethodID mid_getEndpoint3363;
	jmethodID mid_allowWriteToEEPROM3364;
	jmethodID mid_openSpectrometer3365;
	jmethodID mid_getGUIFeatures3366;
	jmethodID mid_getActualIntegrationTime3367;
	jmethodID mid_setI2CBytes3368;
	jmethodID mid_getI2CBytes3369;
	jmethodID mid_isPlugInDetected3370;
	jmethodID mid_getPlugIns3371;
	jmethodID mid_getNumberOfPlugIns3372;
	jmethodID mid_initializePlugIns3373;
	jmethodID mid_detectPlugIns3374;
	jmethodID mid_setExternalTriggerMode3375;
	jmethodID mid_getExternalTriggerModes3376;
	jmethodID mid_readNonlinearityCoefficientsFromSpectrometer3377;
	jmethodID mid_writeNonlinearityCoefficientsToSpectrometer3378;
	jmethodID mid_getNonlinearityCoefficients3379;
	jmethodID mid_setNonlinearityCoefficients3380;
	jmethodID mid_getNonlinearityCoefficientsSingleChannel3381;
	jmethodID mid_setNonlinearityCoefficientsSingleChannel3382;
	jmethodID mid_readWavelengthCalibrationCoefficientsFromSpectrometer3383;
	jmethodID mid_writeWavelengthCoefficientsToSpectrometer3384;
	jmethodID mid_getWavelengthCalibrationCoefficients3385;
	jmethodID mid_setWavelengthCalibrationCoefficients3386;
	jmethodID mid_getWavelengths3387;
	jmethodID mid_setWavelengths3388;
	jmethodID mid_readStrayLightCorrectionCoefficientFromSpectrometer3389;
	jmethodID mid_writeStrayLightCoefficientToSpectrometer3390;
	jmethodID mid_setStrayLightCorrectionCoefficient3391;
	jmethodID mid_getStrayLightCorrectionCoefficient3392;
	jmethodID mid_setStrayLight3393;
	jmethodID mid_getStrayLight3394;
	jmethodID mid_isAdvancedVersion3395;
	jmethodID mid_addAcquisitionListener3396;
	jmethodID mid_removeAcquisitionListener3397;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBSPECTROMETER_T
#define EXTERN_TYPEDEF_USBSPECTROMETER_T
	typedef void* USBSPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_USBSPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_USBENDPOINTDESCRIPTOR_T
#define EXTERN_TYPEDEF_USBENDPOINTDESCRIPTOR_T
	typedef void* USBENDPOINTDESCRIPTOR_T;
#endif /* EXTERN_TYPEDEF_USBENDPOINTDESCRIPTOR_T */
#ifndef EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
#define EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
	typedef void* GUIPROVIDERARRAY_T;
#endif /* EXTERN_TYPEDEF_GUIPROVIDERARRAY_T */
#ifndef EXTERN_TYPEDEF_SPECTROMETERPLUGINARRAY_T
#define EXTERN_TYPEDEF_SPECTROMETERPLUGINARRAY_T
	typedef void* SPECTROMETERPLUGINARRAY_T;
#endif /* EXTERN_TYPEDEF_SPECTROMETERPLUGINARRAY_T */
#ifndef EXTERN_TYPEDEF_EXTERNALTRIGGERMODEARRAY_T
#define EXTERN_TYPEDEF_EXTERNALTRIGGERMODEARRAY_T
	typedef void* EXTERNALTRIGGERMODEARRAY_T;
#endif /* EXTERN_TYPEDEF_EXTERNALTRIGGERMODEARRAY_T */
#ifndef EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
#define EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
	typedef void* COEFFICIENTSARRAY_T;
#endif /* EXTERN_TYPEDEF_COEFFICIENTSARRAY_T */
#ifndef EXTERN_TYPEDEF_ACQUISITIONLISTENER_T
#define EXTERN_TYPEDEF_ACQUISITIONLISTENER_T
	typedef void* ACQUISITIONLISTENER_T;
#endif /* EXTERN_TYPEDEF_ACQUISITIONLISTENER_T */
#ifndef EXTERN_TYPEDEF_HR2000_T
#define EXTERN_TYPEDEF_HR2000_T
	typedef void* HR2000_T;
#endif /* EXTERN_TYPEDEF_HR2000_T */

	EXPORTED HR2000_T HR2000_Create();
	EXPORTED HR2000_T HR2000_Create_1(int i);
	EXPORTED void HR2000_setEndpoints(HR2000_T c_hr2000);
	EXPORTED void HR2000_getEndpoint(HR2000_T c_hr2000, int endPoint, USBENDPOINTDESCRIPTOR_T retval);
	EXPORTED short HR2000_allowWriteToEEPROM(HR2000_T c_hr2000, int privilegeLevel, int slot);
	EXPORTED void HR2000_openSpectrometer(HR2000_T c_hr2000, int index);
	EXPORTED void HR2000_getGUIFeatures(HR2000_T c_hr2000, GUIPROVIDERARRAY_T retval);
	EXPORTED int HR2000_getActualIntegrationTime(HR2000_T c_hr2000);
	EXPORTED int HR2000_setI2CBytes(HR2000_T c_hr2000, signed char address, signed char numBytes, CHARARRAY_T message);
	EXPORTED void HR2000_getI2CBytes(HR2000_T c_hr2000, signed char address, signed char numBytes, CHARARRAY_T retval);
	EXPORTED short HR2000_isPlugInDetected(HR2000_T c_hr2000, int id);
	EXPORTED void HR2000_getPlugIns(HR2000_T c_hr2000, SPECTROMETERPLUGINARRAY_T retval);
	EXPORTED int HR2000_getNumberOfPlugIns(HR2000_T c_hr2000);
	EXPORTED void HR2000_initializePlugIns(HR2000_T c_hr2000, CHARARRAY_T retval);
	EXPORTED void HR2000_detectPlugIns(HR2000_T c_hr2000);
	EXPORTED void HR2000_setExternalTriggerMode(HR2000_T c_hr2000, int mode);
	EXPORTED void HR2000_getExternalTriggerModes(HR2000_T c_hr2000, EXTERNALTRIGGERMODEARRAY_T retval);
	EXPORTED void HR2000_readNonlinearityCoefficientsFromSpectrometer(HR2000_T c_hr2000, COEFFICIENTSARRAY_T retval);
	EXPORTED void HR2000_writeNonlinearityCoefficientsToSpectrometer(HR2000_T c_hr2000, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void HR2000_getNonlinearityCoefficients(HR2000_T c_hr2000, COEFFICIENTSARRAY_T retval);
	EXPORTED void HR2000_setNonlinearityCoefficients(HR2000_T c_hr2000, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void HR2000_getNonlinearityCoefficientsSingleChannel(HR2000_T c_hr2000, int index, DOUBLEARRAY_T retval);
	EXPORTED void HR2000_setNonlinearityCoefficientsSingleChannel(HR2000_T c_hr2000, DOUBLEARRAY_T nl, int index);
	EXPORTED void HR2000_readWavelengthCalibrationCoefficientsFromSpectrometer(HR2000_T c_hr2000, COEFFICIENTSARRAY_T retval);
	EXPORTED void HR2000_writeWavelengthCoefficientsToSpectrometer(HR2000_T c_hr2000, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void HR2000_getWavelengthCalibrationCoefficients(HR2000_T c_hr2000, COEFFICIENTSARRAY_T retval);
	EXPORTED void HR2000_setWavelengthCalibrationCoefficients(HR2000_T c_hr2000, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void HR2000_getWavelengths(HR2000_T c_hr2000, int index, DOUBLEARRAY_T retval);
	EXPORTED void HR2000_setWavelengths(HR2000_T c_hr2000, DOUBLEARRAY_T wl, int index);
	EXPORTED void HR2000_readStrayLightCorrectionCoefficientFromSpectrometer(HR2000_T c_hr2000, COEFFICIENTSARRAY_T retval);
	EXPORTED void HR2000_writeStrayLightCoefficientToSpectrometer(HR2000_T c_hr2000, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void HR2000_setStrayLightCorrectionCoefficient(HR2000_T c_hr2000, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void HR2000_getStrayLightCorrectionCoefficient(HR2000_T c_hr2000, COEFFICIENTSARRAY_T retval);
	EXPORTED void HR2000_setStrayLight(HR2000_T c_hr2000, double strayLight, int index);
	EXPORTED double HR2000_getStrayLight(HR2000_T c_hr2000, int index);
	EXPORTED short HR2000_isAdvancedVersion(HR2000_T c_hr2000);
	EXPORTED void HR2000_addAcquisitionListener(HR2000_T c_hr2000, ACQUISITIONLISTENER_T listener);
	EXPORTED void HR2000_removeAcquisitionListener(HR2000_T c_hr2000, ACQUISITIONLISTENER_T listener);
	EXPORTED void HR2000_Destroy(HR2000_T hr2000);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED HR2000_T STDCALL HR2000_Create_stdcall();
	EXPORTED HR2000_T STDCALL HR2000_Create_stdcall_1(int i);
	EXPORTED void STDCALL HR2000_setEndpoints_stdcall(HR2000_T c_hr2000);
	EXPORTED void STDCALL HR2000_getEndpoint_stdcall(HR2000_T c_hr2000, int endPoint, USBENDPOINTDESCRIPTOR_T retval);
	EXPORTED short STDCALL HR2000_allowWriteToEEPROM_stdcall(HR2000_T c_hr2000, int privilegeLevel, int slot);
	EXPORTED void STDCALL HR2000_openSpectrometer_stdcall(HR2000_T c_hr2000, int index);
	EXPORTED void STDCALL HR2000_getGUIFeatures_stdcall(HR2000_T c_hr2000, GUIPROVIDERARRAY_T retval);
	EXPORTED int STDCALL HR2000_getActualIntegrationTime_stdcall(HR2000_T c_hr2000);
	EXPORTED int STDCALL HR2000_setI2CBytes_stdcall(HR2000_T c_hr2000, signed char address, signed char numBytes, CHARARRAY_T message);
	EXPORTED void STDCALL HR2000_getI2CBytes_stdcall(HR2000_T c_hr2000, signed char address, signed char numBytes, CHARARRAY_T retval);
	EXPORTED short STDCALL HR2000_isPlugInDetected_stdcall(HR2000_T c_hr2000, int id);
	EXPORTED void STDCALL HR2000_getPlugIns_stdcall(HR2000_T c_hr2000, SPECTROMETERPLUGINARRAY_T retval);
	EXPORTED int STDCALL HR2000_getNumberOfPlugIns_stdcall(HR2000_T c_hr2000);
	EXPORTED void STDCALL HR2000_initializePlugIns_stdcall(HR2000_T c_hr2000, CHARARRAY_T retval);
	EXPORTED void STDCALL HR2000_detectPlugIns_stdcall(HR2000_T c_hr2000);
	EXPORTED void STDCALL HR2000_setExternalTriggerMode_stdcall(HR2000_T c_hr2000, int mode);
	EXPORTED void STDCALL HR2000_getExternalTriggerModes_stdcall(HR2000_T c_hr2000, EXTERNALTRIGGERMODEARRAY_T retval);
	EXPORTED void STDCALL HR2000_readNonlinearityCoefficientsFromSpectrometer_stdcall(HR2000_T c_hr2000, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL HR2000_writeNonlinearityCoefficientsToSpectrometer_stdcall(HR2000_T c_hr2000, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL HR2000_getNonlinearityCoefficients_stdcall(HR2000_T c_hr2000, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL HR2000_setNonlinearityCoefficients_stdcall(HR2000_T c_hr2000, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL HR2000_getNonlinearityCoefficientsSingleChannel_stdcall(HR2000_T c_hr2000, int index, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL HR2000_setNonlinearityCoefficientsSingleChannel_stdcall(HR2000_T c_hr2000, DOUBLEARRAY_T nl, int index);
	EXPORTED void STDCALL HR2000_readWavelengthCalibrationCoefficientsFromSpectrometer_stdcall(HR2000_T c_hr2000, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL HR2000_writeWavelengthCoefficientsToSpectrometer_stdcall(HR2000_T c_hr2000, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL HR2000_getWavelengthCalibrationCoefficients_stdcall(HR2000_T c_hr2000, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL HR2000_setWavelengthCalibrationCoefficients_stdcall(HR2000_T c_hr2000, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL HR2000_getWavelengths_stdcall(HR2000_T c_hr2000, int index, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL HR2000_setWavelengths_stdcall(HR2000_T c_hr2000, DOUBLEARRAY_T wl, int index);
	EXPORTED void STDCALL HR2000_readStrayLightCorrectionCoefficientFromSpectrometer_stdcall(HR2000_T c_hr2000, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL HR2000_writeStrayLightCoefficientToSpectrometer_stdcall(HR2000_T c_hr2000, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL HR2000_setStrayLightCorrectionCoefficient_stdcall(HR2000_T c_hr2000, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL HR2000_getStrayLightCorrectionCoefficient_stdcall(HR2000_T c_hr2000, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL HR2000_setStrayLight_stdcall(HR2000_T c_hr2000, double strayLight, int index);
	EXPORTED double STDCALL HR2000_getStrayLight_stdcall(HR2000_T c_hr2000, int index);
	EXPORTED short STDCALL HR2000_isAdvancedVersion_stdcall(HR2000_T c_hr2000);
	EXPORTED void STDCALL HR2000_addAcquisitionListener_stdcall(HR2000_T c_hr2000, ACQUISITIONLISTENER_T listener);
	EXPORTED void STDCALL HR2000_removeAcquisitionListener_stdcall(HR2000_T c_hr2000, ACQUISITIONLISTENER_T listener);
	EXPORTED void STDCALL HR2000_Destroy_stdcall(HR2000_T hr2000);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* HR2000_H */
