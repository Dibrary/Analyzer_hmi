/**
 * File: W1064m.h
 * Autogenerated on Fri Mar 23 13:39:18 EDT 2018 based on
 * W1064m.java
 * for the Java class
 * com/oceanoptics/omnidriver/spectrometer/w1064m/W1064m
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef W1064M_H
#define W1064M_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBSpectrometer.h"
#include "JString.h"
#include "GUIProviderArray.h"
#include "CoefficientsArray.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBSpectrometer;
class JString;
class GUIProviderArray;
class CoefficientsArray;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED W1064m : public USBSpectrometer // CPPClass.tag001
{
public: 
	W1064m();
	W1064m(int i);
	void setEndpoints();
	void openSpectrometer(int index);
	JString getFirmwareVersion();
	JString getInfo(int slot);
	CharArray getInfoBytes(int slot);
	CharArray getStatusArray();
	void initialize();
	void setInfo(int slot, JString& str);
	void setInfoBytes(int slot, CharArray& byteArray);
	void setIntegrationTime(int intTime);
	GUIProviderArray getGUIFeatures();
	void setStrobeEnable(short strobe);
	CharArray queryDevice(int messageType, CharArray& payload);
	short sendCommandToDevice(int messageType, CharArray& payload, int endPointNumber);
	short sendCommandToDevice(int messageType, CharArray& payload);
	void readSpectrum();
	CoefficientsArray getWavelengthCalibrationCoefficients();
	DoubleArray getWavelengths(int index);
	CoefficientsArray readWavelengthCalibrationCoefficientsFromSpectrometer();
	void setWavelengthCalibrationCoefficients(CoefficientsArray& coefficients);
	void setWavelengths(DoubleArray& wavelengths, int index);
	void writeWavelengthCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	void writeNonlinearityCoefficientsToSpectrometer(CoefficientsArray& coefficients);
	CoefficientsArray readNonlinearityCoefficientsFromSpectrometer();
	void setNonlinearityCoefficients(CoefficientsArray& coefficients);
	CoefficientsArray getNonlinearityCoefficients();
	DoubleArray getNonlinearityCoefficientsSingleChannel(int channelIndex);
	void setNonlinearityCoefficientsSingleChannel(DoubleArray& nonlinearities, int channelIndex);
	void writeStrayLightCoefficientToSpectrometer(CoefficientsArray& coefficients);
	CoefficientsArray readStrayLightCorrectionCoefficientFromSpectrometer();
	void setStrayLightCorrectionCoefficient(CoefficientsArray& coefficients);
	CoefficientsArray getStrayLightCorrectionCoefficient();
	double getStrayLight(int index);
	void setStrayLight(double strayLight, int index);
	int getSaturationIntensity();
	short setSaturationIntensity(int saturationIntensity, JString& key);
	void setTECEnable(short enable);
	void setFanEnable(short enable);
	double getDetectorTemperatureCelsius();
	double getDetectorTemperatureSetPointCelsius();
	void setDetectorSetPointCelsius(double point);
	double getSetPointMinimumCelsius();
	double getSetPointMaximumCelsius();
	double getSetPointIncrementCelsius();
	short isSaveTECStateEnabled();
	void saveTECState();
	~W1064m();
	// No public Java copy constructor; creating one:
	W1064m(const W1064m &that);
	// Creating assignment operator declaration:
	W1064m &operator=(const W1064m &that);

private:
	jmethodID mid_W1064m6379;
	jmethodID mid_W1064m6380;
	jmethodID mid_setEndpoints6381;
	jmethodID mid_openSpectrometer6382;
	jmethodID mid_getFirmwareVersion6383;
	jmethodID mid_getInfo6384;
	jmethodID mid_getInfoBytes6385;
	jmethodID mid_getStatusArray6386;
	jmethodID mid_initialize6387;
	jmethodID mid_setInfo6388;
	jmethodID mid_setInfoBytes6389;
	jmethodID mid_setIntegrationTime6390;
	jmethodID mid_getGUIFeatures6391;
	jmethodID mid_setStrobeEnable6392;
	jmethodID mid_queryDevice6393;
	jmethodID mid_sendCommandToDevice6394;
	jmethodID mid_sendCommandToDevice6395;
	jmethodID mid_readSpectrum6396;
	jmethodID mid_getWavelengthCalibrationCoefficients6397;
	jmethodID mid_getWavelengths6398;
	jmethodID mid_readWavelengthCalibrationCoefficientsFromSpectrometer6399;
	jmethodID mid_setWavelengthCalibrationCoefficients6400;
	jmethodID mid_setWavelengths6401;
	jmethodID mid_writeWavelengthCoefficientsToSpectrometer6402;
	jmethodID mid_writeNonlinearityCoefficientsToSpectrometer6403;
	jmethodID mid_readNonlinearityCoefficientsFromSpectrometer6404;
	jmethodID mid_setNonlinearityCoefficients6405;
	jmethodID mid_getNonlinearityCoefficients6406;
	jmethodID mid_getNonlinearityCoefficientsSingleChannel6407;
	jmethodID mid_setNonlinearityCoefficientsSingleChannel6408;
	jmethodID mid_writeStrayLightCoefficientToSpectrometer6409;
	jmethodID mid_readStrayLightCorrectionCoefficientFromSpectrometer6410;
	jmethodID mid_setStrayLightCorrectionCoefficient6411;
	jmethodID mid_getStrayLightCorrectionCoefficient6412;
	jmethodID mid_getStrayLight6413;
	jmethodID mid_setStrayLight6414;
	jmethodID mid_getSaturationIntensity6415;
	jmethodID mid_setSaturationIntensity6416;
	jmethodID mid_setTECEnable6417;
	jmethodID mid_setFanEnable6418;
	jmethodID mid_getDetectorTemperatureCelsius6419;
	jmethodID mid_getDetectorTemperatureSetPointCelsius6420;
	jmethodID mid_setDetectorSetPointCelsius6421;
	jmethodID mid_getSetPointMinimumCelsius6422;
	jmethodID mid_getSetPointMaximumCelsius6423;
	jmethodID mid_getSetPointIncrementCelsius6424;
	jmethodID mid_isSaveTECStateEnabled6425;
	jmethodID mid_saveTECState6426;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBSPECTROMETER_T
#define EXTERN_TYPEDEF_USBSPECTROMETER_T
	typedef void* USBSPECTROMETER_T;
#endif /* EXTERN_TYPEDEF_USBSPECTROMETER_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
#define EXTERN_TYPEDEF_GUIPROVIDERARRAY_T
	typedef void* GUIPROVIDERARRAY_T;
#endif /* EXTERN_TYPEDEF_GUIPROVIDERARRAY_T */
#ifndef EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
#define EXTERN_TYPEDEF_COEFFICIENTSARRAY_T
	typedef void* COEFFICIENTSARRAY_T;
#endif /* EXTERN_TYPEDEF_COEFFICIENTSARRAY_T */
#ifndef EXTERN_TYPEDEF_W1064M_T
#define EXTERN_TYPEDEF_W1064M_T
	typedef void* W1064M_T;
#endif /* EXTERN_TYPEDEF_W1064M_T */

	EXPORTED W1064M_T W1064m_Create();
	EXPORTED W1064M_T W1064m_Create_1(int i);
	EXPORTED void W1064m_setEndpoints(W1064M_T c_w1064m);
	EXPORTED void W1064m_openSpectrometer(W1064M_T c_w1064m, int index);
	EXPORTED void W1064m_getFirmwareVersion(W1064M_T c_w1064m, JSTRING_T retval);
	EXPORTED void W1064m_getInfo(W1064M_T c_w1064m, int slot, JSTRING_T retval);
	EXPORTED void W1064m_getInfoBytes(W1064M_T c_w1064m, int slot, CHARARRAY_T retval);
	EXPORTED void W1064m_getStatusArray(W1064M_T c_w1064m, CHARARRAY_T retval);
	EXPORTED void W1064m_initialize(W1064M_T c_w1064m);
	EXPORTED void W1064m_setInfo(W1064M_T c_w1064m, int slot, JSTRING_T str);
	EXPORTED void W1064m_setInfoBytes(W1064M_T c_w1064m, int slot, CHARARRAY_T byteArray);
	EXPORTED void W1064m_setIntegrationTime(W1064M_T c_w1064m, int intTime);
	EXPORTED void W1064m_getGUIFeatures(W1064M_T c_w1064m, GUIPROVIDERARRAY_T retval);
	EXPORTED void W1064m_setStrobeEnable(W1064M_T c_w1064m, short strobe);
	EXPORTED void W1064m_queryDevice(W1064M_T c_w1064m, int messageType, CHARARRAY_T payload, CHARARRAY_T retval);
	EXPORTED short W1064m_sendCommandToDevice(W1064M_T c_w1064m, int messageType, CHARARRAY_T payload, int endPointNumber);
	EXPORTED short W1064m_sendCommandToDevice_1(W1064M_T c_w1064m, int messageType, CHARARRAY_T payload);
	EXPORTED void W1064m_readSpectrum(W1064M_T c_w1064m);
	EXPORTED void W1064m_getWavelengthCalibrationCoefficients(W1064M_T c_w1064m, COEFFICIENTSARRAY_T retval);
	EXPORTED void W1064m_getWavelengths(W1064M_T c_w1064m, int index, DOUBLEARRAY_T retval);
	EXPORTED void W1064m_readWavelengthCalibrationCoefficientsFromSpectrometer(W1064M_T c_w1064m, COEFFICIENTSARRAY_T retval);
	EXPORTED void W1064m_setWavelengthCalibrationCoefficients(W1064M_T c_w1064m, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void W1064m_setWavelengths(W1064M_T c_w1064m, DOUBLEARRAY_T wavelengths, int index);
	EXPORTED void W1064m_writeWavelengthCoefficientsToSpectrometer(W1064M_T c_w1064m, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void W1064m_writeNonlinearityCoefficientsToSpectrometer(W1064M_T c_w1064m, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void W1064m_readNonlinearityCoefficientsFromSpectrometer(W1064M_T c_w1064m, COEFFICIENTSARRAY_T retval);
	EXPORTED void W1064m_setNonlinearityCoefficients(W1064M_T c_w1064m, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void W1064m_getNonlinearityCoefficients(W1064M_T c_w1064m, COEFFICIENTSARRAY_T retval);
	EXPORTED void W1064m_getNonlinearityCoefficientsSingleChannel(W1064M_T c_w1064m, int channelIndex, DOUBLEARRAY_T retval);
	EXPORTED void W1064m_setNonlinearityCoefficientsSingleChannel(W1064M_T c_w1064m, DOUBLEARRAY_T nonlinearities, int channelIndex);
	EXPORTED void W1064m_writeStrayLightCoefficientToSpectrometer(W1064M_T c_w1064m, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void W1064m_readStrayLightCorrectionCoefficientFromSpectrometer(W1064M_T c_w1064m, COEFFICIENTSARRAY_T retval);
	EXPORTED void W1064m_setStrayLightCorrectionCoefficient(W1064M_T c_w1064m, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void W1064m_getStrayLightCorrectionCoefficient(W1064M_T c_w1064m, COEFFICIENTSARRAY_T retval);
	EXPORTED double W1064m_getStrayLight(W1064M_T c_w1064m, int index);
	EXPORTED void W1064m_setStrayLight(W1064M_T c_w1064m, double strayLight, int index);
	EXPORTED int W1064m_getSaturationIntensity(W1064M_T c_w1064m);
	EXPORTED short W1064m_setSaturationIntensity(W1064M_T c_w1064m, int saturationIntensity, JSTRING_T key);
	EXPORTED void W1064m_setTECEnable(W1064M_T c_w1064m, short enable);
	EXPORTED void W1064m_setFanEnable(W1064M_T c_w1064m, short enable);
	EXPORTED double W1064m_getDetectorTemperatureCelsius(W1064M_T c_w1064m);
	EXPORTED double W1064m_getDetectorTemperatureSetPointCelsius(W1064M_T c_w1064m);
	EXPORTED void W1064m_setDetectorSetPointCelsius(W1064M_T c_w1064m, double point);
	EXPORTED double W1064m_getSetPointMinimumCelsius(W1064M_T c_w1064m);
	EXPORTED double W1064m_getSetPointMaximumCelsius(W1064M_T c_w1064m);
	EXPORTED double W1064m_getSetPointIncrementCelsius(W1064M_T c_w1064m);
	EXPORTED short W1064m_isSaveTECStateEnabled(W1064M_T c_w1064m);
	EXPORTED void W1064m_saveTECState(W1064M_T c_w1064m);
	EXPORTED void W1064m_Destroy(W1064M_T w1064m);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED W1064M_T STDCALL W1064m_Create_stdcall();
	EXPORTED W1064M_T STDCALL W1064m_Create_stdcall_1(int i);
	EXPORTED void STDCALL W1064m_setEndpoints_stdcall(W1064M_T c_w1064m);
	EXPORTED void STDCALL W1064m_openSpectrometer_stdcall(W1064M_T c_w1064m, int index);
	EXPORTED void STDCALL W1064m_getFirmwareVersion_stdcall(W1064M_T c_w1064m, JSTRING_T retval);
	EXPORTED void STDCALL W1064m_getInfo_stdcall(W1064M_T c_w1064m, int slot, JSTRING_T retval);
	EXPORTED void STDCALL W1064m_getInfoBytes_stdcall(W1064M_T c_w1064m, int slot, CHARARRAY_T retval);
	EXPORTED void STDCALL W1064m_getStatusArray_stdcall(W1064M_T c_w1064m, CHARARRAY_T retval);
	EXPORTED void STDCALL W1064m_initialize_stdcall(W1064M_T c_w1064m);
	EXPORTED void STDCALL W1064m_setInfo_stdcall(W1064M_T c_w1064m, int slot, JSTRING_T str);
	EXPORTED void STDCALL W1064m_setInfoBytes_stdcall(W1064M_T c_w1064m, int slot, CHARARRAY_T byteArray);
	EXPORTED void STDCALL W1064m_setIntegrationTime_stdcall(W1064M_T c_w1064m, int intTime);
	EXPORTED void STDCALL W1064m_getGUIFeatures_stdcall(W1064M_T c_w1064m, GUIPROVIDERARRAY_T retval);
	EXPORTED void STDCALL W1064m_setStrobeEnable_stdcall(W1064M_T c_w1064m, short strobe);
	EXPORTED void STDCALL W1064m_queryDevice_stdcall(W1064M_T c_w1064m, int messageType, CHARARRAY_T payload, CHARARRAY_T retval);
	EXPORTED short STDCALL W1064m_sendCommandToDevice_stdcall(W1064M_T c_w1064m, int messageType, CHARARRAY_T payload, int endPointNumber);
	EXPORTED short STDCALL W1064m_sendCommandToDevice_stdcall_1(W1064M_T c_w1064m, int messageType, CHARARRAY_T payload);
	EXPORTED void STDCALL W1064m_readSpectrum_stdcall(W1064M_T c_w1064m);
	EXPORTED void STDCALL W1064m_getWavelengthCalibrationCoefficients_stdcall(W1064M_T c_w1064m, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL W1064m_getWavelengths_stdcall(W1064M_T c_w1064m, int index, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL W1064m_readWavelengthCalibrationCoefficientsFromSpectrometer_stdcall(W1064M_T c_w1064m, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL W1064m_setWavelengthCalibrationCoefficients_stdcall(W1064M_T c_w1064m, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL W1064m_setWavelengths_stdcall(W1064M_T c_w1064m, DOUBLEARRAY_T wavelengths, int index);
	EXPORTED void STDCALL W1064m_writeWavelengthCoefficientsToSpectrometer_stdcall(W1064M_T c_w1064m, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL W1064m_writeNonlinearityCoefficientsToSpectrometer_stdcall(W1064M_T c_w1064m, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL W1064m_readNonlinearityCoefficientsFromSpectrometer_stdcall(W1064M_T c_w1064m, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL W1064m_setNonlinearityCoefficients_stdcall(W1064M_T c_w1064m, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL W1064m_getNonlinearityCoefficients_stdcall(W1064M_T c_w1064m, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL W1064m_getNonlinearityCoefficientsSingleChannel_stdcall(W1064M_T c_w1064m, int channelIndex, DOUBLEARRAY_T retval);
	EXPORTED void STDCALL W1064m_setNonlinearityCoefficientsSingleChannel_stdcall(W1064M_T c_w1064m, DOUBLEARRAY_T nonlinearities, int channelIndex);
	EXPORTED void STDCALL W1064m_writeStrayLightCoefficientToSpectrometer_stdcall(W1064M_T c_w1064m, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL W1064m_readStrayLightCorrectionCoefficientFromSpectrometer_stdcall(W1064M_T c_w1064m, COEFFICIENTSARRAY_T retval);
	EXPORTED void STDCALL W1064m_setStrayLightCorrectionCoefficient_stdcall(W1064M_T c_w1064m, COEFFICIENTSARRAY_T coefficients);
	EXPORTED void STDCALL W1064m_getStrayLightCorrectionCoefficient_stdcall(W1064M_T c_w1064m, COEFFICIENTSARRAY_T retval);
	EXPORTED double STDCALL W1064m_getStrayLight_stdcall(W1064M_T c_w1064m, int index);
	EXPORTED void STDCALL W1064m_setStrayLight_stdcall(W1064M_T c_w1064m, double strayLight, int index);
	EXPORTED int STDCALL W1064m_getSaturationIntensity_stdcall(W1064M_T c_w1064m);
	EXPORTED short STDCALL W1064m_setSaturationIntensity_stdcall(W1064M_T c_w1064m, int saturationIntensity, JSTRING_T key);
	EXPORTED void STDCALL W1064m_setTECEnable_stdcall(W1064M_T c_w1064m, short enable);
	EXPORTED void STDCALL W1064m_setFanEnable_stdcall(W1064M_T c_w1064m, short enable);
	EXPORTED double STDCALL W1064m_getDetectorTemperatureCelsius_stdcall(W1064M_T c_w1064m);
	EXPORTED double STDCALL W1064m_getDetectorTemperatureSetPointCelsius_stdcall(W1064M_T c_w1064m);
	EXPORTED void STDCALL W1064m_setDetectorSetPointCelsius_stdcall(W1064M_T c_w1064m, double point);
	EXPORTED double STDCALL W1064m_getSetPointMinimumCelsius_stdcall(W1064M_T c_w1064m);
	EXPORTED double STDCALL W1064m_getSetPointMaximumCelsius_stdcall(W1064M_T c_w1064m);
	EXPORTED double STDCALL W1064m_getSetPointIncrementCelsius_stdcall(W1064M_T c_w1064m);
	EXPORTED short STDCALL W1064m_isSaveTECStateEnabled_stdcall(W1064M_T c_w1064m);
	EXPORTED void STDCALL W1064m_saveTECState_stdcall(W1064M_T c_w1064m);
	EXPORTED void STDCALL W1064m_Destroy_stdcall(W1064M_T w1064m);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* W1064M_H */
