/**
 * File: USBImpl.h
 * Autogenerated on Fri Mar 23 13:38:29 EDT 2018 based on
 * USBImpl.java
 * for the Java class
 * com/oceanoptics/omnidriver/features/USBImpl
 * Copyright (C) 2006 - 2008 Ocean Optics, Inc.  All rights reserved.
 */


#ifndef USBIMPL_H
#define USBIMPL_H
#include "BaseJavaClass.h"

#ifdef __cplusplus

#ifdef INCLUDES_IN_HEADER
#include "USBEndpointDescriptor.h"
#include "JString.h"
#endif /* INCLUDES_IN_HEADER */

/* Pre-declarations for circular dependencies in header files */
#ifdef CLASS_PREDECLARATIONS
class USBEndpointDescriptor;
class JString;
#endif /* CLASS_PREDECLARATIONS */

CLASS_TOKEN EXPORTED USBImpl : public BaseJavaClass // CPPClass.tag001
{
public: 
	USBImpl(short driver);
	CharArray getInputBuffer();
	CharArray getOutputBuffer();
	void increaseInputBufferSize(int size);
	void increaseOutputBufferSize(int size);
	int setTimeout(USBEndpointDescriptor& endPointDescriptor, int timeoutMilliseconds);
	void bulkIn(USBEndpointDescriptor& endPointDescriptor, CharArray& data, int length);
	void bulkOut(USBEndpointDescriptor& endPointDescriptor, CharArray& data, int length);
	JString readUSBStringDescriptor(int num);
	void openDevice(int vendorID, int prodID, int index);
	void closeDevice();
	JString toString();
	JString getUSBStringDescriptor(int index);
	short isUSB2Mode();
	~USBImpl();
	// No public default Java constructor; creating one:
	USBImpl();
	// No public Java copy constructor; creating one:
	USBImpl(const USBImpl &that);
	// Creating assignment operator declaration:
	USBImpl &operator=(const USBImpl &that);

private:
	jmethodID mid_USBImpl733;
	jmethodID mid_getInputBuffer734;
	jmethodID mid_getOutputBuffer735;
	jmethodID mid_increaseInputBufferSize736;
	jmethodID mid_increaseOutputBufferSize737;
	jmethodID mid_setTimeout738;
	jmethodID mid_bulkIn739;
	jmethodID mid_bulkOut740;
	jmethodID mid_readUSBStringDescriptor741;
	jmethodID mid_openDevice742;
	jmethodID mid_closeDevice743;
	jmethodID mid_toString744;
	jmethodID mid_getUSBStringDescriptor745;
	jmethodID mid_isUSB2Mode746;
	void init_ids(JNIEnv* pJNIEnv);
};

extern "C" {
#endif /* __cplusplus */
#ifndef EXTERN_TYPEDEF_USBENDPOINTDESCRIPTOR_T
#define EXTERN_TYPEDEF_USBENDPOINTDESCRIPTOR_T
	typedef void* USBENDPOINTDESCRIPTOR_T;
#endif /* EXTERN_TYPEDEF_USBENDPOINTDESCRIPTOR_T */
#ifndef EXTERN_TYPEDEF_JSTRING_T
#define EXTERN_TYPEDEF_JSTRING_T
	typedef void* JSTRING_T;
#endif /* EXTERN_TYPEDEF_JSTRING_T */
#ifndef EXTERN_TYPEDEF_USBIMPL_T
#define EXTERN_TYPEDEF_USBIMPL_T
	typedef void* USBIMPL_T;
#endif /* EXTERN_TYPEDEF_USBIMPL_T */

	// No public default Java constructor; creating one:
	EXPORTED USBIMPL_T USBImpl_Create();
	EXPORTED USBIMPL_T USBImpl_Create_1(short driver);
	EXPORTED void USBImpl_getInputBuffer(USBIMPL_T c_usbimpl, CHARARRAY_T retval);
	EXPORTED void USBImpl_getOutputBuffer(USBIMPL_T c_usbimpl, CHARARRAY_T retval);
	EXPORTED void USBImpl_increaseInputBufferSize(USBIMPL_T c_usbimpl, int size);
	EXPORTED void USBImpl_increaseOutputBufferSize(USBIMPL_T c_usbimpl, int size);
	EXPORTED int USBImpl_setTimeout(USBIMPL_T c_usbimpl, USBENDPOINTDESCRIPTOR_T endPointDescriptor, int timeoutMilliseconds);
	EXPORTED void USBImpl_bulkIn(USBIMPL_T c_usbimpl, USBENDPOINTDESCRIPTOR_T endPointDescriptor, CHARARRAY_T data, int length);
	EXPORTED void USBImpl_bulkOut(USBIMPL_T c_usbimpl, USBENDPOINTDESCRIPTOR_T endPointDescriptor, CHARARRAY_T data, int length);
	EXPORTED void USBImpl_readUSBStringDescriptor(USBIMPL_T c_usbimpl, int num, JSTRING_T retval);
	EXPORTED void USBImpl_openDevice(USBIMPL_T c_usbimpl, int vendorID, int prodID, int index);
	EXPORTED void USBImpl_closeDevice(USBIMPL_T c_usbimpl);
	EXPORTED void USBImpl_toString(USBIMPL_T c_usbimpl, JSTRING_T retval);
	EXPORTED void USBImpl_getUSBStringDescriptor(USBIMPL_T c_usbimpl, int index, JSTRING_T retval);
	EXPORTED short USBImpl_isUSB2Mode(USBIMPL_T c_usbimpl);
	EXPORTED void USBImpl_Destroy(USBIMPL_T usbimpl);

#ifdef WIN32
	// Use the following function prototypes when calling functions from Visual Basic 6
	EXPORTED USBIMPL_T STDCALL USBImpl_Create_stdcall_1(short driver);
	EXPORTED void STDCALL USBImpl_getInputBuffer_stdcall(USBIMPL_T c_usbimpl, CHARARRAY_T retval);
	EXPORTED void STDCALL USBImpl_getOutputBuffer_stdcall(USBIMPL_T c_usbimpl, CHARARRAY_T retval);
	EXPORTED void STDCALL USBImpl_increaseInputBufferSize_stdcall(USBIMPL_T c_usbimpl, int size);
	EXPORTED void STDCALL USBImpl_increaseOutputBufferSize_stdcall(USBIMPL_T c_usbimpl, int size);
	EXPORTED int STDCALL USBImpl_setTimeout_stdcall(USBIMPL_T c_usbimpl, USBENDPOINTDESCRIPTOR_T endPointDescriptor, int timeoutMilliseconds);
	EXPORTED void STDCALL USBImpl_bulkIn_stdcall(USBIMPL_T c_usbimpl, USBENDPOINTDESCRIPTOR_T endPointDescriptor, CHARARRAY_T data, int length);
	EXPORTED void STDCALL USBImpl_bulkOut_stdcall(USBIMPL_T c_usbimpl, USBENDPOINTDESCRIPTOR_T endPointDescriptor, CHARARRAY_T data, int length);
	EXPORTED void STDCALL USBImpl_readUSBStringDescriptor_stdcall(USBIMPL_T c_usbimpl, int num, JSTRING_T retval);
	EXPORTED void STDCALL USBImpl_openDevice_stdcall(USBIMPL_T c_usbimpl, int vendorID, int prodID, int index);
	EXPORTED void STDCALL USBImpl_closeDevice_stdcall(USBIMPL_T c_usbimpl);
	EXPORTED void STDCALL USBImpl_toString_stdcall(USBIMPL_T c_usbimpl, JSTRING_T retval);
	EXPORTED void STDCALL USBImpl_getUSBStringDescriptor_stdcall(USBIMPL_T c_usbimpl, int index, JSTRING_T retval);
	EXPORTED short STDCALL USBImpl_isUSB2Mode_stdcall(USBIMPL_T c_usbimpl);
	EXPORTED void STDCALL USBImpl_Destroy_stdcall(USBIMPL_T usbimpl);
#endif /* WIN32 */
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif /* USBIMPL_H */
